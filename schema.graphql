type AccountDiscordInformation {
  username: String!
  discriminator: String!
  handle: String!
  tag: String!
  avatar: String
}

input AccountDisplayedUserBadgeInput {
  id: ID!
  order: Int!
}

type AccountMutation {
  updateUser(username: String, updates: AccountUpdateUserInput!): Boolean
  addRole(id: ID!, roleId: ID!): Boolean
  addRoleByCode(where: AccountUserSingleInput!, code: String!): Boolean
  setDisplayedBadges(where: AccountUserSingleInput, badges: [AccountDisplayedUserBadgeInput!]): Boolean
  grantBadge(where: AccountUserSingleInput!, badge: AccountUserBadgeInput!): Boolean
  revokeBadge(where: AccountUserSingleInput!, badge: AccountUserBadgeInput!): Boolean
  uploadProfilePicture(where: AccountUserSingleInput, upload: Upload!): String
  linkDiscord(userId: ID!, discordId: String!): Boolean
  unlinkDiscord(userId: ID!): Boolean
  pizzaOrTurtleCult(where: AccountUserSingleInput!, pizzaOrTurtle: AccountPizzaOrTurtle!): Boolean
}

enum AccountPizzaOrTurtle {
  TURTLE
  PIZZA
}

type AccountQuery {
  getUser(where: AccountUserSingleInput!, fresh: Boolean): AccountUser
  searchUsers(where: AccountUserSearch!): [AccountUser]!
  roleUsers(roleId: String!): [AccountUser]!
  roles: [AccountRole]!
}

type AccountRole {
  id: ID!
  name: String!
  description: String
}

type AccountSubscriptionBadge {
  type: String
  user: AccountSubscriptionUser!
  badge: AccountUserBadge!
}

type AccountSubscriptionUser {
  id: ID!
  username: String
  name: String
  pronoun: String
  bio: String
  discordId: String
  picture(transform: AccountUserPictureTransformInput): String
  roles: [AccountRole]
  badges: [AccountUserBadge]
}

input AccountUpdateUserInput {
  username: String
  blocked: Boolean
  email: String
  givenName: String
  familyName: String
  displayNameFormat: String
  title: String
  bio: String
  phoneNumber: String
  pronoun: String
  acceptTos: Boolean
}

type AccountUser {
  id: ID!
  blocked: Boolean
  email: String
  username: String
  picture(transform: AccountUserPictureTransformInput): String
  givenName: String
  familyName: String
  name: String
  title: String
  bio: String
  discordId: String
  acceptTos: Boolean
  displayNameFormat: String
  phoneNumber: String
  pronoun: String
  roles: [AccountRole]
  badges(displayed: Boolean): [AccountUserBadge]
  discordInformation: AccountDiscordInformation
  sites: [CmsSite]
}

type AccountUserBadge {
  id: ID!
  displayed: Boolean
  order: Int
  expiresUtc: String
  details: CmsBadge
}

input AccountUserBadgeInput {
  id: ID!
  displayed: Boolean
  order: Int
  expiresUtc: String
}

enum AccountUserPictureFit {
  CLAMP
  CLIP
  CROP
  FACEAREA
  FILL
  FILLMAX
  MAX
  MIN
  SCALE
}

input AccountUserPictureTransformInput {
  width: Int
  height: Int
  fit: AccountUserPictureFit
}

input AccountUserSearch {
  givenName: String
  familyName: String
  name: String
  username: String
}

input AccountUserSingleInput {
  id: ID
  username: String
  email: String
  discordId: String
}

"""
Avatars are profile images for users. WordPress by default uses the Gravatar service to host and fetch avatars from.
"""
type BlogAvatar {
  """
  URL for the default image or a default type. Accepts &#039;404&#039; (return a 404 instead of a default image), &#039;retro&#039; (8bit), &#039;monsterid&#039; (monster), &#039;wavatar&#039; (cartoon face), &#039;indenticon&#039; (the &#039;quilt&#039;), &#039;mystery&#039;, &#039;mm&#039;, or &#039;mysteryman&#039; (The Oyster Man), &#039;blank&#039; (transparent GIF), or &#039;gravatar_default&#039; (the Gravatar logo).
  """
  default: String @deprecated(reason: "")

  """HTML attributes to insert in the IMG element. Is not sanitized."""
  extraAttr: String @deprecated(reason: "")

  """Whether to always show the default image, never the Gravatar."""
  forceDefault: Boolean @deprecated(reason: "")

  """Whether the avatar was successfully found."""
  foundAvatar: Boolean @deprecated(reason: "")

  """Height of the avatar image."""
  height: Int @deprecated(reason: "")

  """Whether the object is restricted from the current viewer"""
  isRestricted: Boolean @deprecated(reason: "")

  """
  What rating to display avatars up to. Accepts &#039;G&#039;, &#039;PG&#039;, &#039;R&#039;, &#039;X&#039;, and are judged in that order.
  """
  rating: String @deprecated(reason: "")

  """Type of url scheme to use. Typically HTTP vs. HTTPS."""
  scheme: String @deprecated(reason: "")

  """
  The size of the avatar in pixels. A value of 96 will match a 96px x 96px gravatar image.
  """
  size: Int @deprecated(reason: "")

  """URL for the gravatar image source."""
  url: String @deprecated(reason: "")

  """Width of the avatar image."""
  width: Int @deprecated(reason: "")
}

"""
What rating to display avatars up to. Accepts 'G', 'PG', 'R', 'X', and are judged in that order. Default is the value of the 'avatar_rating' option
"""
enum BlogAvatarRatingEnum {
  G
  PG
  R
  X
}

"""The category type"""
type BlogCategory implements BlogNode & BlogTermNode & BlogUniformResourceIdentifiable {
  """The ancestors of the object"""
  ancestors: [BlogCategory] @deprecated(reason: "")

  """The id field matches the WP_Post-&gt;ID field."""
  categoryId: Int @deprecated(reason: "Deprecated in favor of databaseId")

  """Connection between the category type and the category type"""
  children(
    """The number of items to return after the referenced "after" cursor"""
    first: Int
    last: Int

    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String

    """Arguments for filtering the connection"""
    where: BlogCategoryToCategoryConnectionWhereArgs
  ): BlogCategoryToCategoryConnection @deprecated(reason: "")

  """The number of objects connected to the object"""
  count: Int @deprecated(reason: "")

  """Identifies the primary key from the database."""
  databaseId: Int! @deprecated(reason: "")

  """The description of the object"""
  description: String @deprecated(reason: "")

  """
  Added to the GraphQL Schema because the ACF Field Group &quot;Display&quot; was assigned to the &quot;category&quot; taxonomy
  """
  display: BlogCategory_Display @deprecated(reason: "")

  """The globally unique ID for the object"""
  id: ID! @deprecated(reason: "")

  """Whether the object is restricted from the current viewer"""
  isRestricted: Boolean @deprecated(reason: "")

  """The link to the term"""
  link: String @deprecated(reason: "")

  """The human friendly name of the object."""
  name: String @deprecated(reason: "")

  """The parent object"""
  parent: BlogCategory @deprecated(reason: "")

  """Connection between the category type and the post type"""
  posts(
    """The number of items to return after the referenced "after" cursor"""
    first: Int
    last: Int

    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String

    """Arguments for filtering the connection"""
    where: BlogCategoryToPostConnectionWhereArgs
  ): BlogCategoryToPostConnection @deprecated(reason: "")

  """An alphanumeric identifier for the object unique to its type."""
  slug: String @deprecated(reason: "")

  """Connection between the category type and the Taxonomy type"""
  taxonomy: BlogCategoryToTaxonomyConnection @deprecated(reason: "")

  """The ID of the term group that this term object belongs to"""
  termGroupId: Int @deprecated(reason: "")

  """The taxonomy ID that the object is associated with"""
  termTaxonomyId: Int @deprecated(reason: "")

  """The unique resource identifier path"""
  uri: String! @deprecated(reason: "")
}

"""The Type of Identifier used to fetch a single resource. Default is ID."""
enum BlogCategoryIdType {
  """The Database ID for the node"""
  DATABASE_ID

  """The hashed Global ID"""
  ID

  """The name of the node"""
  NAME

  """Url friendly name of the node"""
  SLUG

  """The URI for the node"""
  URI
}

"""Connection between the category type and the category type"""
type BlogCategoryToCategoryConnection {
  """Edges for the CategoryToCategoryConnection connection"""
  edges: [BlogCategoryToCategoryConnectionEdge] @deprecated(reason: "")

  """The nodes of the connection, without the edges"""
  nodes: [BlogCategory] @deprecated(reason: "")

  """Information about pagination in a connection."""
  pageInfo: BlogWPPageInfo @deprecated(reason: "")
}

"""An edge in a connection"""
type BlogCategoryToCategoryConnectionEdge {
  """A cursor for use in pagination"""
  cursor: String @deprecated(reason: "")

  """The item at the end of the edge"""
  node: BlogCategory @deprecated(reason: "")
}

"""Arguments for filtering the CategoryToCategoryConnection connection"""
input BlogCategoryToCategoryConnectionWhereArgs {
  """
  Unique cache key to be produced when this query is stored in an object cache. Default is 'core'.
  """
  cacheDomain: String

  """
  Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0.
  """
  childOf: Int

  """
  True to limit results to terms that have no children. This parameter has no effect on non-hierarchical taxonomies. Default false.
  """
  childless: Boolean

  """
  Retrieve terms where the description is LIKE the input value. Default empty.
  """
  descriptionLike: String

  """
  Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array.
  """
  exclude: [ID]

  """
  Array of term ids to exclude along with all of their descendant terms. If $include is non-empty, $exclude_tree is ignored. Default empty array.
  """
  excludeTree: [ID]

  """
  Whether to hide terms not assigned to any posts. Accepts true or false. Default false
  """
  hideEmpty: Boolean

  """
  Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true.
  """
  hierarchical: Boolean

  """Array of term ids to include. Default empty array."""
  include: [ID]

  """Array of names to return term(s) for. Default empty."""
  name: [String]

  """Retrieve terms where the name is LIKE the input value. Default empty."""
  nameLike: String

  """
  Array of object IDs. Results will be limited to terms associated with these objects.
  """
  objectIds: [ID]

  """Field(s) to order terms by. Defaults to 'name'."""
  orderby: BlogTermObjectsConnectionOrderbyEnum

  """
  Whether to pad the quantity of a term's children in the quantity of each term's "count" object variable. Default false.
  """
  padCounts: Boolean

  """Parent term ID to retrieve direct-child terms of. Default empty."""
  parent: Int

  """
  Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty.
  """
  search: String

  """
  Default false. If true, only the items connected to the source item will be returned. If false, all items will be returned regardless of connection to the source
  """
  shouldOnlyIncludeConnectedItems: Boolean

  """
  Default false. If true, the connection will be output in a flat list instead of the hierarchical list. So child terms will be output in the same level as the parent terms
  """
  shouldOutputInFlatList: Boolean

  """Array of slugs to return term(s) for. Default empty."""
  slug: [String]

  """Array of term taxonomy IDs, to match when querying terms."""
  termTaxonomId: [ID]

  """Whether to prime meta caches for matched terms. Default true."""
  updateTermMetaCache: Boolean
}

"""Connection between the category type and the post type"""
type BlogCategoryToPostConnection {
  """Edges for the CategoryToPostConnection connection"""
  edges: [BlogCategoryToPostConnectionEdge] @deprecated(reason: "")

  """The nodes of the connection, without the edges"""
  nodes: [BlogPost] @deprecated(reason: "")

  """Information about pagination in a connection."""
  pageInfo: BlogWPPageInfo @deprecated(reason: "")
}

"""An edge in a connection"""
type BlogCategoryToPostConnectionEdge {
  """A cursor for use in pagination"""
  cursor: String @deprecated(reason: "")

  """The item at the end of the edge"""
  node: BlogPost @deprecated(reason: "")
}

"""Arguments for filtering the CategoryToPostConnection connection"""
input BlogCategoryToPostConnectionWhereArgs {
  """
  The user that's connected as the author of the object. Use the userId for the author object.
  """
  author: Int

  """Find objects connected to author(s) in the array of author's userIds"""
  authorIn: [ID]

  """Find objects connected to the author by the author's nicename"""
  authorName: String

  """
  Find objects NOT connected to author(s) in the array of author's userIds
  """
  authorNotIn: [ID]

  """Category ID"""
  categoryId: Int

  """
  Array of category IDs, used to display objects from one category OR another
  """
  categoryIn: [ID]

  """Use Category Slug"""
  categoryName: String

  """
  Array of category IDs, used to display objects from one category OR another
  """
  categoryNotIn: [ID]

  """Filter the connection based on dates"""
  dateQuery: BlogDateQueryInput

  """
  True for objects with passwords; False for objects without passwords; null for all objects with or without passwords
  """
  hasPassword: Boolean

  """Specific ID of the object"""
  id: Int

  """Array of IDs for the objects to retrieve"""
  in: [ID]

  """Get objects with a specific mimeType property"""
  mimeType: BlogMimeTypeEnum

  """Slug / post_name of the object"""
  name: String

  """Specify objects to retrieve. Use slugs"""
  nameIn: [String]

  """
  Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored
  """
  notIn: [ID]

  """What paramater to use to order the objects by."""
  orderby: [BlogPostObjectsConnectionOrderbyInput]

  """Use ID to return only children. Use 0 to return only top-level items"""
  parent: String

  """Specify objects whose parent is in an array"""
  parentIn: [ID]

  """Specify posts whose parent is not in an array"""
  parentNotIn: [ID]

  """Show posts with a specific password."""
  password: String

  """Show Posts based on a keyword search"""
  search: String

  """Tag Slug"""
  tag: String

  """Use Tag ID"""
  tagId: String

  """Array of tag IDs, used to display objects from one tag OR another"""
  tagIn: [ID]

  """Array of tag IDs, used to display objects from one tag OR another"""
  tagNotIn: [ID]

  """Array of tag slugs, used to display objects from one tag OR another"""
  tagSlugAnd: [String]

  """Array of tag slugs, used to exclude objects in specified tags"""
  tagSlugIn: [String]

  """Title of the object"""
  title: String
}

"""Connection between the category type and the Taxonomy type"""
type BlogCategoryToTaxonomyConnection {
  """The nodes of the connection, without the edges"""
  node: BlogTaxonomy @deprecated(reason: "")
}

"""Field Group"""
type BlogCategory_Display {
  color: String @deprecated(reason: "")
  fieldGroupName: String @deprecated(reason: "")
}

"""A Comment object"""
type BlogComment implements BlogNode {
  """
  User agent used to post the comment. This field is equivalent to WP_Comment-&gt;comment_agent and the value matching the &quot;comment_agent&quot; column in SQL.
  """
  agent: String @deprecated(reason: "")

  """
  The approval status of the comment. This field is equivalent to WP_Comment-&gt;comment_approved and the value matching the &quot;comment_approved&quot; column in SQL.
  """
  approved: Boolean @deprecated(reason: "")

  """The author of the comment"""
  author: BlogCommentAuthorUnion @deprecated(reason: "")

  """
  IP address for the author. This field is equivalent to WP_Comment-&gt;comment_author_IP and the value matching the &quot;comment_author_IP&quot; column in SQL.
  """
  authorIp: String @deprecated(reason: "")

  """Connection between the Comment type and the Comment type"""
  children(
    """The number of items to return after the referenced "after" cursor"""
    first: Int
    last: Int

    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String

    """Arguments for filtering the connection"""
    where: BlogCommentToCommentConnectionWhereArgs
  ): BlogCommentToCommentConnection @deprecated(reason: "")

  """ID for the comment, unique among comments."""
  commentId: Int @deprecated(reason: "")

  """The object the comment was added to"""
  commentedOn: BlogPostObjectUnion @deprecated(reason: "")

  """
  Content of the comment. This field is equivalent to WP_Comment-&gt;comment_content and the value matching the &quot;comment_content&quot; column in SQL.
  """
  content(
    """Format of the field output"""
    format: BlogPostObjectFieldFormatEnum
  ): String @deprecated(reason: "")

  """
  Date the comment was posted in local time. This field is equivalent to WP_Comment-&gt;date and the value matching the &quot;date&quot; column in SQL.
  """
  date: String @deprecated(reason: "")

  """
  Date the comment was posted in GMT. This field is equivalent to WP_Comment-&gt;date_gmt and the value matching the &quot;date_gmt&quot; column in SQL.
  """
  dateGmt: String @deprecated(reason: "")

  """The globally unique identifier for the comment object"""
  id: ID! @deprecated(reason: "")

  """Whether the object is restricted from the current viewer"""
  isRestricted: Boolean @deprecated(reason: "")

  """
  Karma value for the comment. This field is equivalent to WP_Comment-&gt;comment_karma and the value matching the &quot;comment_karma&quot; column in SQL.
  """
  karma: Int @deprecated(reason: "")

  """
  Parent comment of current comment. This field is equivalent to the WP_Comment instance matching the WP_Comment-&gt;comment_parent ID.
  """
  parent: BlogComment @deprecated(reason: "")

  """
  Type of comment. This field is equivalent to WP_Comment-&gt;comment_type and the value matching the &quot;comment_type&quot; column in SQL.
  """
  type: String @deprecated(reason: "")
}

"""A Comment Author object"""
type BlogCommentAuthor implements BlogNode {
  """The email for the comment author"""
  email: String @deprecated(reason: "")

  """The globally unique identifier for the comment author object"""
  id: ID! @deprecated(reason: "")

  """Whether the object is restricted from the current viewer"""
  isRestricted: Boolean @deprecated(reason: "")

  """The name for the comment author."""
  name: String @deprecated(reason: "")

  """The url the comment author."""
  url: String @deprecated(reason: "")
}

union BlogCommentAuthorUnion = BlogUser | BlogCommentAuthor

"""Connection between the Comment type and the Comment type"""
type BlogCommentToCommentConnection {
  """Edges for the CommentToCommentConnection connection"""
  edges: [BlogCommentToCommentConnectionEdge] @deprecated(reason: "")

  """The nodes of the connection, without the edges"""
  nodes: [BlogComment] @deprecated(reason: "")

  """Information about pagination in a connection."""
  pageInfo: BlogWPPageInfo @deprecated(reason: "")
}

"""An edge in a connection"""
type BlogCommentToCommentConnectionEdge {
  """A cursor for use in pagination"""
  cursor: String @deprecated(reason: "")

  """The item at the end of the edge"""
  node: BlogComment @deprecated(reason: "")
}

"""Arguments for filtering the CommentToCommentConnection connection"""
input BlogCommentToCommentConnectionWhereArgs {
  """Comment author email address."""
  authorEmail: String

  """Array of author IDs to include comments for."""
  authorIn: [ID]

  """Array of author IDs to exclude comments for."""
  authorNotIn: [ID]

  """Comment author URL."""
  authorUrl: String

  """Array of comment IDs to include."""
  commentIn: [ID]

  """
  Array of IDs of users whose unapproved comments will be returned by the
  							query regardless of status.
  """
  commentNotIn: [ID]

  """Include comments of a given type."""
  commentType: String

  """Include comments from a given array of comment types."""
  commentTypeIn: [String]

  """Exclude comments from a given array of comment types."""
  commentTypeNotIn: String

  """Content object author ID to limit results by."""
  contentAuthor: [ID]

  """Array of author IDs to retrieve comments for."""
  contentAuthorIn: [ID]

  """Array of author IDs *not* to retrieve comments for."""
  contentAuthorNotIn: [ID]

  """
  Limit results to those affiliated with a given content object
  							ID.
  """
  contentId: ID

  """
  Array of content object IDs to include affiliated comments
  							for.
  """
  contentIdIn: [ID]

  """
  Array of content object IDs to exclude affiliated comments
  							for.
  """
  contentIdNotIn: [ID]

  """Content object name to retrieve affiliated comments for."""
  contentName: String

  """Content Object parent ID to retrieve affiliated comments for."""
  contentParent: Int

  """
  Content object type or array of types to retrieve affiliated comments for. Pass 'any' to match any value.
  """
  contentType: [BlogContentTypeEnum]

  """
  Array of IDs or email addresses of users whose unapproved comments will be returned by the query regardless of $status. Default empty
  """
  includeUnapproved: [ID]

  """Karma score to retrieve matching comments for."""
  karma: Int

  """The cardinality of the order of the connection"""
  order: BlogOrderEnum

  """Field to order the comments by."""
  orderby: BlogCommentsConnectionOrderbyEnum

  """Parent ID of comment to retrieve children of."""
  parent: Int

  """Array of parent IDs of comments to retrieve children for."""
  parentIn: [ID]

  """
  Array of parent IDs of comments *not* to retrieve children
  							for.
  """
  parentNotIn: [ID]

  """Search term(s) to retrieve matching comments for."""
  search: String

  """Comment status to limit results by."""
  status: String

  """Include comments for a specific user ID."""
  userId: ID
}

"""Options for ordering the connection"""
enum BlogCommentsConnectionOrderbyEnum {
  COMMENT_AGENT
  COMMENT_APPROVED
  COMMENT_AUTHOR
  COMMENT_AUTHOR_EMAIL
  COMMENT_AUTHOR_IP
  COMMENT_AUTHOR_URL
  COMMENT_CONTENT
  COMMENT_DATE
  COMMENT_DATE_GMT
  COMMENT_ID
  COMMENT_IN
  COMMENT_KARMA
  COMMENT_PARENT
  COMMENT_POST_ID
  COMMENT_TYPE
  USER_ID
}

"""Nodes used to manage content"""
interface BlogContentNode {
  """The ID of the object in the database."""
  databaseId: Int!

  """Post publishing date."""
  date: String

  """The publishing date set in GMT."""
  dateGmt: String

  """The desired slug of the post"""
  desiredSlug: String

  """The user that most recently edited the object"""
  editLast: BlogUser

  """
  If a user has edited the object within the past 15 seconds, this will return the user and the time they last edited. Null if the edit lock doesn't exist or is greater than 15 seconds
  """
  editLock: BlogEditLock

  """The RSS enclosure for the object"""
  enclosure: String

  """
  The global unique identifier for this post. This currently matches the value stored in WP_Post->guid and the guid column in the "post_objects" database table.
  """
  guid: String

  """The globally unique identifier of the node."""
  id: ID!

  """Whether the object is restricted from the current viewer"""
  isRestricted: Boolean

  """The permalink of the post"""
  link: String

  """
  The local modified time for a post. If a post was recently updated the modified field will change to match the corresponding time.
  """
  modified: String

  """
  The GMT modified time for a post. If a post was recently updated the modified field will change to match the corresponding time in GMT.
  """
  modifiedGmt: String

  """
  The uri slug for the post. This is equivalent to the WP_Post->post_name field and the post_name column in the database for the "post_objects" table.
  """
  slug: String

  """The current status of the object"""
  status: String

  """URI path for the resource"""
  uri: String!
}

"""The Type of Identifier used to fetch a single resource. Default is ID."""
enum BlogContentNodeIdTypeEnum {
  """Identify a resource by the Database ID."""
  DATABASE_ID

  """Identify a resource by the (hashed) Global ID."""
  ID

  """Identify a resource by the URI."""
  URI
}

union BlogContentRevisionUnion = BlogPost | BlogPage

"""An Post Type object"""
type BlogContentType implements BlogNode {
  """Whether this content type should can be exported."""
  canExport: Boolean @deprecated(reason: "")

  """List of Taxonomies connected to the Post Type"""
  connectedTaxonomies(
    """Select which taxonomies to limit the results to"""
    taxonomies: [BlogTaxonomyEnum]
  ): [BlogTaxonomy] @deprecated(reason: "")

  """A list of Taxonomies associated with the post type"""
  connectedTaxonomyNames(
    """Select which taxonomies to limit the results to"""
    taxonomies: [BlogTaxonomyEnum]
  ): [String] @deprecated(reason: "")

  """
  Whether delete this type of content when the author of it is deleted from the system.
  """
  deleteWithUser: Boolean @deprecated(reason: "")

  """Description of the content type."""
  description: String @deprecated(reason: "")

  """
  Whether to exclude posts with this post type from front end search results.
  """
  excludeFromSearch: Boolean @deprecated(reason: "")

  """The plural name of the post type within the GraphQL Schema."""
  graphqlPluralName: String @deprecated(reason: "")

  """The singular name of the post type within the GraphQL Schema."""
  graphqlSingleName: String @deprecated(reason: "")

  """
  Whether this content type should have archives. Content archives are generated by type and by date.
  """
  hasArchive: Boolean @deprecated(reason: "")

  """Whether the post type is hierarchical, for example pages."""
  hierarchical: Boolean @deprecated(reason: "")

  """The globally unique identifier of the post-type object."""
  id: ID! @deprecated(reason: "")

  """Whether the object is restricted from the current viewer"""
  isRestricted: Boolean @deprecated(reason: "")

  """Display name of the content type."""
  label: String @deprecated(reason: "")

  """Details about the post type labels."""
  labels: BlogPostTypeLabelDetails @deprecated(reason: "")

  """The name of the icon file to display as a menu icon."""
  menuIcon: String @deprecated(reason: "")

  """
  The position of this post type in the menu. Only applies if show_in_menu is true.
  """
  menuPosition: Int @deprecated(reason: "")

  """
  The internal name of the post type. This should not be used for display purposes.
  """
  name: String @deprecated(reason: "")

  """
  Whether a post type is intended for use publicly either via the admin interface or by front-end users. While the default settings of exclude_from_search, publicly_queryable, show_ui, and show_in_nav_menus are inherited from public, each does not rely on this relationship and controls a very specific intention.
  """
  public: Boolean @deprecated(reason: "")

  """
  Whether queries can be performed on the front end for the post type as part of parse_request().
  """
  publiclyQueryable: Boolean @deprecated(reason: "")

  """
  Name of content type to diplay in REST API &quot;wp/v2&quot; namespace.
  """
  restBase: String @deprecated(reason: "")

  """The REST Controller class assigned to handling this content type."""
  restControllerClass: String @deprecated(reason: "")

  """Makes this post type available via the admin bar."""
  showInAdminBar: Boolean @deprecated(reason: "")

  """Whether to add the post type to the GraphQL Schema."""
  showInGraphql: Boolean @deprecated(reason: "")

  """
  Where to show the post type in the admin menu. To work, $show_ui must be true. If true, the post type is shown in its own top level menu. If false, no menu is shown. If a string of an existing top level menu (eg. &quot;tools.php&quot; or &quot;edit.php?post_type=page&quot;), the post type will be placed as a sub-menu of that.
  """
  showInMenu: Boolean @deprecated(reason: "")

  """Makes this post type available for selection in navigation menus."""
  showInNavMenus: Boolean @deprecated(reason: "")

  """
  Whether to add the post type route in the REST API &quot;wp/v2&quot; namespace.
  """
  showInRest: Boolean @deprecated(reason: "")

  """
  Whether to generate and allow a UI for managing this post type in the admin.
  """
  showUi: Boolean @deprecated(reason: "")
}

"""Allowed Content Types"""
enum BlogContentTypeEnum {
  """The Type of Content object"""
  ATTACHMENT

  """The Type of Content object"""
  PAGE

  """The Type of Content object"""
  POST
}

"""
The Type of Identifier used to fetch a single Content Type node. To be used along with the "id" field. Default is "ID".
"""
enum BlogContentTypeIdTypeEnum {
  """The globally unique ID"""
  ID

  """The name of the content type."""
  NAME
}

"""Input for the createCategory mutation"""
input BlogCreateCategoryInput {
  """The slug that the category will be an alias of"""
  aliasOf: String
  clientMutationId: String!

  """The description of the category object"""
  description: String

  """The name of the category object to mutate"""
  name: String!

  """The ID of the category that should be set as the parent"""
  parentId: ID

  """
  If this argument exists then the slug will be checked to see if it is not an existing valid term. If that check succeeds (it is not a valid term), then it is added and the term id is given. If it fails, then a check is made to whether the taxonomy is hierarchical and the parent argument is not empty. If the second check succeeds, the term will be inserted and the term id will be given. If the slug argument is empty, then it will be calculated from the term name.
  """
  slug: String
}

"""The payload for the createCategory mutation"""
type BlogCreateCategoryPayload {
  """The created category"""
  category: BlogCategory @deprecated(reason: "")
  clientMutationId: String! @deprecated(reason: "")
}

"""Input for the createComment mutation"""
input BlogCreateCommentInput {
  """User agent used to post the comment."""
  agent: String

  """The approval status of the comment."""
  approved: String

  """The name of the comment's author."""
  author: String

  """The email of the comment's author."""
  authorEmail: String

  """IP address for the comment's author."""
  authorIp: String

  """The url of the comment's author."""
  authorUrl: String
  clientMutationId: String!

  """The ID of the post object the comment belongs to."""
  commentOn: Int

  """Content of the comment."""
  content: String

  """
  The date of the object. Preferable to enter as year/month/day ( e.g. 01/31/2017 ) as it will rearrange date as fit if it is not specified. Incomplete dates may have unintended results for example, "2017" as the input will use current date with timestamp 20:17 
  """
  date: String

  """Parent comment of current comment."""
  parent: ID

  """Type of comment."""
  type: String

  """The userID of the comment's author."""
  userId: Int
}

"""The payload for the createComment mutation"""
type BlogCreateCommentPayload {
  clientMutationId: String! @deprecated(reason: "")

  """The comment that was created"""
  comment: BlogComment @deprecated(reason: "")

  """
  Whether the mutation succeeded. If the comment is not approved, the server will not return the comment to a non authenticated user, but a success message can be returned if the create succeeded, and the client can optimistically add the comment to the client cache
  """
  success: Boolean @deprecated(reason: "")
}

"""Input for the createMediaItem mutation"""
input BlogCreateMediaItemInput {
  """Alternative text to display when mediaItem is not displayed"""
  altText: String

  """The userId to assign as the author of the mediaItem"""
  authorId: ID

  """The caption for the mediaItem"""
  caption: String
  clientMutationId: String!

  """The comment status for the mediaItem"""
  commentStatus: String

  """The date of the mediaItem"""
  date: String

  """The date (in GMT zone) of the mediaItem"""
  dateGmt: String

  """Description of the mediaItem"""
  description: String

  """The file name of the mediaItem"""
  filePath: String

  """The file type of the mediaItem"""
  fileType: BlogMimeTypeEnum

  """The WordPress post ID or the graphQL postId of the parent object"""
  parentId: ID

  """The ping status for the mediaItem"""
  pingStatus: String

  """The slug of the mediaItem"""
  slug: String

  """The status of the mediaItem"""
  status: BlogMediaItemStatusEnum

  """The title of the mediaItem"""
  title: String
}

"""The payload for the createMediaItem mutation"""
type BlogCreateMediaItemPayload {
  clientMutationId: String! @deprecated(reason: "")
  mediaItem: BlogMediaItem @deprecated(reason: "")
}

"""Input for the createPage mutation"""
input BlogCreatePageInput {
  """The userId to assign as the author of the object"""
  authorId: ID
  clientMutationId: String!

  """The comment status for the object"""
  commentStatus: String

  """The content of the object"""
  content: String

  """
  The date of the object. Preferable to enter as year/month/day (e.g. 01/31/2017) as it will rearrange date as fit if it is not specified. Incomplete dates may have unintended results for example, "2017" as the input will use current date with timestamp 20:17 
  """
  date: String

  """
  A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types.
  """
  menuOrder: Int

  """The ID of the parent object"""
  parentId: ID

  """The password used to protect the content of the object"""
  password: String

  """The slug of the object"""
  slug: String

  """The title of the object"""
  title: String
}

"""The payload for the createPage mutation"""
type BlogCreatePagePayload {
  clientMutationId: String! @deprecated(reason: "")
  page: BlogPage @deprecated(reason: "")
}

"""Input for the createPostFormat mutation"""
input BlogCreatePostFormatInput {
  """The slug that the post_format will be an alias of"""
  aliasOf: String
  clientMutationId: String!

  """The description of the post_format object"""
  description: String

  """The name of the post_format object to mutate"""
  name: String!

  """
  If this argument exists then the slug will be checked to see if it is not an existing valid term. If that check succeeds (it is not a valid term), then it is added and the term id is given. If it fails, then a check is made to whether the taxonomy is hierarchical and the parent argument is not empty. If the second check succeeds, the term will be inserted and the term id will be given. If the slug argument is empty, then it will be calculated from the term name.
  """
  slug: String
}

"""The payload for the createPostFormat mutation"""
type BlogCreatePostFormatPayload {
  clientMutationId: String! @deprecated(reason: "")

  """The created post_format"""
  postFormat: BlogPostFormat @deprecated(reason: "")
}

"""Input for the createPost mutation"""
input BlogCreatePostInput {
  """The userId to assign as the author of the object"""
  authorId: ID

  """Set connections between the post and categories"""
  categories: BlogPostCategoriesInput
  clientMutationId: String!

  """The comment status for the object"""
  commentStatus: String

  """The content of the object"""
  content: String

  """
  The date of the object. Preferable to enter as year/month/day (e.g. 01/31/2017) as it will rearrange date as fit if it is not specified. Incomplete dates may have unintended results for example, "2017" as the input will use current date with timestamp 20:17 
  """
  date: String

  """The excerpt of the object"""
  excerpt: String

  """
  A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types.
  """
  menuOrder: Int

  """The password used to protect the content of the object"""
  password: String

  """The ping status for the object"""
  pingStatus: String

  """URLs that have been pinged."""
  pinged: [String]

  """Set connections between the post and postFormats"""
  postFormats: BlogPostPostFormatsInput

  """The slug of the object"""
  slug: String

  """Set connections between the post and tags"""
  tags: BlogPostTagsInput

  """The title of the object"""
  title: String

  """URLs queued to be pinged."""
  toPing: [String]
}

"""The payload for the createPost mutation"""
type BlogCreatePostPayload {
  clientMutationId: String! @deprecated(reason: "")
  post: BlogPost @deprecated(reason: "")
}

"""Input for the createTag mutation"""
input BlogCreateTagInput {
  """The slug that the post_tag will be an alias of"""
  aliasOf: String
  clientMutationId: String!

  """The description of the post_tag object"""
  description: String

  """The name of the post_tag object to mutate"""
  name: String!

  """
  If this argument exists then the slug will be checked to see if it is not an existing valid term. If that check succeeds (it is not a valid term), then it is added and the term id is given. If it fails, then a check is made to whether the taxonomy is hierarchical and the parent argument is not empty. If the second check succeeds, the term will be inserted and the term id will be given. If the slug argument is empty, then it will be calculated from the term name.
  """
  slug: String
}

"""The payload for the createTag mutation"""
type BlogCreateTagPayload {
  clientMutationId: String! @deprecated(reason: "")

  """The created post_tag"""
  tag: BlogTag @deprecated(reason: "")
}

"""Input for the createUser mutation"""
input BlogCreateUserInput {
  """User's AOL IM account."""
  aim: String
  clientMutationId: String!

  """A string containing content about the user."""
  description: String

  """
  A string that will be shown on the site. Defaults to user's username. It is likely that you will want to change this, for both appearance and security through obscurity (that is if you dont use and delete the default admin user).
  """
  displayName: String

  """A string containing the user's email address."""
  email: String

  """	The user's first name."""
  firstName: String

  """User's Jabber account."""
  jabber: String

  """The user's last name."""
  lastName: String

  """User's locale."""
  locale: String

  """
  A string that contains a URL-friendly name for the user. The default is the user's username.
  """
  nicename: String

  """The user's nickname, defaults to the user's username."""
  nickname: String

  """A string that contains the plain text password for the user."""
  password: String

  """The date the user registered. Format is Y-m-d H:i:s."""
  registered: String

  """
  A string for whether to enable the rich editor or not. False if not empty.
  """
  richEditing: String

  """An array of roles to be assigned to the user."""
  roles: [String]

  """A string that contains the user's username for logging in."""
  username: String!

  """A string containing the user's URL for the user's web site."""
  websiteUrl: String

  """User's Yahoo IM account."""
  yim: String
}

"""The payload for the createUser mutation"""
type BlogCreateUserPayload {
  clientMutationId: String! @deprecated(reason: "")
  user: BlogUser @deprecated(reason: "")
}

"""Date values"""
input BlogDateInput {
  """Day of the month (from 1 to 31)"""
  day: Int

  """Month number (from 1 to 12)"""
  month: Int

  """4 digit year (e.g. 2017)"""
  year: Int
}

"""Filter the connection based on input"""
input BlogDateQueryInput {
  """Nodes should be returned after this date"""
  after: BlogDateInput

  """Nodes should be returned before this date"""
  before: BlogDateInput

  """Column to query against"""
  column: BlogPostObjectsConnectionDateColumnEnum

  """For after/before, whether exact value should be matched or not"""
  compare: String

  """Day of the month (from 1 to 31)"""
  day: Int

  """Hour (from 0 to 23)"""
  hour: Int

  """For after/before, whether exact value should be matched or not"""
  inclusive: Boolean

  """Minute (from 0 to 59)"""
  minute: Int

  """Month number (from 1 to 12)"""
  month: Int

  """OR or AND, how the sub-arrays should be compared"""
  relation: BlogRelationEnum

  """Second (0 to 59)"""
  second: Int

  """Week of the year (from 0 to 53)"""
  week: Int

  """4 digit year (e.g. 2017)"""
  year: Int
}

"""Input for the deleteCategory mutation"""
input BlogDeleteCategoryInput {
  clientMutationId: String!

  """The ID of the category to delete"""
  id: ID!
}

"""The payload for the deleteCategory mutation"""
type BlogDeleteCategoryPayload {
  """The deteted term object"""
  category: BlogCategory @deprecated(reason: "")
  clientMutationId: String! @deprecated(reason: "")

  """The ID of the deleted object"""
  deletedId: ID @deprecated(reason: "")
}

"""Input for the deleteComment mutation"""
input BlogDeleteCommentInput {
  clientMutationId: String!

  """
  Whether the comment should be force deleted instead of being moved to the trash
  """
  forceDelete: Boolean

  """The deleted comment ID"""
  id: ID!
}

"""The payload for the deleteComment mutation"""
type BlogDeleteCommentPayload {
  clientMutationId: String! @deprecated(reason: "")

  """The deleted comment object"""
  comment: BlogComment @deprecated(reason: "")

  """The deleted comment ID"""
  deletedId: ID @deprecated(reason: "")
}

"""Input for the deleteMediaItem mutation"""
input BlogDeleteMediaItemInput {
  clientMutationId: String!

  """
  Whether the mediaItem should be force deleted instead of being moved to the trash
  """
  forceDelete: Boolean

  """The ID of the mediaItem to delete"""
  id: ID!
}

"""The payload for the deleteMediaItem mutation"""
type BlogDeleteMediaItemPayload {
  clientMutationId: String! @deprecated(reason: "")

  """The ID of the deleted mediaItem"""
  deletedId: ID @deprecated(reason: "")

  """The mediaItem before it was deleted"""
  mediaItem: BlogMediaItem @deprecated(reason: "")
}

"""Input for the deletePage mutation"""
input BlogDeletePageInput {
  clientMutationId: String!

  """
  Whether the object should be force deleted instead of being moved to the trash
  """
  forceDelete: Boolean

  """The ID of the page to delete"""
  id: ID!
}

"""The payload for the deletePage mutation"""
type BlogDeletePagePayload {
  clientMutationId: String! @deprecated(reason: "")

  """The ID of the deleted object"""
  deletedId: ID @deprecated(reason: "")

  """The object before it was deleted"""
  page: BlogPage @deprecated(reason: "")
}

"""Input for the deletePostFormat mutation"""
input BlogDeletePostFormatInput {
  clientMutationId: String!

  """The ID of the postFormat to delete"""
  id: ID!
}

"""The payload for the deletePostFormat mutation"""
type BlogDeletePostFormatPayload {
  clientMutationId: String! @deprecated(reason: "")

  """The ID of the deleted object"""
  deletedId: ID @deprecated(reason: "")

  """The deteted term object"""
  postFormat: BlogPostFormat @deprecated(reason: "")
}

"""Input for the deletePost mutation"""
input BlogDeletePostInput {
  clientMutationId: String!

  """
  Whether the object should be force deleted instead of being moved to the trash
  """
  forceDelete: Boolean

  """The ID of the post to delete"""
  id: ID!
}

"""The payload for the deletePost mutation"""
type BlogDeletePostPayload {
  clientMutationId: String! @deprecated(reason: "")

  """The ID of the deleted object"""
  deletedId: ID @deprecated(reason: "")

  """The object before it was deleted"""
  post: BlogPost @deprecated(reason: "")
}

"""Input for the deleteTag mutation"""
input BlogDeleteTagInput {
  clientMutationId: String!

  """The ID of the tag to delete"""
  id: ID!
}

"""The payload for the deleteTag mutation"""
type BlogDeleteTagPayload {
  clientMutationId: String! @deprecated(reason: "")

  """The ID of the deleted object"""
  deletedId: ID @deprecated(reason: "")

  """The deteted term object"""
  tag: BlogTag @deprecated(reason: "")
}

"""Input for the deleteUser mutation"""
input BlogDeleteUserInput {
  clientMutationId: String!

  """The ID of the user you want to delete"""
  id: ID!

  """Reassign posts and links to new User ID."""
  reassignId: ID
}

"""The payload for the deleteUser mutation"""
type BlogDeleteUserPayload {
  clientMutationId: String! @deprecated(reason: "")

  """The ID of the user that you just deleted"""
  deletedId: ID @deprecated(reason: "")

  """The deleted user object"""
  user: BlogUser @deprecated(reason: "")
}

"""The discussion setting type"""
type BlogDiscussionSettings {
  """Allow people to submit comments on new posts."""
  defaultCommentStatus: String @deprecated(reason: "")

  """
  Allow link notifications from other blogs (pingbacks and trackbacks) on new articles.
  """
  defaultPingStatus: String @deprecated(reason: "")
}

"""Info on whether the object is locked by another user editing it"""
type BlogEditLock {
  """The time when the object was last edited"""
  editTime: String @deprecated(reason: "")

  """The user that most recently edited the object"""
  user: BlogUser @deprecated(reason: "")
}

"""The general setting type"""
type BlogGeneralSettings {
  """A date format for all date strings."""
  dateFormat: String @deprecated(reason: "")

  """Site tagline."""
  description: String @deprecated(reason: "")

  """This address is used for admin purposes, like new user notification."""
  email: String @deprecated(reason: "")

  """WordPress locale code."""
  language: String @deprecated(reason: "")

  """A day number of the week that the week should start on."""
  startOfWeek: Int @deprecated(reason: "")

  """A time format for all time strings."""
  timeFormat: String @deprecated(reason: "")

  """A city in the same timezone as you."""
  timezone: String @deprecated(reason: "")

  """Site title."""
  title: String @deprecated(reason: "")

  """Site URL."""
  url: String @deprecated(reason: "")
}

"""Content node with hierarchical (parent/child) relationships"""
interface BlogHierarchicalContentNode {
  """The parent of the object. The parent object can be of various types"""
  parent: BlogPostObjectUnion
}

"""File details for a Media Item"""
type BlogMediaDetails {
  """The height of the mediaItem"""
  file: String @deprecated(reason: "")

  """The height of the mediaItem"""
  height: Int @deprecated(reason: "")
  meta: BlogMediaItemMeta @deprecated(reason: "")

  """The available sizes of the mediaItem"""
  sizes: [BlogMediaSize] @deprecated(reason: "")

  """The width of the mediaItem"""
  width: Int @deprecated(reason: "")
}

"""The mediaItem type"""
type BlogMediaItem implements BlogNode & BlogContentNode & BlogUniformResourceIdentifiable & BlogNodeWithTitle & BlogNodeWithAuthor & BlogNodeWithComments & BlogHierarchicalContentNode {
  """Alternative text to display when resource is not displayed"""
  altText: String @deprecated(reason: "")

  """
  The author field will return a queryable User type matching the post&#039;s author.
  """
  wpAuthor: BlogUser @deprecated(reason: "")

  """The caption for the resource"""
  caption(
    """Format of the field output"""
    format: BlogPostObjectFieldFormatEnum
  ): String @deprecated(reason: "")

  """
  The number of comments. Even though WPGraphQL denotes this field as an integer, in WordPress this field should be saved as a numeric string for compatibility.
  """
  commentCount: Int @deprecated(reason: "")

  """Whether the comments are open or closed for this particular post."""
  commentStatus: String @deprecated(reason: "")

  """Connection between the mediaItem type and the Comment type"""
  comments(
    """The number of items to return after the referenced "after" cursor"""
    first: Int
    last: Int

    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String

    """Arguments for filtering the connection"""
    where: BlogMediaItemToCommentConnectionWhereArgs
  ): BlogMediaItemToCommentConnection @deprecated(reason: "")

  """Connection between the mediaItem type and the ContentType type"""
  contentType: BlogMediaItemToContentTypeConnection @deprecated(reason: "")

  """The ID of the object in the database."""
  databaseId: Int! @deprecated(reason: "")

  """Post publishing date."""
  date: String @deprecated(reason: "")

  """The publishing date set in GMT."""
  dateGmt: String @deprecated(reason: "")

  """Description of the image (stored as post_content)"""
  description(
    """Format of the field output"""
    format: BlogPostObjectFieldFormatEnum
  ): String @deprecated(reason: "")

  """The desired slug of the post"""
  desiredSlug: String @deprecated(reason: "")

  """The user that most recently edited the object"""
  editLast: BlogUser @deprecated(reason: "")

  """
  If a user has edited the object within the past 15 seconds, this will return the user and the time they last edited. Null if the edit lock doesn&#039;t exist or is greater than 15 seconds
  """
  editLock: BlogEditLock @deprecated(reason: "")

  """The RSS enclosure for the object"""
  enclosure: String @deprecated(reason: "")

  """
  The global unique identifier for this post. This currently matches the value stored in WP_Post-&gt;guid and the guid column in the &quot;post_objects&quot; database table.
  """
  guid: String @deprecated(reason: "")

  """The globally unique identifier of the attachment object."""
  id: ID! @deprecated(reason: "")

  """Whether the object is restricted from the current viewer"""
  isRestricted: Boolean @deprecated(reason: "")

  """The permalink of the post"""
  link: String @deprecated(reason: "")

  """Details about the mediaItem"""
  mediaDetails: BlogMediaDetails @deprecated(reason: "")

  """The id field matches the WP_Post-&gt;ID field."""
  mediaItemId: Int! @deprecated(reason: "Deprecated in favor of the databaseId field")

  """Url of the mediaItem"""
  mediaItemUrl: String @deprecated(reason: "")

  """Type of resource"""
  mediaType: String @deprecated(reason: "")

  """The mime type of the mediaItem"""
  mimeType: String @deprecated(reason: "")

  """
  The local modified time for a post. If a post was recently updated the modified field will change to match the corresponding time.
  """
  modified: String @deprecated(reason: "")

  """
  The GMT modified time for a post. If a post was recently updated the modified field will change to match the corresponding time in GMT.
  """
  modifiedGmt: String @deprecated(reason: "")

  """The parent of the object. The parent object can be of various types"""
  parent: BlogPostObjectUnion @deprecated(reason: "")

  """The sizes attribute value for an image."""
  sizes(
    """Size of the MediaItem to calculate sizes with"""
    size: BlogMediaItemSizeEnum
  ): String @deprecated(reason: "")

  """
  The uri slug for the post. This is equivalent to the WP_Post-&gt;post_name field and the post_name column in the database for the &quot;post_objects&quot; table.
  """
  slug: String @deprecated(reason: "")

  """Url of the mediaItem"""
  sourceUrl(
    """Size of the MediaItem to return"""
    size: BlogMediaItemSizeEnum
  ): String @deprecated(reason: "")

  """
  The srcset attribute specifies the URL of the image to use in different situations. It is a comma separated string of urls and their widths.
  """
  srcSet(
    """Size of the MediaItem to calculate srcSet with"""
    size: BlogMediaItemSizeEnum
  ): String @deprecated(reason: "")

  """The current status of the object"""
  status: String @deprecated(reason: "")

  """
  The title of the post. This is currently just the raw title. An amendment to support rendered title needs to be made.
  """
  title(
    """Format of the field output"""
    format: BlogPostObjectFieldFormatEnum
  ): String @deprecated(reason: "")

  """URI path for the resource"""
  uri: String! @deprecated(reason: "")
}

"""The Type of Identifier used to fetch a single resource. Default is ID."""
enum BlogMediaItemIdType {
  """Identify a resource by the Database ID."""
  DATABASE_ID

  """Identify a resource by the (hashed) Global ID."""
  ID

  """Identify a resource by the URI."""
  URI

  """
  Identify a resource by the slug. Available to non-hierarchcial Types where the slug is a unique identifier.
  """
  SLUG

  """Identify a media item by its source url"""
  SOURCE_URL
}

"""Meta connected to a MediaItem"""
type BlogMediaItemMeta {
  aperture: Float @deprecated(reason: "")
  camera: String @deprecated(reason: "")
  caption: String @deprecated(reason: "")
  copyright: String @deprecated(reason: "")
  createdTimestamp: Int @deprecated(reason: "")
  credit: String @deprecated(reason: "")
  focalLength: Int @deprecated(reason: "")
  iso: Int @deprecated(reason: "")
  keywords: [String] @deprecated(reason: "")
  orientation: String @deprecated(reason: "")
  shutterSpeed: Float @deprecated(reason: "")
  title: String @deprecated(reason: "")
}

"""The size of the media item object."""
enum BlogMediaItemSizeEnum {
  """MediaItem with the large size"""
  LARGE

  """MediaItem with the medium size"""
  MEDIUM

  """MediaItem with the medium_large size"""
  MEDIUM_LARGE

  """MediaItem with the thumbnail size"""
  THUMBNAIL

  """MediaItem with the 1536x1536 size"""
  _1536X1536

  """MediaItem with the 2048x2048 size"""
  _2048X2048
}

"""The status of the media item object."""
enum BlogMediaItemStatusEnum {
  """Objects with the auto-draft status"""
  AUTO_DRAFT

  """Objects with the inherit status"""
  INHERIT

  """Objects with the private status"""
  PRIVATE

  """Objects with the trash status"""
  TRASH
}

"""Connection between the mediaItem type and the Comment type"""
type BlogMediaItemToCommentConnection {
  """Edges for the MediaItemToCommentConnection connection"""
  edges: [BlogMediaItemToCommentConnectionEdge] @deprecated(reason: "")

  """The nodes of the connection, without the edges"""
  nodes: [BlogComment] @deprecated(reason: "")

  """Information about pagination in a connection."""
  pageInfo: BlogWPPageInfo @deprecated(reason: "")
}

"""An edge in a connection"""
type BlogMediaItemToCommentConnectionEdge {
  """A cursor for use in pagination"""
  cursor: String @deprecated(reason: "")

  """The item at the end of the edge"""
  node: BlogComment @deprecated(reason: "")
}

"""Arguments for filtering the MediaItemToCommentConnection connection"""
input BlogMediaItemToCommentConnectionWhereArgs {
  """Comment author email address."""
  authorEmail: String

  """Array of author IDs to include comments for."""
  authorIn: [ID]

  """Array of author IDs to exclude comments for."""
  authorNotIn: [ID]

  """Comment author URL."""
  authorUrl: String

  """Array of comment IDs to include."""
  commentIn: [ID]

  """
  Array of IDs of users whose unapproved comments will be returned by the
  							query regardless of status.
  """
  commentNotIn: [ID]

  """Include comments of a given type."""
  commentType: String

  """Include comments from a given array of comment types."""
  commentTypeIn: [String]

  """Exclude comments from a given array of comment types."""
  commentTypeNotIn: String

  """Content object author ID to limit results by."""
  contentAuthor: [ID]

  """Array of author IDs to retrieve comments for."""
  contentAuthorIn: [ID]

  """Array of author IDs *not* to retrieve comments for."""
  contentAuthorNotIn: [ID]

  """
  Limit results to those affiliated with a given content object
  							ID.
  """
  contentId: ID

  """
  Array of content object IDs to include affiliated comments
  							for.
  """
  contentIdIn: [ID]

  """
  Array of content object IDs to exclude affiliated comments
  							for.
  """
  contentIdNotIn: [ID]

  """Content object name to retrieve affiliated comments for."""
  contentName: String

  """Content Object parent ID to retrieve affiliated comments for."""
  contentParent: Int

  """
  Content object type or array of types to retrieve affiliated comments for. Pass 'any' to match any value.
  """
  contentType: [BlogContentTypeEnum]

  """
  Array of IDs or email addresses of users whose unapproved comments will be returned by the query regardless of $status. Default empty
  """
  includeUnapproved: [ID]

  """Karma score to retrieve matching comments for."""
  karma: Int

  """The cardinality of the order of the connection"""
  order: BlogOrderEnum

  """Field to order the comments by."""
  orderby: BlogCommentsConnectionOrderbyEnum

  """Parent ID of comment to retrieve children of."""
  parent: Int

  """Array of parent IDs of comments to retrieve children for."""
  parentIn: [ID]

  """
  Array of parent IDs of comments *not* to retrieve children
  							for.
  """
  parentNotIn: [ID]

  """Search term(s) to retrieve matching comments for."""
  search: String

  """Comment status to limit results by."""
  status: String

  """Include comments for a specific user ID."""
  userId: ID
}

"""Connection between the mediaItem type and the ContentType type"""
type BlogMediaItemToContentTypeConnection {
  """The nodes of the connection, without the edges"""
  node: BlogContentType @deprecated(reason: "")
}

"""Details of an available size for a media item"""
type BlogMediaSize {
  """The file of the for the referenced size"""
  file: String @deprecated(reason: "")

  """The height of the for the referenced size"""
  height: String @deprecated(reason: "")

  """The mime type of the resource"""
  mimeType: String @deprecated(reason: "")

  """The referenced size name"""
  name: String @deprecated(reason: "")

  """The url of the for the referenced size"""
  sourceUrl: String @deprecated(reason: "")

  """The width of the for the referenced size"""
  width: String @deprecated(reason: "")
}

"""
Menus are the containers for navigation items. Menus can be assigned to menu locations, which are typically registered by the active theme.
"""
type BlogMenu implements BlogNode {
  """The number of items in the menu"""
  count: Int @deprecated(reason: "")

  """The globally unique identifier of the nav menu object."""
  id: ID! @deprecated(reason: "")

  """Whether the object is restricted from the current viewer"""
  isRestricted: Boolean @deprecated(reason: "")

  """WP ID of the nav menu."""
  menuId: Int @deprecated(reason: "")

  """Connection between the Menu type and the MenuItem type"""
  menuItems(
    """The number of items to return after the referenced "after" cursor"""
    first: Int
    last: Int

    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String

    """Arguments for filtering the connection"""
    where: BlogMenuToMenuItemConnectionWhereArgs
  ): BlogMenuToMenuItemConnection @deprecated(reason: "")

  """Display name of the menu. Equivalent to WP_Term-&gt;name."""
  name: String @deprecated(reason: "")

  """The url friendly name of the menu. Equivalent to WP_Term-&gt;slug"""
  slug: String @deprecated(reason: "")
}

"""
Navigation menu items are the individual items assigned to a menu. These are rendered as the links in a navigation menu.
"""
type BlogMenuItem implements BlogNode {
  """Connection between the MenuItem type and the MenuItem type"""
  childItems(
    """The number of items to return after the referenced "after" cursor"""
    first: Int
    last: Int

    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String

    """Arguments for filtering the connection"""
    where: BlogMenuItemToMenuItemConnectionWhereArgs
  ): BlogMenuItemToMenuItemConnection @deprecated(reason: "")

  """The object connected to this menu item."""
  connectedObject: BlogMenuItemObjectUnion @deprecated(reason: "")

  """Class attribute for the menu item link"""
  cssClasses: [String] @deprecated(reason: "")

  """Description of the menu item."""
  description: String @deprecated(reason: "")

  """The globally unique identifier of the nav menu item object."""
  id: ID! @deprecated(reason: "")

  """Whether the object is restricted from the current viewer"""
  isRestricted: Boolean @deprecated(reason: "")

  """Label or title of the menu item."""
  label: String @deprecated(reason: "")

  """Link relationship (XFN) of the menu item."""
  linkRelationship: String @deprecated(reason: "")

  """WP ID of the menu item."""
  menuItemId: Int @deprecated(reason: "")

  """Target attribute for the menu item link."""
  target: String @deprecated(reason: "")

  """Title attribute for the menu item link"""
  title: String @deprecated(reason: "")

  """URL or destination of the menu item."""
  url: String @deprecated(reason: "")
}

union BlogMenuItemObjectUnion = BlogPost | BlogPage | BlogCategory | BlogTag | BlogMenuItem

"""Connection between the MenuItem type and the MenuItem type"""
type BlogMenuItemToMenuItemConnection {
  """Edges for the MenuItemToMenuItemConnection connection"""
  edges: [BlogMenuItemToMenuItemConnectionEdge] @deprecated(reason: "")

  """The nodes of the connection, without the edges"""
  nodes: [BlogMenuItem] @deprecated(reason: "")

  """Information about pagination in a connection."""
  pageInfo: BlogWPPageInfo @deprecated(reason: "")
}

"""An edge in a connection"""
type BlogMenuItemToMenuItemConnectionEdge {
  """A cursor for use in pagination"""
  cursor: String @deprecated(reason: "")

  """The item at the end of the edge"""
  node: BlogMenuItem @deprecated(reason: "")
}

"""Arguments for filtering the MenuItemToMenuItemConnection connection"""
input BlogMenuItemToMenuItemConnectionWhereArgs {
  """The ID of the object"""
  id: Int

  """The menu location for the menu being queried"""
  location: BlogMenuLocationEnum
}

"""Registered menu locations"""
enum BlogMenuLocationEnum {
  EMPTY
}

"""Connection between the Menu type and the MenuItem type"""
type BlogMenuToMenuItemConnection {
  """Edges for the MenuToMenuItemConnection connection"""
  edges: [BlogMenuToMenuItemConnectionEdge] @deprecated(reason: "")

  """The nodes of the connection, without the edges"""
  nodes: [BlogMenuItem] @deprecated(reason: "")

  """Information about pagination in a connection."""
  pageInfo: BlogWPPageInfo @deprecated(reason: "")
}

"""An edge in a connection"""
type BlogMenuToMenuItemConnectionEdge {
  """A cursor for use in pagination"""
  cursor: String @deprecated(reason: "")

  """The item at the end of the edge"""
  node: BlogMenuItem @deprecated(reason: "")
}

"""Arguments for filtering the MenuToMenuItemConnection connection"""
input BlogMenuToMenuItemConnectionWhereArgs {
  """The ID of the object"""
  id: Int

  """The menu location for the menu being queried"""
  location: BlogMenuLocationEnum
}

"""The MimeType of the object"""
enum BlogMimeTypeEnum {
  APPLICATION_JAVA
  APPLICATION_MSWORD
  APPLICATION_OCTET_STREAM
  APPLICATION_ONENOTE
  APPLICATION_OXPS
  APPLICATION_PDF
  APPLICATION_RAR
  APPLICATION_RTF
  APPLICATION_TTAF_XML
  APPLICATION_VND_APPLE_KEYNOTE
  APPLICATION_VND_APPLE_NUMBERS
  APPLICATION_VND_APPLE_PAGES
  APPLICATION_VND_MS_ACCESS
  APPLICATION_VND_MS_EXCEL
  APPLICATION_VND_MS_EXCEL_ADDIN_MACROENABLED_12
  APPLICATION_VND_MS_EXCEL_SHEET_BINARY_MACROENABLED_12
  APPLICATION_VND_MS_EXCEL_SHEET_MACROENABLED_12
  APPLICATION_VND_MS_EXCEL_TEMPLATE_MACROENABLED_12
  APPLICATION_VND_MS_POWERPOINT
  APPLICATION_VND_MS_POWERPOINT_ADDIN_MACROENABLED_12
  APPLICATION_VND_MS_POWERPOINT_PRESENTATION_MACROENABLED_12
  APPLICATION_VND_MS_POWERPOINT_SLIDESHOW_MACROENABLED_12
  APPLICATION_VND_MS_POWERPOINT_SLIDE_MACROENABLED_12
  APPLICATION_VND_MS_POWERPOINT_TEMPLATE_MACROENABLED_12
  APPLICATION_VND_MS_PROJECT
  APPLICATION_VND_MS_WORD_DOCUMENT_MACROENABLED_12
  APPLICATION_VND_MS_WORD_TEMPLATE_MACROENABLED_12
  APPLICATION_VND_MS_WRITE
  APPLICATION_VND_MS_XPSDOCUMENT
  APPLICATION_VND_OASIS_OPENDOCUMENT_CHART
  APPLICATION_VND_OASIS_OPENDOCUMENT_DATABASE
  APPLICATION_VND_OASIS_OPENDOCUMENT_FORMULA
  APPLICATION_VND_OASIS_OPENDOCUMENT_GRAPHICS
  APPLICATION_VND_OASIS_OPENDOCUMENT_PRESENTATION
  APPLICATION_VND_OASIS_OPENDOCUMENT_SPREADSHEET
  APPLICATION_VND_OASIS_OPENDOCUMENT_TEXT
  APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_PRESENTATIONML_PRESENTATION
  APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_PRESENTATIONML_SLIDE
  APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_PRESENTATIONML_SLIDESHOW
  APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_PRESENTATIONML_TEMPLATE
  APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_SPREADSHEETML_SHEET
  APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_SPREADSHEETML_TEMPLATE
  APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_WORDPROCESSINGML_DOCUMENT
  APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_WORDPROCESSINGML_TEMPLATE
  APPLICATION_WORDPERFECT
  APPLICATION_X_7Z_COMPRESSED
  APPLICATION_X_GZIP
  APPLICATION_X_TAR
  APPLICATION_ZIP
  AUDIO_AAC
  AUDIO_FLAC
  AUDIO_MIDI
  AUDIO_MPEG
  AUDIO_OGG
  AUDIO_WAV
  AUDIO_X_MATROSKA
  AUDIO_X_MS_WAX
  AUDIO_X_MS_WMA
  AUDIO_X_REALAUDIO
  IMAGE_BMP
  IMAGE_GIF
  IMAGE_JPEG
  IMAGE_PNG
  IMAGE_TIFF
  IMAGE_X_ICON
  TEXT_CALENDAR
  TEXT_CSS
  TEXT_CSV
  TEXT_PLAIN
  TEXT_RICHTEXT
  TEXT_TAB_SEPARATED_VALUES
  TEXT_VTT
  VIDEO_3GPP
  VIDEO_3GPP2
  VIDEO_AVI
  VIDEO_DIVX
  VIDEO_MP4
  VIDEO_MPEG
  VIDEO_OGG
  VIDEO_QUICKTIME
  VIDEO_WEBM
  VIDEO_X_FLV
  VIDEO_X_MATROSKA
  VIDEO_X_MS_ASF
  VIDEO_X_MS_WM
  VIDEO_X_MS_WMV
  VIDEO_X_MS_WMX
}

"""An object with an ID"""
interface BlogNode {
  """The globally unique ID for the object"""
  id: ID!
}

"""A node that can have an author assigned to it"""
interface BlogNodeWithAuthor {
  """
  The author field will return a queryable User type matching the post's author.
  """
  wpAuthor: BlogUser
}

"""A node that can have comments associated with it"""
interface BlogNodeWithComments {
  """
  The number of comments. Even though WPGraphQL denotes this field as an integer, in WordPress this field should be saved as a numeric string for compatibility.
  """
  commentCount: Int

  """Whether the comments are open or closed for this particular post."""
  commentStatus: String
}

"""A node that supports the content editor"""
interface BlogNodeWithContentEditor {
  """The content of the post."""
  content(
    """Format of the field output"""
    format: BlogPostObjectFieldFormatEnum
  ): String
}

"""A node that can have an excerpt"""
interface BlogNodeWithExcerpt {
  """The excerpt of the post."""
  excerpt(
    """Format of the field output"""
    format: BlogPostObjectFieldFormatEnum
  ): String
}

"""A node that can have a featured image set"""
interface BlogNodeWithFeaturedImage {
  """The featured image for the object"""
  featuredImage: BlogMediaItem
}

"""A node that can have page attributes"""
interface BlogNodeWithPageAttributes {
  """
  A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types.
  """
  menuOrder: Int
}

"""A node that can have revisions"""
interface BlogNodeWithRevisions {
  """True if the node is a revision of another node"""
  isRevision: Boolean

  """
  If the current node is a revision, this field exposes the node this is a revision of. Returns null if the node is not a revision of another node.
  """
  revisionOf: BlogPostObjectUnion
}

"""A node that NodeWith a title"""
interface BlogNodeWithTitle {
  """
  The title of the post. This is currently just the raw title. An amendment to support rendered title needs to be made.
  """
  title(
    """Format of the field output"""
    format: BlogPostObjectFieldFormatEnum
  ): String
}

"""A node that can have trackbacks and pingbacks"""
interface BlogNodeWithTrackbacks {
  """Whether the pings are open or closed for this particular post."""
  pingStatus: String

  """URLs that have been pinged."""
  pinged: [String]

  """URLs queued to be pinged."""
  toPing: [String]
}

"""The cardinality of the connection order"""
enum BlogOrderEnum {
  ASC
  DESC
}

"""The page type"""
type BlogPage implements BlogNode & BlogContentNode & BlogUniformResourceIdentifiable & BlogNodeWithTitle & BlogNodeWithContentEditor & BlogNodeWithAuthor & BlogNodeWithFeaturedImage & BlogNodeWithComments & BlogNodeWithRevisions & BlogNodeWithPageAttributes & BlogHierarchicalContentNode {
  """
  The author field will return a queryable User type matching the post&#039;s author.
  """
  wpAuthor: BlogUser @deprecated(reason: "")

  """Connection between the page type and the page type"""
  childPages(
    """The number of items to return after the referenced "after" cursor"""
    first: Int
    last: Int

    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String

    """Arguments for filtering the connection"""
    where: BlogPageToPageConnectionWhereArgs
  ): BlogPageToPageConnection @deprecated(reason: "")

  """
  The number of comments. Even though WPGraphQL denotes this field as an integer, in WordPress this field should be saved as a numeric string for compatibility.
  """
  commentCount: Int @deprecated(reason: "")

  """Whether the comments are open or closed for this particular post."""
  commentStatus: String @deprecated(reason: "")

  """Connection between the page type and the Comment type"""
  comments(
    """The number of items to return after the referenced "after" cursor"""
    first: Int
    last: Int

    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String

    """Arguments for filtering the connection"""
    where: BlogPageToCommentConnectionWhereArgs
  ): BlogPageToCommentConnection @deprecated(reason: "")

  """The content of the post."""
  content(
    """Format of the field output"""
    format: BlogPostObjectFieldFormatEnum
  ): String @deprecated(reason: "")

  """Connection between the page type and the ContentType type"""
  contentType: BlogPageToContentTypeConnection @deprecated(reason: "")

  """The ID of the object in the database."""
  databaseId: Int! @deprecated(reason: "")

  """Post publishing date."""
  date: String @deprecated(reason: "")

  """The publishing date set in GMT."""
  dateGmt: String @deprecated(reason: "")

  """The desired slug of the post"""
  desiredSlug: String @deprecated(reason: "")

  """The user that most recently edited the object"""
  editLast: BlogUser @deprecated(reason: "")

  """
  If a user has edited the object within the past 15 seconds, this will return the user and the time they last edited. Null if the edit lock doesn&#039;t exist or is greater than 15 seconds
  """
  editLock: BlogEditLock @deprecated(reason: "")

  """The RSS enclosure for the object"""
  enclosure: String @deprecated(reason: "")

  """The featured image for the object"""
  featuredImage: BlogMediaItem @deprecated(reason: "")

  """
  The global unique identifier for this post. This currently matches the value stored in WP_Post-&gt;guid and the guid column in the &quot;post_objects&quot; database table.
  """
  guid: String @deprecated(reason: "")

  """The globally unique identifier of the page object."""
  id: ID! @deprecated(reason: "")

  """Whether this page is set to the static front page."""
  isFrontPage: Boolean! @deprecated(reason: "")

  """Whether the object is restricted from the current viewer"""
  isRestricted: Boolean @deprecated(reason: "")

  """True if the node is a revision of another node"""
  isRevision: Boolean @deprecated(reason: "")

  """The permalink of the post"""
  link: String @deprecated(reason: "")

  """
  A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types.
  """
  menuOrder: Int @deprecated(reason: "")

  """
  The local modified time for a post. If a post was recently updated the modified field will change to match the corresponding time.
  """
  modified: String @deprecated(reason: "")

  """
  The GMT modified time for a post. If a post was recently updated the modified field will change to match the corresponding time in GMT.
  """
  modifiedGmt: String @deprecated(reason: "")

  """The id field matches the WP_Post-&gt;ID field."""
  pageId: Int! @deprecated(reason: "Deprecated in favor of the databaseId field")

  """The parent of the object. The parent object can be of various types"""
  parent: BlogPostObjectUnion @deprecated(reason: "")

  """
  If the current node is a revision, this field exposes the node this is a revision of. Returns null if the node is not a revision of another node.
  """
  revisionOf: BlogPostObjectUnion @deprecated(reason: "")

  """Connection between the page type and the page type"""
  revisions(
    """The number of items to return after the referenced "after" cursor"""
    first: Int
    last: Int

    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String

    """Arguments for filtering the connection"""
    where: BlogPageToRevisionConnectionWhereArgs
  ): BlogPageToRevisionConnection @deprecated(reason: "")

  """
  The uri slug for the post. This is equivalent to the WP_Post-&gt;post_name field and the post_name column in the database for the &quot;post_objects&quot; table.
  """
  slug: String @deprecated(reason: "")

  """The current status of the object"""
  status: String @deprecated(reason: "")

  """
  The title of the post. This is currently just the raw title. An amendment to support rendered title needs to be made.
  """
  title(
    """Format of the field output"""
    format: BlogPostObjectFieldFormatEnum
  ): String @deprecated(reason: "")

  """URI path for the resource"""
  uri: String! @deprecated(reason: "")
}

"""The Type of Identifier used to fetch a single resource. Default is ID."""
enum BlogPageIdType {
  """Identify a resource by the Database ID."""
  DATABASE_ID

  """Identify a resource by the (hashed) Global ID."""
  ID

  """Identify a resource by the URI."""
  URI
}

"""Connection between the page type and the Comment type"""
type BlogPageToCommentConnection {
  """Edges for the PageToCommentConnection connection"""
  edges: [BlogPageToCommentConnectionEdge] @deprecated(reason: "")

  """The nodes of the connection, without the edges"""
  nodes: [BlogComment] @deprecated(reason: "")

  """Information about pagination in a connection."""
  pageInfo: BlogWPPageInfo @deprecated(reason: "")
}

"""An edge in a connection"""
type BlogPageToCommentConnectionEdge {
  """A cursor for use in pagination"""
  cursor: String @deprecated(reason: "")

  """The item at the end of the edge"""
  node: BlogComment @deprecated(reason: "")
}

"""Arguments for filtering the PageToCommentConnection connection"""
input BlogPageToCommentConnectionWhereArgs {
  """Comment author email address."""
  authorEmail: String

  """Array of author IDs to include comments for."""
  authorIn: [ID]

  """Array of author IDs to exclude comments for."""
  authorNotIn: [ID]

  """Comment author URL."""
  authorUrl: String

  """Array of comment IDs to include."""
  commentIn: [ID]

  """
  Array of IDs of users whose unapproved comments will be returned by the
  							query regardless of status.
  """
  commentNotIn: [ID]

  """Include comments of a given type."""
  commentType: String

  """Include comments from a given array of comment types."""
  commentTypeIn: [String]

  """Exclude comments from a given array of comment types."""
  commentTypeNotIn: String

  """Content object author ID to limit results by."""
  contentAuthor: [ID]

  """Array of author IDs to retrieve comments for."""
  contentAuthorIn: [ID]

  """Array of author IDs *not* to retrieve comments for."""
  contentAuthorNotIn: [ID]

  """
  Limit results to those affiliated with a given content object
  							ID.
  """
  contentId: ID

  """
  Array of content object IDs to include affiliated comments
  							for.
  """
  contentIdIn: [ID]

  """
  Array of content object IDs to exclude affiliated comments
  							for.
  """
  contentIdNotIn: [ID]

  """Content object name to retrieve affiliated comments for."""
  contentName: String

  """Content Object parent ID to retrieve affiliated comments for."""
  contentParent: Int

  """
  Content object type or array of types to retrieve affiliated comments for. Pass 'any' to match any value.
  """
  contentType: [BlogContentTypeEnum]

  """
  Array of IDs or email addresses of users whose unapproved comments will be returned by the query regardless of $status. Default empty
  """
  includeUnapproved: [ID]

  """Karma score to retrieve matching comments for."""
  karma: Int

  """The cardinality of the order of the connection"""
  order: BlogOrderEnum

  """Field to order the comments by."""
  orderby: BlogCommentsConnectionOrderbyEnum

  """Parent ID of comment to retrieve children of."""
  parent: Int

  """Array of parent IDs of comments to retrieve children for."""
  parentIn: [ID]

  """
  Array of parent IDs of comments *not* to retrieve children
  							for.
  """
  parentNotIn: [ID]

  """Search term(s) to retrieve matching comments for."""
  search: String

  """Comment status to limit results by."""
  status: String

  """Include comments for a specific user ID."""
  userId: ID
}

"""Connection between the page type and the ContentType type"""
type BlogPageToContentTypeConnection {
  """The nodes of the connection, without the edges"""
  node: BlogContentType @deprecated(reason: "")
}

"""Connection between the page type and the page type"""
type BlogPageToPageConnection {
  """Edges for the PageToPageConnection connection"""
  edges: [BlogPageToPageConnectionEdge] @deprecated(reason: "")

  """The nodes of the connection, without the edges"""
  nodes: [BlogPage] @deprecated(reason: "")

  """Information about pagination in a connection."""
  pageInfo: BlogWPPageInfo @deprecated(reason: "")
}

"""An edge in a connection"""
type BlogPageToPageConnectionEdge {
  """A cursor for use in pagination"""
  cursor: String @deprecated(reason: "")

  """The item at the end of the edge"""
  node: BlogPage @deprecated(reason: "")
}

"""Arguments for filtering the PageToPageConnection connection"""
input BlogPageToPageConnectionWhereArgs {
  """
  The user that's connected as the author of the object. Use the userId for the author object.
  """
  author: Int

  """Find objects connected to author(s) in the array of author's userIds"""
  authorIn: [ID]

  """Find objects connected to the author by the author's nicename"""
  authorName: String

  """
  Find objects NOT connected to author(s) in the array of author's userIds
  """
  authorNotIn: [ID]

  """Filter the connection based on dates"""
  dateQuery: BlogDateQueryInput

  """
  True for objects with passwords; False for objects without passwords; null for all objects with or without passwords
  """
  hasPassword: Boolean

  """Specific ID of the object"""
  id: Int

  """Array of IDs for the objects to retrieve"""
  in: [ID]

  """Get objects with a specific mimeType property"""
  mimeType: BlogMimeTypeEnum

  """Slug / post_name of the object"""
  name: String

  """Specify objects to retrieve. Use slugs"""
  nameIn: [String]

  """
  Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored
  """
  notIn: [ID]

  """What paramater to use to order the objects by."""
  orderby: [BlogPostObjectsConnectionOrderbyInput]

  """Use ID to return only children. Use 0 to return only top-level items"""
  parent: String

  """Specify objects whose parent is in an array"""
  parentIn: [ID]

  """Specify posts whose parent is not in an array"""
  parentNotIn: [ID]

  """Show posts with a specific password."""
  password: String

  """Show Posts based on a keyword search"""
  search: String

  """Title of the object"""
  title: String
}

"""Connection between the page type and the page type"""
type BlogPageToRevisionConnection {
  """Edges for the pageToRevisionConnection connection"""
  edges: [BlogPageToRevisionConnectionEdge] @deprecated(reason: "")

  """The nodes of the connection, without the edges"""
  nodes: [BlogPage] @deprecated(reason: "")

  """Information about pagination in a connection."""
  pageInfo: BlogWPPageInfo @deprecated(reason: "")
}

"""An edge in a connection"""
type BlogPageToRevisionConnectionEdge {
  """A cursor for use in pagination"""
  cursor: String @deprecated(reason: "")

  """The item at the end of the edge"""
  node: BlogPage @deprecated(reason: "")
}

"""Arguments for filtering the pageToRevisionConnection connection"""
input BlogPageToRevisionConnectionWhereArgs {
  """
  The user that's connected as the author of the object. Use the userId for the author object.
  """
  author: Int

  """Find objects connected to author(s) in the array of author's userIds"""
  authorIn: [ID]

  """Find objects connected to the author by the author's nicename"""
  authorName: String

  """
  Find objects NOT connected to author(s) in the array of author's userIds
  """
  authorNotIn: [ID]

  """Filter the connection based on dates"""
  dateQuery: BlogDateQueryInput

  """
  True for objects with passwords; False for objects without passwords; null for all objects with or without passwords
  """
  hasPassword: Boolean

  """Specific ID of the object"""
  id: Int

  """Array of IDs for the objects to retrieve"""
  in: [ID]

  """Get objects with a specific mimeType property"""
  mimeType: BlogMimeTypeEnum

  """Slug / post_name of the object"""
  name: String

  """Specify objects to retrieve. Use slugs"""
  nameIn: [String]

  """
  Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored
  """
  notIn: [ID]

  """What paramater to use to order the objects by."""
  orderby: [BlogPostObjectsConnectionOrderbyInput]

  """Use ID to return only children. Use 0 to return only top-level items"""
  parent: String

  """Specify objects whose parent is in an array"""
  parentIn: [ID]

  """Specify posts whose parent is not in an array"""
  parentNotIn: [ID]

  """Show posts with a specific password."""
  password: String

  """Show Posts based on a keyword search"""
  search: String

  """Title of the object"""
  title: String
}

"""An plugin object"""
type BlogPlugin implements BlogNode {
  """Name of the plugin author(s), may also be a company name."""
  author: String @deprecated(reason: "")

  """URI for the related author(s)/company website."""
  authorUri: String @deprecated(reason: "")

  """Description of the plugin."""
  description: String @deprecated(reason: "")

  """The globally unique identifier of the plugin object."""
  id: ID! @deprecated(reason: "")

  """Whether the object is restricted from the current viewer"""
  isRestricted: Boolean @deprecated(reason: "")

  """Display name of the plugin."""
  name: String @deprecated(reason: "")

  """
  URI for the plugin website. This is useful for directing users for support requests etc.
  """
  pluginUri: String @deprecated(reason: "")

  """Current version of the plugin."""
  version: String @deprecated(reason: "")
}

"""The post type"""
type BlogPost implements BlogNode & BlogContentNode & BlogUniformResourceIdentifiable & BlogNodeWithTitle & BlogNodeWithContentEditor & BlogNodeWithAuthor & BlogNodeWithFeaturedImage & BlogNodeWithExcerpt & BlogNodeWithComments & BlogNodeWithTrackbacks & BlogNodeWithRevisions {
  """
  The author field will return a queryable User type matching the post&#039;s author.
  """
  wpAuthor: BlogUser @deprecated(reason: "")

  """
  This will change the author and/or title which is displayed on the blog to be different from the actual author.
  """
  authorOverride: BlogPost_Authoroverride @deprecated(reason: "")

  """Connection between the post type and the category type"""
  categories(
    """The number of items to return after the referenced "after" cursor"""
    first: Int
    last: Int

    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String

    """Arguments for filtering the connection"""
    where: BlogPostToCategoryConnectionWhereArgs
  ): BlogPostToCategoryConnection @deprecated(reason: "")

  """
  The number of comments. Even though WPGraphQL denotes this field as an integer, in WordPress this field should be saved as a numeric string for compatibility.
  """
  commentCount: Int @deprecated(reason: "")

  """Whether the comments are open or closed for this particular post."""
  commentStatus: String @deprecated(reason: "")

  """Connection between the post type and the Comment type"""
  comments(
    """The number of items to return after the referenced "after" cursor"""
    first: Int
    last: Int

    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String

    """Arguments for filtering the connection"""
    where: BlogPostToCommentConnectionWhereArgs
  ): BlogPostToCommentConnection @deprecated(reason: "")

  """The content of the post."""
  content(
    """Format of the field output"""
    format: BlogPostObjectFieldFormatEnum
  ): String @deprecated(reason: "")

  """Connection between the post type and the ContentType type"""
  contentType: BlogPostToContentTypeConnection @deprecated(reason: "")

  """The ID of the object in the database."""
  databaseId: Int! @deprecated(reason: "")

  """Post publishing date."""
  date: String @deprecated(reason: "")

  """The publishing date set in GMT."""
  dateGmt: String @deprecated(reason: "")

  """The desired slug of the post"""
  desiredSlug: String @deprecated(reason: "")

  """The user that most recently edited the object"""
  editLast: BlogUser @deprecated(reason: "")

  """
  If a user has edited the object within the past 15 seconds, this will return the user and the time they last edited. Null if the edit lock doesn&#039;t exist or is greater than 15 seconds
  """
  editLock: BlogEditLock @deprecated(reason: "")

  """The RSS enclosure for the object"""
  enclosure: String @deprecated(reason: "")

  """The excerpt of the post."""
  excerpt(
    """Format of the field output"""
    format: BlogPostObjectFieldFormatEnum
  ): String @deprecated(reason: "")

  """The featured image for the object"""
  featuredImage: BlogMediaItem @deprecated(reason: "")

  """
  The global unique identifier for this post. This currently matches the value stored in WP_Post-&gt;guid and the guid column in the &quot;post_objects&quot; database table.
  """
  guid: String @deprecated(reason: "")

  """The globally unique identifier of the post object."""
  id: ID! @deprecated(reason: "")

  """Whether the object is restricted from the current viewer"""
  isRestricted: Boolean @deprecated(reason: "")

  """True if the node is a revision of another node"""
  isRevision: Boolean @deprecated(reason: "")

  """The permalink of the post"""
  link: String @deprecated(reason: "")
  marketing: BlogPost_Marketing @deprecated(reason: "")

  """
  The local modified time for a post. If a post was recently updated the modified field will change to match the corresponding time.
  """
  modified: String @deprecated(reason: "")

  """
  The GMT modified time for a post. If a post was recently updated the modified field will change to match the corresponding time in GMT.
  """
  modifiedGmt: String @deprecated(reason: "")

  """Whether the pings are open or closed for this particular post."""
  pingStatus: String @deprecated(reason: "")

  """URLs that have been pinged."""
  pinged: [String] @deprecated(reason: "")

  """Connection between the post type and the postFormat type"""
  postFormats(
    """The number of items to return after the referenced "after" cursor"""
    first: Int
    last: Int

    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String

    """Arguments for filtering the connection"""
    where: BlogPostToPostFormatConnectionWhereArgs
  ): BlogPostToPostFormatConnection @deprecated(reason: "")

  """The id field matches the WP_Post-&gt;ID field."""
  postId: Int! @deprecated(reason: "Deprecated in favor of the databaseId field")

  """
  If the current node is a revision, this field exposes the node this is a revision of. Returns null if the node is not a revision of another node.
  """
  revisionOf: BlogPostObjectUnion @deprecated(reason: "")

  """Connection between the post type and the post type"""
  revisions(
    """The number of items to return after the referenced "after" cursor"""
    first: Int
    last: Int

    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String

    """Arguments for filtering the connection"""
    where: BlogPostToRevisionConnectionWhereArgs
  ): BlogPostToRevisionConnection @deprecated(reason: "")

  """
  The uri slug for the post. This is equivalent to the WP_Post-&gt;post_name field and the post_name column in the database for the &quot;post_objects&quot; table.
  """
  slug: String @deprecated(reason: "")

  """The current status of the object"""
  status: String @deprecated(reason: "")

  """Connection between the post type and the tag type"""
  tags(
    """The number of items to return after the referenced "after" cursor"""
    first: Int
    last: Int

    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String

    """Arguments for filtering the connection"""
    where: BlogPostToTagConnectionWhereArgs
  ): BlogPostToTagConnection @deprecated(reason: "")

  """Terms connected to the object"""
  termNames(
    """Select which taxonomies to limit the results to"""
    taxonomies: [BlogTaxonomyEnum]
  ): [String] @deprecated(reason: "")

  """Terms connected to the object"""
  termSlugs(
    """Select which taxonomies to limit the results to"""
    taxonomies: [BlogTaxonomyEnum]
  ): [String] @deprecated(reason: "")

  """Terms connected to the object"""
  terms(
    """Select which taxonomies to limit the results to"""
    taxonomies: [BlogTaxonomyEnum]
  ): [BlogTermObjectUnion] @deprecated(reason: "")

  """
  The title of the post. This is currently just the raw title. An amendment to support rendered title needs to be made.
  """
  title(
    """Format of the field output"""
    format: BlogPostObjectFieldFormatEnum
  ): String @deprecated(reason: "")

  """URLs queued to be pinged."""
  toPing: [String] @deprecated(reason: "")

  """URI path for the resource"""
  uri: String! @deprecated(reason: "")
  author: AccountUser
}

"""Set relationships between the post to categories"""
input BlogPostCategoriesInput {
  """
  If true, this will append the category to existing related categories. If false, this will replace existing relationships. Default true.
  """
  append: Boolean
  nodes: [BlogPostCategoriesNodeInput]
}

"""
List of categories to connect the post to. If an ID is set, it will be used to create the connection. If not, it will look for a slug. If neither are valid existing terms, and the site is configured to allow terms to be created during post mutations, a term will be created using the Name if it exists in the input, then fallback to the slug if it exists.
"""
input BlogPostCategoriesNodeInput {
  """
  The description of the category. This field is used to set a description of the category if a new one is created during the mutation.
  """
  description: String

  """
  The ID of the category. If present, this will be used to connect to the post. If no existing category exists with this ID, no connection will be made.
  """
  id: ID

  """
  The name of the category. This field is used to create a new term, if term creation is enabled in nested mutations, and if one does not already exist with the provided slug or ID or if a slug or ID is not provided. If no name is included and a term is created, the creation will fallback to the slug field.
  """
  name: String

  """
  The slug of the category. If no ID is present, this field will be used to make a connection. If no existing term exists with this slug, this field will be used as a fallback to the Name field when creating a new term to connect to, if term creation is enabled as a nested mutation.
  """
  slug: String
}

"""The postFormat type"""
type BlogPostFormat implements BlogNode & BlogTermNode & BlogUniformResourceIdentifiable {
  """The number of objects connected to the object"""
  count: Int @deprecated(reason: "")

  """Identifies the primary key from the database."""
  databaseId: Int! @deprecated(reason: "")

  """The description of the object"""
  description: String @deprecated(reason: "")

  """The globally unique ID for the object"""
  id: ID! @deprecated(reason: "")

  """Whether the object is restricted from the current viewer"""
  isRestricted: Boolean @deprecated(reason: "")

  """The link to the term"""
  link: String @deprecated(reason: "")

  """The human friendly name of the object."""
  name: String @deprecated(reason: "")

  """The id field matches the WP_Post-&gt;ID field."""
  postFormatId: Int @deprecated(reason: "Deprecated in favor of databaseId")

  """Connection between the postFormat type and the post type"""
  posts(
    """The number of items to return after the referenced "after" cursor"""
    first: Int
    last: Int

    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String

    """Arguments for filtering the connection"""
    where: BlogPostFormatToPostConnectionWhereArgs
  ): BlogPostFormatToPostConnection @deprecated(reason: "")

  """An alphanumeric identifier for the object unique to its type."""
  slug: String @deprecated(reason: "")

  """Connection between the postFormat type and the Taxonomy type"""
  taxonomy: BlogPostFormatToTaxonomyConnection @deprecated(reason: "")

  """The ID of the term group that this term object belongs to"""
  termGroupId: Int @deprecated(reason: "")

  """The taxonomy ID that the object is associated with"""
  termTaxonomyId: Int @deprecated(reason: "")

  """The unique resource identifier path"""
  uri: String! @deprecated(reason: "")
}

"""The Type of Identifier used to fetch a single resource. Default is ID."""
enum BlogPostFormatIdType {
  """The Database ID for the node"""
  DATABASE_ID

  """The hashed Global ID"""
  ID

  """The name of the node"""
  NAME

  """Url friendly name of the node"""
  SLUG

  """The URI for the node"""
  URI
}

"""Connection between the postFormat type and the post type"""
type BlogPostFormatToPostConnection {
  """Edges for the PostFormatToPostConnection connection"""
  edges: [BlogPostFormatToPostConnectionEdge] @deprecated(reason: "")

  """The nodes of the connection, without the edges"""
  nodes: [BlogPost] @deprecated(reason: "")

  """Information about pagination in a connection."""
  pageInfo: BlogWPPageInfo @deprecated(reason: "")
}

"""An edge in a connection"""
type BlogPostFormatToPostConnectionEdge {
  """A cursor for use in pagination"""
  cursor: String @deprecated(reason: "")

  """The item at the end of the edge"""
  node: BlogPost @deprecated(reason: "")
}

"""Arguments for filtering the PostFormatToPostConnection connection"""
input BlogPostFormatToPostConnectionWhereArgs {
  """
  The user that's connected as the author of the object. Use the userId for the author object.
  """
  author: Int

  """Find objects connected to author(s) in the array of author's userIds"""
  authorIn: [ID]

  """Find objects connected to the author by the author's nicename"""
  authorName: String

  """
  Find objects NOT connected to author(s) in the array of author's userIds
  """
  authorNotIn: [ID]

  """Category ID"""
  categoryId: Int

  """
  Array of category IDs, used to display objects from one category OR another
  """
  categoryIn: [ID]

  """Use Category Slug"""
  categoryName: String

  """
  Array of category IDs, used to display objects from one category OR another
  """
  categoryNotIn: [ID]

  """Filter the connection based on dates"""
  dateQuery: BlogDateQueryInput

  """
  True for objects with passwords; False for objects without passwords; null for all objects with or without passwords
  """
  hasPassword: Boolean

  """Specific ID of the object"""
  id: Int

  """Array of IDs for the objects to retrieve"""
  in: [ID]

  """Get objects with a specific mimeType property"""
  mimeType: BlogMimeTypeEnum

  """Slug / post_name of the object"""
  name: String

  """Specify objects to retrieve. Use slugs"""
  nameIn: [String]

  """
  Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored
  """
  notIn: [ID]

  """What paramater to use to order the objects by."""
  orderby: [BlogPostObjectsConnectionOrderbyInput]

  """Use ID to return only children. Use 0 to return only top-level items"""
  parent: String

  """Specify objects whose parent is in an array"""
  parentIn: [ID]

  """Specify posts whose parent is not in an array"""
  parentNotIn: [ID]

  """Show posts with a specific password."""
  password: String

  """Show Posts based on a keyword search"""
  search: String

  """Tag Slug"""
  tag: String

  """Use Tag ID"""
  tagId: String

  """Array of tag IDs, used to display objects from one tag OR another"""
  tagIn: [ID]

  """Array of tag IDs, used to display objects from one tag OR another"""
  tagNotIn: [ID]

  """Array of tag slugs, used to display objects from one tag OR another"""
  tagSlugAnd: [String]

  """Array of tag slugs, used to exclude objects in specified tags"""
  tagSlugIn: [String]

  """Title of the object"""
  title: String
}

"""Connection between the postFormat type and the Taxonomy type"""
type BlogPostFormatToTaxonomyConnection {
  """The nodes of the connection, without the edges"""
  node: BlogTaxonomy @deprecated(reason: "")
}

"""The Type of Identifier used to fetch a single resource. Default is ID."""
enum BlogPostIdType {
  """Identify a resource by the Database ID."""
  DATABASE_ID

  """Identify a resource by the (hashed) Global ID."""
  ID

  """Identify a resource by the URI."""
  URI

  """
  Identify a resource by the slug. Available to non-hierarchcial Types where the slug is a unique identifier.
  """
  SLUG
}

"""The format of post field data."""
enum BlogPostObjectFieldFormatEnum {
  """Provide the field value directly from database"""
  RAW

  """Apply the default WordPress rendering"""
  RENDERED
}

union BlogPostObjectUnion = BlogPost | BlogPage | BlogMediaItem

"""The column to use when filtering by date"""
enum BlogPostObjectsConnectionDateColumnEnum {
  DATE
  MODIFIED
}

"""Field to order the connection by"""
enum BlogPostObjectsConnectionOrderbyEnum {
  """Order by author"""
  AUTHOR

  """Order by publish date"""
  DATE

  """Preserve the ID order given in the IN array"""
  IN

  """Order by the menu order value"""
  MENU_ORDER

  """Order by last modified date"""
  MODIFIED

  """Preserve slug order given in the NAME_IN array"""
  NAME_IN

  """Order by parent ID"""
  PARENT

  """Order by slug"""
  SLUG

  """Order by title"""
  TITLE
}

"""Options for ordering the connection"""
input BlogPostObjectsConnectionOrderbyInput {
  """The field to order the connection by"""
  field: BlogPostObjectsConnectionOrderbyEnum!

  """Possible directions in which to order a list of items"""
  order: BlogOrderEnum!
}

"""Set relationships between the post to postFormats"""
input BlogPostPostFormatsInput {
  """
  If true, this will append the postFormat to existing related postFormats. If false, this will replace existing relationships. Default true.
  """
  append: Boolean
  nodes: [BlogPostPostFormatsNodeInput]
}

"""
List of postFormats to connect the post to. If an ID is set, it will be used to create the connection. If not, it will look for a slug. If neither are valid existing terms, and the site is configured to allow terms to be created during post mutations, a term will be created using the Name if it exists in the input, then fallback to the slug if it exists.
"""
input BlogPostPostFormatsNodeInput {
  """
  The description of the postFormat. This field is used to set a description of the postFormat if a new one is created during the mutation.
  """
  description: String

  """
  The ID of the postFormat. If present, this will be used to connect to the post. If no existing postFormat exists with this ID, no connection will be made.
  """
  id: ID

  """
  The name of the postFormat. This field is used to create a new term, if term creation is enabled in nested mutations, and if one does not already exist with the provided slug or ID or if a slug or ID is not provided. If no name is included and a term is created, the creation will fallback to the slug field.
  """
  name: String

  """
  The slug of the postFormat. If no ID is present, this field will be used to make a connection. If no existing term exists with this slug, this field will be used as a fallback to the Name field when creating a new term to connect to, if term creation is enabled as a nested mutation.
  """
  slug: String
}

"""The status of the object."""
enum BlogPostStatusEnum {
  """Objects with the acf-disabled status"""
  ACF_DISABLED

  """Objects with the auto-draft status"""
  AUTO_DRAFT

  """Objects with the draft status"""
  DRAFT

  """Objects with the future status"""
  FUTURE

  """Objects with the inherit status"""
  INHERIT

  """Objects with the pending status"""
  PENDING

  """Objects with the private status"""
  PRIVATE

  """Objects with the publish status"""
  PUBLISH

  """Objects with the request-completed status"""
  REQUEST_COMPLETED

  """Objects with the request-confirmed status"""
  REQUEST_CONFIRMED

  """Objects with the request-failed status"""
  REQUEST_FAILED

  """Objects with the request-pending status"""
  REQUEST_PENDING

  """Objects with the trash status"""
  TRASH
}

"""Set relationships between the post to tags"""
input BlogPostTagsInput {
  """
  If true, this will append the tag to existing related tags. If false, this will replace existing relationships. Default true.
  """
  append: Boolean
  nodes: [BlogPostTagsNodeInput]
}

"""
List of tags to connect the post to. If an ID is set, it will be used to create the connection. If not, it will look for a slug. If neither are valid existing terms, and the site is configured to allow terms to be created during post mutations, a term will be created using the Name if it exists in the input, then fallback to the slug if it exists.
"""
input BlogPostTagsNodeInput {
  """
  The description of the tag. This field is used to set a description of the tag if a new one is created during the mutation.
  """
  description: String

  """
  The ID of the tag. If present, this will be used to connect to the post. If no existing tag exists with this ID, no connection will be made.
  """
  id: ID

  """
  The name of the tag. This field is used to create a new term, if term creation is enabled in nested mutations, and if one does not already exist with the provided slug or ID or if a slug or ID is not provided. If no name is included and a term is created, the creation will fallback to the slug field.
  """
  name: String

  """
  The slug of the tag. If no ID is present, this field will be used to make a connection. If no existing term exists with this slug, this field will be used as a fallback to the Name field when creating a new term to connect to, if term creation is enabled as a nested mutation.
  """
  slug: String
}

"""Connection between the post type and the category type"""
type BlogPostToCategoryConnection {
  """Edges for the PostToCategoryConnection connection"""
  edges: [BlogPostToCategoryConnectionEdge] @deprecated(reason: "")

  """The nodes of the connection, without the edges"""
  nodes: [BlogCategory] @deprecated(reason: "")

  """Information about pagination in a connection."""
  pageInfo: BlogWPPageInfo @deprecated(reason: "")
}

"""An edge in a connection"""
type BlogPostToCategoryConnectionEdge {
  """A cursor for use in pagination"""
  cursor: String @deprecated(reason: "")

  """The item at the end of the edge"""
  node: BlogCategory @deprecated(reason: "")
}

"""Arguments for filtering the PostToCategoryConnection connection"""
input BlogPostToCategoryConnectionWhereArgs {
  """
  Unique cache key to be produced when this query is stored in an object cache. Default is 'core'.
  """
  cacheDomain: String

  """
  Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0.
  """
  childOf: Int

  """
  True to limit results to terms that have no children. This parameter has no effect on non-hierarchical taxonomies. Default false.
  """
  childless: Boolean

  """
  Retrieve terms where the description is LIKE the input value. Default empty.
  """
  descriptionLike: String

  """
  Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array.
  """
  exclude: [ID]

  """
  Array of term ids to exclude along with all of their descendant terms. If $include is non-empty, $exclude_tree is ignored. Default empty array.
  """
  excludeTree: [ID]

  """
  Whether to hide terms not assigned to any posts. Accepts true or false. Default false
  """
  hideEmpty: Boolean

  """
  Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true.
  """
  hierarchical: Boolean

  """Array of term ids to include. Default empty array."""
  include: [ID]

  """Array of names to return term(s) for. Default empty."""
  name: [String]

  """Retrieve terms where the name is LIKE the input value. Default empty."""
  nameLike: String

  """
  Array of object IDs. Results will be limited to terms associated with these objects.
  """
  objectIds: [ID]

  """Field(s) to order terms by. Defaults to 'name'."""
  orderby: BlogTermObjectsConnectionOrderbyEnum

  """
  Whether to pad the quantity of a term's children in the quantity of each term's "count" object variable. Default false.
  """
  padCounts: Boolean

  """Parent term ID to retrieve direct-child terms of. Default empty."""
  parent: Int

  """
  Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty.
  """
  search: String

  """
  Default false. If true, only the items connected to the source item will be returned. If false, all items will be returned regardless of connection to the source
  """
  shouldOnlyIncludeConnectedItems: Boolean

  """
  Default false. If true, the connection will be output in a flat list instead of the hierarchical list. So child terms will be output in the same level as the parent terms
  """
  shouldOutputInFlatList: Boolean

  """Array of slugs to return term(s) for. Default empty."""
  slug: [String]

  """Array of term taxonomy IDs, to match when querying terms."""
  termTaxonomId: [ID]

  """Whether to prime meta caches for matched terms. Default true."""
  updateTermMetaCache: Boolean
}

"""Connection between the post type and the Comment type"""
type BlogPostToCommentConnection {
  """Edges for the PostToCommentConnection connection"""
  edges: [BlogPostToCommentConnectionEdge] @deprecated(reason: "")

  """The nodes of the connection, without the edges"""
  nodes: [BlogComment] @deprecated(reason: "")

  """Information about pagination in a connection."""
  pageInfo: BlogWPPageInfo @deprecated(reason: "")
}

"""An edge in a connection"""
type BlogPostToCommentConnectionEdge {
  """A cursor for use in pagination"""
  cursor: String @deprecated(reason: "")

  """The item at the end of the edge"""
  node: BlogComment @deprecated(reason: "")
}

"""Arguments for filtering the PostToCommentConnection connection"""
input BlogPostToCommentConnectionWhereArgs {
  """Comment author email address."""
  authorEmail: String

  """Array of author IDs to include comments for."""
  authorIn: [ID]

  """Array of author IDs to exclude comments for."""
  authorNotIn: [ID]

  """Comment author URL."""
  authorUrl: String

  """Array of comment IDs to include."""
  commentIn: [ID]

  """
  Array of IDs of users whose unapproved comments will be returned by the
  							query regardless of status.
  """
  commentNotIn: [ID]

  """Include comments of a given type."""
  commentType: String

  """Include comments from a given array of comment types."""
  commentTypeIn: [String]

  """Exclude comments from a given array of comment types."""
  commentTypeNotIn: String

  """Content object author ID to limit results by."""
  contentAuthor: [ID]

  """Array of author IDs to retrieve comments for."""
  contentAuthorIn: [ID]

  """Array of author IDs *not* to retrieve comments for."""
  contentAuthorNotIn: [ID]

  """
  Limit results to those affiliated with a given content object
  							ID.
  """
  contentId: ID

  """
  Array of content object IDs to include affiliated comments
  							for.
  """
  contentIdIn: [ID]

  """
  Array of content object IDs to exclude affiliated comments
  							for.
  """
  contentIdNotIn: [ID]

  """Content object name to retrieve affiliated comments for."""
  contentName: String

  """Content Object parent ID to retrieve affiliated comments for."""
  contentParent: Int

  """
  Content object type or array of types to retrieve affiliated comments for. Pass 'any' to match any value.
  """
  contentType: [BlogContentTypeEnum]

  """
  Array of IDs or email addresses of users whose unapproved comments will be returned by the query regardless of $status. Default empty
  """
  includeUnapproved: [ID]

  """Karma score to retrieve matching comments for."""
  karma: Int

  """The cardinality of the order of the connection"""
  order: BlogOrderEnum

  """Field to order the comments by."""
  orderby: BlogCommentsConnectionOrderbyEnum

  """Parent ID of comment to retrieve children of."""
  parent: Int

  """Array of parent IDs of comments to retrieve children for."""
  parentIn: [ID]

  """
  Array of parent IDs of comments *not* to retrieve children
  							for.
  """
  parentNotIn: [ID]

  """Search term(s) to retrieve matching comments for."""
  search: String

  """Comment status to limit results by."""
  status: String

  """Include comments for a specific user ID."""
  userId: ID
}

"""Connection between the post type and the ContentType type"""
type BlogPostToContentTypeConnection {
  """The nodes of the connection, without the edges"""
  node: BlogContentType @deprecated(reason: "")
}

"""Connection between the post type and the postFormat type"""
type BlogPostToPostFormatConnection {
  """Edges for the PostToPostFormatConnection connection"""
  edges: [BlogPostToPostFormatConnectionEdge] @deprecated(reason: "")

  """The nodes of the connection, without the edges"""
  nodes: [BlogPostFormat] @deprecated(reason: "")

  """Information about pagination in a connection."""
  pageInfo: BlogWPPageInfo @deprecated(reason: "")
}

"""An edge in a connection"""
type BlogPostToPostFormatConnectionEdge {
  """A cursor for use in pagination"""
  cursor: String @deprecated(reason: "")

  """The item at the end of the edge"""
  node: BlogPostFormat @deprecated(reason: "")
}

"""Arguments for filtering the PostToPostFormatConnection connection"""
input BlogPostToPostFormatConnectionWhereArgs {
  """
  Unique cache key to be produced when this query is stored in an object cache. Default is 'core'.
  """
  cacheDomain: String

  """
  Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0.
  """
  childOf: Int

  """
  True to limit results to terms that have no children. This parameter has no effect on non-hierarchical taxonomies. Default false.
  """
  childless: Boolean

  """
  Retrieve terms where the description is LIKE the input value. Default empty.
  """
  descriptionLike: String

  """
  Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array.
  """
  exclude: [ID]

  """
  Array of term ids to exclude along with all of their descendant terms. If $include is non-empty, $exclude_tree is ignored. Default empty array.
  """
  excludeTree: [ID]

  """
  Whether to hide terms not assigned to any posts. Accepts true or false. Default false
  """
  hideEmpty: Boolean

  """
  Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true.
  """
  hierarchical: Boolean

  """Array of term ids to include. Default empty array."""
  include: [ID]

  """Array of names to return term(s) for. Default empty."""
  name: [String]

  """Retrieve terms where the name is LIKE the input value. Default empty."""
  nameLike: String

  """
  Array of object IDs. Results will be limited to terms associated with these objects.
  """
  objectIds: [ID]

  """Field(s) to order terms by. Defaults to 'name'."""
  orderby: BlogTermObjectsConnectionOrderbyEnum

  """
  Whether to pad the quantity of a term's children in the quantity of each term's "count" object variable. Default false.
  """
  padCounts: Boolean

  """Parent term ID to retrieve direct-child terms of. Default empty."""
  parent: Int

  """
  Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty.
  """
  search: String

  """
  Default false. If true, only the items connected to the source item will be returned. If false, all items will be returned regardless of connection to the source
  """
  shouldOnlyIncludeConnectedItems: Boolean

  """
  Default false. If true, the connection will be output in a flat list instead of the hierarchical list. So child terms will be output in the same level as the parent terms
  """
  shouldOutputInFlatList: Boolean

  """Array of slugs to return term(s) for. Default empty."""
  slug: [String]

  """Array of term taxonomy IDs, to match when querying terms."""
  termTaxonomId: [ID]

  """Whether to prime meta caches for matched terms. Default true."""
  updateTermMetaCache: Boolean
}

"""Connection between the post type and the post type"""
type BlogPostToRevisionConnection {
  """Edges for the postToRevisionConnection connection"""
  edges: [BlogPostToRevisionConnectionEdge] @deprecated(reason: "")

  """The nodes of the connection, without the edges"""
  nodes: [BlogPost] @deprecated(reason: "")

  """Information about pagination in a connection."""
  pageInfo: BlogWPPageInfo @deprecated(reason: "")
}

"""An edge in a connection"""
type BlogPostToRevisionConnectionEdge {
  """A cursor for use in pagination"""
  cursor: String @deprecated(reason: "")

  """The item at the end of the edge"""
  node: BlogPost @deprecated(reason: "")
}

"""Arguments for filtering the postToRevisionConnection connection"""
input BlogPostToRevisionConnectionWhereArgs {
  """
  The user that's connected as the author of the object. Use the userId for the author object.
  """
  author: Int

  """Find objects connected to author(s) in the array of author's userIds"""
  authorIn: [ID]

  """Find objects connected to the author by the author's nicename"""
  authorName: String

  """
  Find objects NOT connected to author(s) in the array of author's userIds
  """
  authorNotIn: [ID]

  """Category ID"""
  categoryId: Int

  """
  Array of category IDs, used to display objects from one category OR another
  """
  categoryIn: [ID]

  """Use Category Slug"""
  categoryName: String

  """
  Array of category IDs, used to display objects from one category OR another
  """
  categoryNotIn: [ID]

  """Filter the connection based on dates"""
  dateQuery: BlogDateQueryInput

  """
  True for objects with passwords; False for objects without passwords; null for all objects with or without passwords
  """
  hasPassword: Boolean

  """Specific ID of the object"""
  id: Int

  """Array of IDs for the objects to retrieve"""
  in: [ID]

  """Get objects with a specific mimeType property"""
  mimeType: BlogMimeTypeEnum

  """Slug / post_name of the object"""
  name: String

  """Specify objects to retrieve. Use slugs"""
  nameIn: [String]

  """
  Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored
  """
  notIn: [ID]

  """What paramater to use to order the objects by."""
  orderby: [BlogPostObjectsConnectionOrderbyInput]

  """Use ID to return only children. Use 0 to return only top-level items"""
  parent: String

  """Specify objects whose parent is in an array"""
  parentIn: [ID]

  """Specify posts whose parent is not in an array"""
  parentNotIn: [ID]

  """Show posts with a specific password."""
  password: String

  """Show Posts based on a keyword search"""
  search: String

  """Tag Slug"""
  tag: String

  """Use Tag ID"""
  tagId: String

  """Array of tag IDs, used to display objects from one tag OR another"""
  tagIn: [ID]

  """Array of tag IDs, used to display objects from one tag OR another"""
  tagNotIn: [ID]

  """Array of tag slugs, used to display objects from one tag OR another"""
  tagSlugAnd: [String]

  """Array of tag slugs, used to exclude objects in specified tags"""
  tagSlugIn: [String]

  """Title of the object"""
  title: String
}

"""Connection between the post type and the tag type"""
type BlogPostToTagConnection {
  """Edges for the PostToTagConnection connection"""
  edges: [BlogPostToTagConnectionEdge] @deprecated(reason: "")

  """The nodes of the connection, without the edges"""
  nodes: [BlogTag] @deprecated(reason: "")

  """Information about pagination in a connection."""
  pageInfo: BlogWPPageInfo @deprecated(reason: "")
}

"""An edge in a connection"""
type BlogPostToTagConnectionEdge {
  """A cursor for use in pagination"""
  cursor: String @deprecated(reason: "")

  """The item at the end of the edge"""
  node: BlogTag @deprecated(reason: "")
}

"""Arguments for filtering the PostToTagConnection connection"""
input BlogPostToTagConnectionWhereArgs {
  """
  Unique cache key to be produced when this query is stored in an object cache. Default is 'core'.
  """
  cacheDomain: String

  """
  Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0.
  """
  childOf: Int

  """
  True to limit results to terms that have no children. This parameter has no effect on non-hierarchical taxonomies. Default false.
  """
  childless: Boolean

  """
  Retrieve terms where the description is LIKE the input value. Default empty.
  """
  descriptionLike: String

  """
  Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array.
  """
  exclude: [ID]

  """
  Array of term ids to exclude along with all of their descendant terms. If $include is non-empty, $exclude_tree is ignored. Default empty array.
  """
  excludeTree: [ID]

  """
  Whether to hide terms not assigned to any posts. Accepts true or false. Default false
  """
  hideEmpty: Boolean

  """
  Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true.
  """
  hierarchical: Boolean

  """Array of term ids to include. Default empty array."""
  include: [ID]

  """Array of names to return term(s) for. Default empty."""
  name: [String]

  """Retrieve terms where the name is LIKE the input value. Default empty."""
  nameLike: String

  """
  Array of object IDs. Results will be limited to terms associated with these objects.
  """
  objectIds: [ID]

  """Field(s) to order terms by. Defaults to 'name'."""
  orderby: BlogTermObjectsConnectionOrderbyEnum

  """
  Whether to pad the quantity of a term's children in the quantity of each term's "count" object variable. Default false.
  """
  padCounts: Boolean

  """Parent term ID to retrieve direct-child terms of. Default empty."""
  parent: Int

  """
  Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty.
  """
  search: String

  """
  Default false. If true, only the items connected to the source item will be returned. If false, all items will be returned regardless of connection to the source
  """
  shouldOnlyIncludeConnectedItems: Boolean

  """
  Default false. If true, the connection will be output in a flat list instead of the hierarchical list. So child terms will be output in the same level as the parent terms
  """
  shouldOutputInFlatList: Boolean

  """Array of slugs to return term(s) for. Default empty."""
  slug: [String]

  """Array of term taxonomy IDs, to match when querying terms."""
  termTaxonomId: [ID]

  """Whether to prime meta caches for matched terms. Default true."""
  updateTermMetaCache: Boolean
}

"""Details for labels of the PostType"""
type BlogPostTypeLabelDetails {
  """Default is ‘Add New’ for both hierarchical and non-hierarchical types."""
  addNew: String @deprecated(reason: "")

  """Label for adding a new singular item."""
  addNewItem: String @deprecated(reason: "")

  """Label to signify all items in a submenu link."""
  allItems: String @deprecated(reason: "")

  """Label for archives in nav menus"""
  archives: String @deprecated(reason: "")

  """Label for the attributes meta box."""
  attributes: String @deprecated(reason: "")

  """Label for editing a singular item."""
  editItem: String @deprecated(reason: "")

  """Label for the Featured Image meta box title."""
  featuredImage: String @deprecated(reason: "")

  """Label for the table views hidden heading."""
  filterItemsList: String @deprecated(reason: "")

  """Label for the media frame button."""
  insertIntoItem: String @deprecated(reason: "")

  """Label for the table hidden heading."""
  itemsList: String @deprecated(reason: "")

  """Label for the table pagination hidden heading."""
  itemsListNavigation: String @deprecated(reason: "")

  """Label for the menu name."""
  menuName: String @deprecated(reason: "")

  """General name for the post type, usually plural."""
  name: String @deprecated(reason: "")

  """Label for the new item page title."""
  newItem: String @deprecated(reason: "")

  """Label used when no items are found."""
  notFound: String @deprecated(reason: "")

  """Label used when no items are in the trash."""
  notFoundInTrash: String @deprecated(reason: "")

  """Label used to prefix parents of hierarchical items."""
  parentItemColon: String @deprecated(reason: "")

  """Label for removing the featured image."""
  removeFeaturedImage: String @deprecated(reason: "")

  """Label for searching plural items."""
  searchItems: String @deprecated(reason: "")

  """Label for setting the featured image."""
  setFeaturedImage: String @deprecated(reason: "")

  """Name for one object of this post type."""
  singularName: String @deprecated(reason: "")

  """Label for the media frame filter."""
  uploadedToThisItem: String @deprecated(reason: "")

  """Label in the media frame for using a featured image."""
  useFeaturedImage: String @deprecated(reason: "")

  """Label for viewing a singular item."""
  viewItem: String @deprecated(reason: "")

  """Label for viewing post type archives."""
  viewItems: String @deprecated(reason: "")
}

"""Field Group"""
type BlogPost_Authoroverride {
  fieldGroupName: String @deprecated(reason: "")
  title: String @deprecated(reason: "")
  username: String @deprecated(reason: "")
}

"""Field Group"""
type BlogPost_Marketing {
  """Who does this post most target?"""
  audience: String @deprecated(reason: "")
  fieldGroupName: String @deprecated(reason: "")
}

"""The reading setting type"""
type BlogReadingSettings {
  """Blog pages show at most."""
  postsPerPage: Int @deprecated(reason: "")
}

"""Input for the registerUser mutation"""
input BlogRegisterUserInput {
  """User's AOL IM account."""
  aim: String
  clientMutationId: String!

  """A string containing content about the user."""
  description: String

  """
  A string that will be shown on the site. Defaults to user's username. It is likely that you will want to change this, for both appearance and security through obscurity (that is if you dont use and delete the default admin user).
  """
  displayName: String

  """A string containing the user's email address."""
  email: String

  """	The user's first name."""
  firstName: String

  """User's Jabber account."""
  jabber: String

  """The user's last name."""
  lastName: String

  """User's locale."""
  locale: String

  """
  A string that contains a URL-friendly name for the user. The default is the user's username.
  """
  nicename: String

  """The user's nickname, defaults to the user's username."""
  nickname: String

  """A string that contains the plain text password for the user."""
  password: String

  """The date the user registered. Format is Y-m-d H:i:s."""
  registered: String

  """
  A string for whether to enable the rich editor or not. False if not empty.
  """
  richEditing: String

  """A string that contains the user's username."""
  username: String!

  """A string containing the user's URL for the user's web site."""
  websiteUrl: String

  """User's Yahoo IM account."""
  yim: String
}

"""The payload for the registerUser mutation"""
type BlogRegisterUserPayload {
  clientMutationId: String! @deprecated(reason: "")
  user: BlogUser @deprecated(reason: "")
}

"""
The logical relation between each item in the array when there are more than one.
"""
enum BlogRelationEnum {
  AND
  OR
}

"""Input for the resetUserPassword mutation"""
input BlogResetUserPasswordInput {
  clientMutationId: String!

  """Password reset key"""
  key: String

  """The user's login (username)."""
  login: String

  """The new password."""
  password: String
}

"""The payload for the resetUserPassword mutation"""
type BlogResetUserPasswordPayload {
  clientMutationId: String! @deprecated(reason: "")
  user: BlogUser @deprecated(reason: "")
}

"""Input for the restoreComment mutation"""
input BlogRestoreCommentInput {
  clientMutationId: String!

  """The ID of the comment to be restored"""
  id: ID!
}

"""The payload for the restoreComment mutation"""
type BlogRestoreCommentPayload {
  clientMutationId: String! @deprecated(reason: "")

  """The restored comment object"""
  comment: BlogComment @deprecated(reason: "")

  """The ID of the restored comment"""
  restoredId: ID @deprecated(reason: "")
}

type BlogRootMutation {
  """The payload for the createComment mutation"""
  createComment(
    """Input for the createComment mutation"""
    input: BlogCreateCommentInput!
  ): BlogCreateCommentPayload @deprecated(reason: "")
}

type BlogRootQuery {
  """An object of the post Type. """
  post(id: ID!, idType: BlogPostIdType): BlogPost @deprecated(reason: "")

  """Connection between the RootQuery type and the post type"""
  posts(
    """The number of items to return after the referenced "after" cursor"""
    first: Int
    last: Int

    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String

    """Arguments for filtering the connection"""
    where: BlogRootQueryToPostConnectionWhereArgs
  ): BlogRootQueryToPostConnection @deprecated(reason: "")
}

"""Connection between the RootQuery type and the category type"""
type BlogRootQueryToCategoryConnection {
  """Edges for the RootQueryToCategoryConnection connection"""
  edges: [BlogRootQueryToCategoryConnectionEdge] @deprecated(reason: "")

  """The nodes of the connection, without the edges"""
  nodes: [BlogCategory] @deprecated(reason: "")

  """Information about pagination in a connection."""
  pageInfo: BlogWPPageInfo @deprecated(reason: "")
}

"""An edge in a connection"""
type BlogRootQueryToCategoryConnectionEdge {
  """A cursor for use in pagination"""
  cursor: String @deprecated(reason: "")

  """The item at the end of the edge"""
  node: BlogCategory @deprecated(reason: "")
}

"""Arguments for filtering the RootQueryToCategoryConnection connection"""
input BlogRootQueryToCategoryConnectionWhereArgs {
  """
  Unique cache key to be produced when this query is stored in an object cache. Default is 'core'.
  """
  cacheDomain: String

  """
  Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0.
  """
  childOf: Int

  """
  True to limit results to terms that have no children. This parameter has no effect on non-hierarchical taxonomies. Default false.
  """
  childless: Boolean

  """
  Retrieve terms where the description is LIKE the input value. Default empty.
  """
  descriptionLike: String

  """
  Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array.
  """
  exclude: [ID]

  """
  Array of term ids to exclude along with all of their descendant terms. If $include is non-empty, $exclude_tree is ignored. Default empty array.
  """
  excludeTree: [ID]

  """
  Whether to hide terms not assigned to any posts. Accepts true or false. Default false
  """
  hideEmpty: Boolean

  """
  Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true.
  """
  hierarchical: Boolean

  """Array of term ids to include. Default empty array."""
  include: [ID]

  """Array of names to return term(s) for. Default empty."""
  name: [String]

  """Retrieve terms where the name is LIKE the input value. Default empty."""
  nameLike: String

  """
  Array of object IDs. Results will be limited to terms associated with these objects.
  """
  objectIds: [ID]

  """Field(s) to order terms by. Defaults to 'name'."""
  orderby: BlogTermObjectsConnectionOrderbyEnum

  """
  Whether to pad the quantity of a term's children in the quantity of each term's "count" object variable. Default false.
  """
  padCounts: Boolean

  """Parent term ID to retrieve direct-child terms of. Default empty."""
  parent: Int

  """
  Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty.
  """
  search: String

  """
  Default false. If true, only the items connected to the source item will be returned. If false, all items will be returned regardless of connection to the source
  """
  shouldOnlyIncludeConnectedItems: Boolean

  """
  Default false. If true, the connection will be output in a flat list instead of the hierarchical list. So child terms will be output in the same level as the parent terms
  """
  shouldOutputInFlatList: Boolean

  """Array of slugs to return term(s) for. Default empty."""
  slug: [String]

  """Array of term taxonomy IDs, to match when querying terms."""
  termTaxonomId: [ID]

  """Whether to prime meta caches for matched terms. Default true."""
  updateTermMetaCache: Boolean
}

"""Connection between the RootQuery type and the Comment type"""
type BlogRootQueryToCommentConnection {
  """Edges for the RootQueryToCommentConnection connection"""
  edges: [BlogRootQueryToCommentConnectionEdge] @deprecated(reason: "")

  """The nodes of the connection, without the edges"""
  nodes: [BlogComment] @deprecated(reason: "")

  """Information about pagination in a connection."""
  pageInfo: BlogWPPageInfo @deprecated(reason: "")
}

"""An edge in a connection"""
type BlogRootQueryToCommentConnectionEdge {
  """A cursor for use in pagination"""
  cursor: String @deprecated(reason: "")

  """The item at the end of the edge"""
  node: BlogComment @deprecated(reason: "")
}

"""Arguments for filtering the RootQueryToCommentConnection connection"""
input BlogRootQueryToCommentConnectionWhereArgs {
  """Comment author email address."""
  authorEmail: String

  """Array of author IDs to include comments for."""
  authorIn: [ID]

  """Array of author IDs to exclude comments for."""
  authorNotIn: [ID]

  """Comment author URL."""
  authorUrl: String

  """Array of comment IDs to include."""
  commentIn: [ID]

  """
  Array of IDs of users whose unapproved comments will be returned by the
  							query regardless of status.
  """
  commentNotIn: [ID]

  """Include comments of a given type."""
  commentType: String

  """Include comments from a given array of comment types."""
  commentTypeIn: [String]

  """Exclude comments from a given array of comment types."""
  commentTypeNotIn: String

  """Content object author ID to limit results by."""
  contentAuthor: [ID]

  """Array of author IDs to retrieve comments for."""
  contentAuthorIn: [ID]

  """Array of author IDs *not* to retrieve comments for."""
  contentAuthorNotIn: [ID]

  """
  Limit results to those affiliated with a given content object
  							ID.
  """
  contentId: ID

  """
  Array of content object IDs to include affiliated comments
  							for.
  """
  contentIdIn: [ID]

  """
  Array of content object IDs to exclude affiliated comments
  							for.
  """
  contentIdNotIn: [ID]

  """Content object name to retrieve affiliated comments for."""
  contentName: String

  """Content Object parent ID to retrieve affiliated comments for."""
  contentParent: Int

  """
  Content object type or array of types to retrieve affiliated comments for. Pass 'any' to match any value.
  """
  contentType: [BlogContentTypeEnum]

  """
  Array of IDs or email addresses of users whose unapproved comments will be returned by the query regardless of $status. Default empty
  """
  includeUnapproved: [ID]

  """Karma score to retrieve matching comments for."""
  karma: Int

  """The cardinality of the order of the connection"""
  order: BlogOrderEnum

  """Field to order the comments by."""
  orderby: BlogCommentsConnectionOrderbyEnum

  """Parent ID of comment to retrieve children of."""
  parent: Int

  """Array of parent IDs of comments to retrieve children for."""
  parentIn: [ID]

  """
  Array of parent IDs of comments *not* to retrieve children
  							for.
  """
  parentNotIn: [ID]

  """Search term(s) to retrieve matching comments for."""
  search: String

  """Comment status to limit results by."""
  status: String

  """Include comments for a specific user ID."""
  userId: ID
}

"""Connection between the RootQuery type and the ContentNode type"""
type BlogRootQueryToContentNodeConnection {
  """Edges for the RootQueryToContentNodeConnection connection"""
  edges: [BlogRootQueryToContentNodeConnectionEdge] @deprecated(reason: "")

  """The nodes of the connection, without the edges"""
  nodes: [BlogContentNode] @deprecated(reason: "")

  """Information about pagination in a connection."""
  pageInfo: BlogWPPageInfo @deprecated(reason: "")
}

"""An edge in a connection"""
type BlogRootQueryToContentNodeConnectionEdge {
  """A cursor for use in pagination"""
  cursor: String @deprecated(reason: "")

  """The item at the end of the edge"""
  node: BlogContentNode @deprecated(reason: "")
}

"""
Arguments for filtering the RootQueryToContentNodeConnection connection
"""
input BlogRootQueryToContentNodeConnectionWhereArgs {
  """The Types of content to filter"""
  contentTypes: [BlogContentTypeEnum]

  """Filter the connection based on dates"""
  dateQuery: BlogDateQueryInput

  """
  True for objects with passwords; False for objects without passwords; null for all objects with or without passwords
  """
  hasPassword: Boolean

  """Specific ID of the object"""
  id: Int

  """Array of IDs for the objects to retrieve"""
  in: [ID]

  """Get objects with a specific mimeType property"""
  mimeType: BlogMimeTypeEnum

  """Slug / post_name of the object"""
  name: String

  """Specify objects to retrieve. Use slugs"""
  nameIn: [String]

  """
  Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored
  """
  notIn: [ID]

  """What paramater to use to order the objects by."""
  orderby: [BlogPostObjectsConnectionOrderbyInput]

  """Use ID to return only children. Use 0 to return only top-level items"""
  parent: String

  """Specify objects whose parent is in an array"""
  parentIn: [ID]

  """Specify posts whose parent is not in an array"""
  parentNotIn: [ID]

  """Show posts with a specific password."""
  password: String

  """Show Posts based on a keyword search"""
  search: String

  """Title of the object"""
  title: String
}

"""
Connection between the RootQuery type and the ContentRevisionUnion type
"""
type BlogRootQueryToContentRevisionUnionConnection {
  """Edges for the RootQueryToContentRevisionUnionConnection connection"""
  edges: [BlogRootQueryToContentRevisionUnionConnectionEdge] @deprecated(reason: "")

  """The nodes of the connection, without the edges"""
  nodes: [BlogContentRevisionUnion] @deprecated(reason: "")

  """Information about pagination in a connection."""
  pageInfo: BlogWPPageInfo @deprecated(reason: "")
}

"""An edge in a connection"""
type BlogRootQueryToContentRevisionUnionConnectionEdge {
  """A cursor for use in pagination"""
  cursor: String @deprecated(reason: "")

  """The item at the end of the edge"""
  node: BlogContentRevisionUnion @deprecated(reason: "")
}

"""
Arguments for filtering the RootQueryToContentRevisionUnionConnection connection
"""
input BlogRootQueryToContentRevisionUnionConnectionWhereArgs {
  """Filter the connection based on dates"""
  dateQuery: BlogDateQueryInput

  """
  True for objects with passwords; False for objects without passwords; null for all objects with or without passwords
  """
  hasPassword: Boolean

  """Specific ID of the object"""
  id: Int

  """Array of IDs for the objects to retrieve"""
  in: [ID]

  """Get objects with a specific mimeType property"""
  mimeType: BlogMimeTypeEnum

  """Slug / post_name of the object"""
  name: String

  """Specify objects to retrieve. Use slugs"""
  nameIn: [String]

  """
  Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored
  """
  notIn: [ID]

  """What paramater to use to order the objects by."""
  orderby: [BlogPostObjectsConnectionOrderbyInput]

  """Use ID to return only children. Use 0 to return only top-level items"""
  parent: String

  """Specify objects whose parent is in an array"""
  parentIn: [ID]

  """Specify posts whose parent is not in an array"""
  parentNotIn: [ID]

  """Show posts with a specific password."""
  password: String

  """Show Posts based on a keyword search"""
  search: String

  """Title of the object"""
  title: String
}

"""Connection between the RootQuery type and the ContentType type"""
type BlogRootQueryToContentTypeConnection {
  """Edges for the RootQueryToContentTypeConnection connection"""
  edges: [BlogRootQueryToContentTypeConnectionEdge] @deprecated(reason: "")

  """The nodes of the connection, without the edges"""
  nodes: [BlogContentType] @deprecated(reason: "")

  """Information about pagination in a connection."""
  pageInfo: BlogWPPageInfo @deprecated(reason: "")
}

"""An edge in a connection"""
type BlogRootQueryToContentTypeConnectionEdge {
  """A cursor for use in pagination"""
  cursor: String @deprecated(reason: "")

  """The item at the end of the edge"""
  node: BlogContentType @deprecated(reason: "")
}

"""Connection between the RootQuery type and the mediaItem type"""
type BlogRootQueryToMediaItemConnection {
  """Edges for the RootQueryToMediaItemConnection connection"""
  edges: [BlogRootQueryToMediaItemConnectionEdge] @deprecated(reason: "")

  """The nodes of the connection, without the edges"""
  nodes: [BlogMediaItem] @deprecated(reason: "")

  """Information about pagination in a connection."""
  pageInfo: BlogWPPageInfo @deprecated(reason: "")
}

"""An edge in a connection"""
type BlogRootQueryToMediaItemConnectionEdge {
  """A cursor for use in pagination"""
  cursor: String @deprecated(reason: "")

  """The item at the end of the edge"""
  node: BlogMediaItem @deprecated(reason: "")
}

"""Arguments for filtering the RootQueryToMediaItemConnection connection"""
input BlogRootQueryToMediaItemConnectionWhereArgs {
  """
  The user that's connected as the author of the object. Use the userId for the author object.
  """
  author: Int

  """Find objects connected to author(s) in the array of author's userIds"""
  authorIn: [ID]

  """Find objects connected to the author by the author's nicename"""
  authorName: String

  """
  Find objects NOT connected to author(s) in the array of author's userIds
  """
  authorNotIn: [ID]

  """Filter the connection based on dates"""
  dateQuery: BlogDateQueryInput

  """
  True for objects with passwords; False for objects without passwords; null for all objects with or without passwords
  """
  hasPassword: Boolean

  """Specific ID of the object"""
  id: Int

  """Array of IDs for the objects to retrieve"""
  in: [ID]

  """Get objects with a specific mimeType property"""
  mimeType: BlogMimeTypeEnum

  """Slug / post_name of the object"""
  name: String

  """Specify objects to retrieve. Use slugs"""
  nameIn: [String]

  """
  Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored
  """
  notIn: [ID]

  """What paramater to use to order the objects by."""
  orderby: [BlogPostObjectsConnectionOrderbyInput]

  """Use ID to return only children. Use 0 to return only top-level items"""
  parent: String

  """Specify objects whose parent is in an array"""
  parentIn: [ID]

  """Specify posts whose parent is not in an array"""
  parentNotIn: [ID]

  """Show posts with a specific password."""
  password: String

  """Show Posts based on a keyword search"""
  search: String

  """Title of the object"""
  title: String
}

"""Connection between the RootQuery type and the Menu type"""
type BlogRootQueryToMenuConnection {
  """Edges for the RootQueryToMenuConnection connection"""
  edges: [BlogRootQueryToMenuConnectionEdge] @deprecated(reason: "")

  """The nodes of the connection, without the edges"""
  nodes: [BlogMenu] @deprecated(reason: "")

  """Information about pagination in a connection."""
  pageInfo: BlogWPPageInfo @deprecated(reason: "")
}

"""An edge in a connection"""
type BlogRootQueryToMenuConnectionEdge {
  """A cursor for use in pagination"""
  cursor: String @deprecated(reason: "")

  """The item at the end of the edge"""
  node: BlogMenu @deprecated(reason: "")
}

"""Arguments for filtering the RootQueryToMenuConnection connection"""
input BlogRootQueryToMenuConnectionWhereArgs {
  """The ID of the object"""
  id: Int

  """The menu location for the menu being queried"""
  location: BlogMenuLocationEnum

  """The slug of the menu to query items for"""
  slug: String
}

"""Connection between the RootQuery type and the MenuItem type"""
type BlogRootQueryToMenuItemConnection {
  """Edges for the RootQueryToMenuItemConnection connection"""
  edges: [BlogRootQueryToMenuItemConnectionEdge] @deprecated(reason: "")

  """The nodes of the connection, without the edges"""
  nodes: [BlogMenuItem] @deprecated(reason: "")

  """Information about pagination in a connection."""
  pageInfo: BlogWPPageInfo @deprecated(reason: "")
}

"""An edge in a connection"""
type BlogRootQueryToMenuItemConnectionEdge {
  """A cursor for use in pagination"""
  cursor: String @deprecated(reason: "")

  """The item at the end of the edge"""
  node: BlogMenuItem @deprecated(reason: "")
}

"""Arguments for filtering the RootQueryToMenuItemConnection connection"""
input BlogRootQueryToMenuItemConnectionWhereArgs {
  """The ID of the object"""
  id: Int

  """The menu location for the menu being queried"""
  location: BlogMenuLocationEnum
}

"""Connection between the RootQuery type and the page type"""
type BlogRootQueryToPageConnection {
  """Edges for the RootQueryToPageConnection connection"""
  edges: [BlogRootQueryToPageConnectionEdge] @deprecated(reason: "")

  """The nodes of the connection, without the edges"""
  nodes: [BlogPage] @deprecated(reason: "")

  """Information about pagination in a connection."""
  pageInfo: BlogWPPageInfo @deprecated(reason: "")
}

"""An edge in a connection"""
type BlogRootQueryToPageConnectionEdge {
  """A cursor for use in pagination"""
  cursor: String @deprecated(reason: "")

  """The item at the end of the edge"""
  node: BlogPage @deprecated(reason: "")
}

"""Arguments for filtering the RootQueryToPageConnection connection"""
input BlogRootQueryToPageConnectionWhereArgs {
  """
  The user that's connected as the author of the object. Use the userId for the author object.
  """
  author: Int

  """Find objects connected to author(s) in the array of author's userIds"""
  authorIn: [ID]

  """Find objects connected to the author by the author's nicename"""
  authorName: String

  """
  Find objects NOT connected to author(s) in the array of author's userIds
  """
  authorNotIn: [ID]

  """Filter the connection based on dates"""
  dateQuery: BlogDateQueryInput

  """
  True for objects with passwords; False for objects without passwords; null for all objects with or without passwords
  """
  hasPassword: Boolean

  """Specific ID of the object"""
  id: Int

  """Array of IDs for the objects to retrieve"""
  in: [ID]

  """Get objects with a specific mimeType property"""
  mimeType: BlogMimeTypeEnum

  """Slug / post_name of the object"""
  name: String

  """Specify objects to retrieve. Use slugs"""
  nameIn: [String]

  """
  Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored
  """
  notIn: [ID]

  """What paramater to use to order the objects by."""
  orderby: [BlogPostObjectsConnectionOrderbyInput]

  """Use ID to return only children. Use 0 to return only top-level items"""
  parent: String

  """Specify objects whose parent is in an array"""
  parentIn: [ID]

  """Specify posts whose parent is not in an array"""
  parentNotIn: [ID]

  """Show posts with a specific password."""
  password: String

  """Show Posts based on a keyword search"""
  search: String

  """Title of the object"""
  title: String
}

"""Connection between the RootQuery type and the Plugin type"""
type BlogRootQueryToPluginConnection {
  """Edges for the RootQueryToPluginConnection connection"""
  edges: [BlogRootQueryToPluginConnectionEdge] @deprecated(reason: "")

  """The nodes of the connection, without the edges"""
  nodes: [BlogPlugin] @deprecated(reason: "")

  """Information about pagination in a connection."""
  pageInfo: BlogWPPageInfo @deprecated(reason: "")
}

"""An edge in a connection"""
type BlogRootQueryToPluginConnectionEdge {
  """A cursor for use in pagination"""
  cursor: String @deprecated(reason: "")

  """The item at the end of the edge"""
  node: BlogPlugin @deprecated(reason: "")
}

"""Connection between the RootQuery type and the post type"""
type BlogRootQueryToPostConnection {
  """Edges for the RootQueryToPostConnection connection"""
  edges: [BlogRootQueryToPostConnectionEdge] @deprecated(reason: "")

  """The nodes of the connection, without the edges"""
  nodes: [BlogPost] @deprecated(reason: "")

  """Information about pagination in a connection."""
  pageInfo: BlogWPPageInfo @deprecated(reason: "")
}

"""An edge in a connection"""
type BlogRootQueryToPostConnectionEdge {
  """A cursor for use in pagination"""
  cursor: String @deprecated(reason: "")

  """The item at the end of the edge"""
  node: BlogPost @deprecated(reason: "")
}

"""Arguments for filtering the RootQueryToPostConnection connection"""
input BlogRootQueryToPostConnectionWhereArgs {
  """
  The user that's connected as the author of the object. Use the userId for the author object.
  """
  author: Int

  """Find objects connected to author(s) in the array of author's userIds"""
  authorIn: [ID]

  """Find objects connected to the author by the author's nicename"""
  authorName: String

  """
  Find objects NOT connected to author(s) in the array of author's userIds
  """
  authorNotIn: [ID]

  """Category ID"""
  categoryId: Int

  """
  Array of category IDs, used to display objects from one category OR another
  """
  categoryIn: [ID]

  """Use Category Slug"""
  categoryName: String

  """
  Array of category IDs, used to display objects from one category OR another
  """
  categoryNotIn: [ID]

  """Filter the connection based on dates"""
  dateQuery: BlogDateQueryInput

  """
  True for objects with passwords; False for objects without passwords; null for all objects with or without passwords
  """
  hasPassword: Boolean

  """Specific ID of the object"""
  id: Int

  """Array of IDs for the objects to retrieve"""
  in: [ID]

  """Get objects with a specific mimeType property"""
  mimeType: BlogMimeTypeEnum

  """Slug / post_name of the object"""
  name: String

  """Specify objects to retrieve. Use slugs"""
  nameIn: [String]

  """
  Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored
  """
  notIn: [ID]

  """What paramater to use to order the objects by."""
  orderby: [BlogPostObjectsConnectionOrderbyInput]

  """Use ID to return only children. Use 0 to return only top-level items"""
  parent: String

  """Specify objects whose parent is in an array"""
  parentIn: [ID]

  """Specify posts whose parent is not in an array"""
  parentNotIn: [ID]

  """Show posts with a specific password."""
  password: String

  """Show Posts based on a keyword search"""
  search: String

  """Tag Slug"""
  tag: String

  """Use Tag ID"""
  tagId: String

  """Array of tag IDs, used to display objects from one tag OR another"""
  tagIn: [ID]

  """Array of tag IDs, used to display objects from one tag OR another"""
  tagNotIn: [ID]

  """Array of tag slugs, used to display objects from one tag OR another"""
  tagSlugAnd: [String]

  """Array of tag slugs, used to exclude objects in specified tags"""
  tagSlugIn: [String]

  """Title of the object"""
  title: String
}

"""Connection between the RootQuery type and the postFormat type"""
type BlogRootQueryToPostFormatConnection {
  """Edges for the RootQueryToPostFormatConnection connection"""
  edges: [BlogRootQueryToPostFormatConnectionEdge] @deprecated(reason: "")

  """The nodes of the connection, without the edges"""
  nodes: [BlogPostFormat] @deprecated(reason: "")

  """Information about pagination in a connection."""
  pageInfo: BlogWPPageInfo @deprecated(reason: "")
}

"""An edge in a connection"""
type BlogRootQueryToPostFormatConnectionEdge {
  """A cursor for use in pagination"""
  cursor: String @deprecated(reason: "")

  """The item at the end of the edge"""
  node: BlogPostFormat @deprecated(reason: "")
}

"""Arguments for filtering the RootQueryToPostFormatConnection connection"""
input BlogRootQueryToPostFormatConnectionWhereArgs {
  """
  Unique cache key to be produced when this query is stored in an object cache. Default is 'core'.
  """
  cacheDomain: String

  """
  Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0.
  """
  childOf: Int

  """
  True to limit results to terms that have no children. This parameter has no effect on non-hierarchical taxonomies. Default false.
  """
  childless: Boolean

  """
  Retrieve terms where the description is LIKE the input value. Default empty.
  """
  descriptionLike: String

  """
  Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array.
  """
  exclude: [ID]

  """
  Array of term ids to exclude along with all of their descendant terms. If $include is non-empty, $exclude_tree is ignored. Default empty array.
  """
  excludeTree: [ID]

  """
  Whether to hide terms not assigned to any posts. Accepts true or false. Default false
  """
  hideEmpty: Boolean

  """
  Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true.
  """
  hierarchical: Boolean

  """Array of term ids to include. Default empty array."""
  include: [ID]

  """Array of names to return term(s) for. Default empty."""
  name: [String]

  """Retrieve terms where the name is LIKE the input value. Default empty."""
  nameLike: String

  """
  Array of object IDs. Results will be limited to terms associated with these objects.
  """
  objectIds: [ID]

  """Field(s) to order terms by. Defaults to 'name'."""
  orderby: BlogTermObjectsConnectionOrderbyEnum

  """
  Whether to pad the quantity of a term's children in the quantity of each term's "count" object variable. Default false.
  """
  padCounts: Boolean

  """Parent term ID to retrieve direct-child terms of. Default empty."""
  parent: Int

  """
  Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty.
  """
  search: String

  """
  Default false. If true, only the items connected to the source item will be returned. If false, all items will be returned regardless of connection to the source
  """
  shouldOnlyIncludeConnectedItems: Boolean

  """
  Default false. If true, the connection will be output in a flat list instead of the hierarchical list. So child terms will be output in the same level as the parent terms
  """
  shouldOutputInFlatList: Boolean

  """Array of slugs to return term(s) for. Default empty."""
  slug: [String]

  """Array of term taxonomy IDs, to match when querying terms."""
  termTaxonomId: [ID]

  """Whether to prime meta caches for matched terms. Default true."""
  updateTermMetaCache: Boolean
}

"""Connection between the RootQuery type and the tag type"""
type BlogRootQueryToTagConnection {
  """Edges for the RootQueryToTagConnection connection"""
  edges: [BlogRootQueryToTagConnectionEdge] @deprecated(reason: "")

  """The nodes of the connection, without the edges"""
  nodes: [BlogTag] @deprecated(reason: "")

  """Information about pagination in a connection."""
  pageInfo: BlogWPPageInfo @deprecated(reason: "")
}

"""An edge in a connection"""
type BlogRootQueryToTagConnectionEdge {
  """A cursor for use in pagination"""
  cursor: String @deprecated(reason: "")

  """The item at the end of the edge"""
  node: BlogTag @deprecated(reason: "")
}

"""Arguments for filtering the RootQueryToTagConnection connection"""
input BlogRootQueryToTagConnectionWhereArgs {
  """
  Unique cache key to be produced when this query is stored in an object cache. Default is 'core'.
  """
  cacheDomain: String

  """
  Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0.
  """
  childOf: Int

  """
  True to limit results to terms that have no children. This parameter has no effect on non-hierarchical taxonomies. Default false.
  """
  childless: Boolean

  """
  Retrieve terms where the description is LIKE the input value. Default empty.
  """
  descriptionLike: String

  """
  Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array.
  """
  exclude: [ID]

  """
  Array of term ids to exclude along with all of their descendant terms. If $include is non-empty, $exclude_tree is ignored. Default empty array.
  """
  excludeTree: [ID]

  """
  Whether to hide terms not assigned to any posts. Accepts true or false. Default false
  """
  hideEmpty: Boolean

  """
  Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true.
  """
  hierarchical: Boolean

  """Array of term ids to include. Default empty array."""
  include: [ID]

  """Array of names to return term(s) for. Default empty."""
  name: [String]

  """Retrieve terms where the name is LIKE the input value. Default empty."""
  nameLike: String

  """
  Array of object IDs. Results will be limited to terms associated with these objects.
  """
  objectIds: [ID]

  """Field(s) to order terms by. Defaults to 'name'."""
  orderby: BlogTermObjectsConnectionOrderbyEnum

  """
  Whether to pad the quantity of a term's children in the quantity of each term's "count" object variable. Default false.
  """
  padCounts: Boolean

  """Parent term ID to retrieve direct-child terms of. Default empty."""
  parent: Int

  """
  Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty.
  """
  search: String

  """
  Default false. If true, only the items connected to the source item will be returned. If false, all items will be returned regardless of connection to the source
  """
  shouldOnlyIncludeConnectedItems: Boolean

  """
  Default false. If true, the connection will be output in a flat list instead of the hierarchical list. So child terms will be output in the same level as the parent terms
  """
  shouldOutputInFlatList: Boolean

  """Array of slugs to return term(s) for. Default empty."""
  slug: [String]

  """Array of term taxonomy IDs, to match when querying terms."""
  termTaxonomId: [ID]

  """Whether to prime meta caches for matched terms. Default true."""
  updateTermMetaCache: Boolean
}

"""Connection between the RootQuery type and the Taxonomy type"""
type BlogRootQueryToTaxonomyConnection {
  """Edges for the RootQueryToTaxonomyConnection connection"""
  edges: [BlogRootQueryToTaxonomyConnectionEdge] @deprecated(reason: "")

  """The nodes of the connection, without the edges"""
  nodes: [BlogTaxonomy] @deprecated(reason: "")

  """Information about pagination in a connection."""
  pageInfo: BlogWPPageInfo @deprecated(reason: "")
}

"""An edge in a connection"""
type BlogRootQueryToTaxonomyConnectionEdge {
  """A cursor for use in pagination"""
  cursor: String @deprecated(reason: "")

  """The item at the end of the edge"""
  node: BlogTaxonomy @deprecated(reason: "")
}

"""Connection between the RootQuery type and the TermNode type"""
type BlogRootQueryToTermNodeConnection {
  """Edges for the RootQueryToTermNodeConnection connection"""
  edges: [BlogRootQueryToTermNodeConnectionEdge] @deprecated(reason: "")

  """The nodes of the connection, without the edges"""
  nodes: [BlogTermNode] @deprecated(reason: "")

  """Information about pagination in a connection."""
  pageInfo: BlogWPPageInfo @deprecated(reason: "")
}

"""An edge in a connection"""
type BlogRootQueryToTermNodeConnectionEdge {
  """A cursor for use in pagination"""
  cursor: String @deprecated(reason: "")

  """The item at the end of the edge"""
  node: BlogTermNode @deprecated(reason: "")
}

"""Arguments for filtering the RootQueryToTermNodeConnection connection"""
input BlogRootQueryToTermNodeConnectionWhereArgs {
  """
  Unique cache key to be produced when this query is stored in an object cache. Default is 'core'.
  """
  cacheDomain: String

  """
  Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0.
  """
  childOf: Int

  """
  True to limit results to terms that have no children. This parameter has no effect on non-hierarchical taxonomies. Default false.
  """
  childless: Boolean

  """
  Retrieve terms where the description is LIKE the input value. Default empty.
  """
  descriptionLike: String

  """
  Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array.
  """
  exclude: [ID]

  """
  Array of term ids to exclude along with all of their descendant terms. If $include is non-empty, $exclude_tree is ignored. Default empty array.
  """
  excludeTree: [ID]

  """
  Whether to hide terms not assigned to any posts. Accepts true or false. Default false
  """
  hideEmpty: Boolean

  """
  Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true.
  """
  hierarchical: Boolean

  """Array of term ids to include. Default empty array."""
  include: [ID]

  """Array of names to return term(s) for. Default empty."""
  name: [String]

  """Retrieve terms where the name is LIKE the input value. Default empty."""
  nameLike: String

  """
  Array of object IDs. Results will be limited to terms associated with these objects.
  """
  objectIds: [ID]

  """Field(s) to order terms by. Defaults to 'name'."""
  orderby: BlogTermObjectsConnectionOrderbyEnum

  """
  Whether to pad the quantity of a term's children in the quantity of each term's "count" object variable. Default false.
  """
  padCounts: Boolean

  """Parent term ID to retrieve direct-child terms of. Default empty."""
  parent: Int

  """
  Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty.
  """
  search: String

  """
  Default false. If true, only the items connected to the source item will be returned. If false, all items will be returned regardless of connection to the source
  """
  shouldOnlyIncludeConnectedItems: Boolean

  """
  Default false. If true, the connection will be output in a flat list instead of the hierarchical list. So child terms will be output in the same level as the parent terms
  """
  shouldOutputInFlatList: Boolean

  """Array of slugs to return term(s) for. Default empty."""
  slug: [String]

  """The Taxonomy to filter terms by"""
  taxonomies: [BlogTaxonomyEnum]

  """Array of term taxonomy IDs, to match when querying terms."""
  termTaxonomId: [ID]

  """Whether to prime meta caches for matched terms. Default true."""
  updateTermMetaCache: Boolean
}

"""Connection between the RootQuery type and the Theme type"""
type BlogRootQueryToThemeConnection {
  """Edges for the RootQueryToThemeConnection connection"""
  edges: [BlogRootQueryToThemeConnectionEdge] @deprecated(reason: "")

  """The nodes of the connection, without the edges"""
  nodes: [BlogTheme] @deprecated(reason: "")

  """Information about pagination in a connection."""
  pageInfo: BlogWPPageInfo @deprecated(reason: "")
}

"""An edge in a connection"""
type BlogRootQueryToThemeConnectionEdge {
  """A cursor for use in pagination"""
  cursor: String @deprecated(reason: "")

  """The item at the end of the edge"""
  node: BlogTheme @deprecated(reason: "")
}

"""Connection between the RootQuery type and the User type"""
type BlogRootQueryToUserConnection {
  """Edges for the RootQueryToUserConnection connection"""
  edges: [BlogRootQueryToUserConnectionEdge] @deprecated(reason: "")

  """The nodes of the connection, without the edges"""
  nodes: [BlogUser] @deprecated(reason: "")

  """Information about pagination in a connection."""
  pageInfo: BlogWPPageInfo @deprecated(reason: "")
}

"""An edge in a connection"""
type BlogRootQueryToUserConnectionEdge {
  """A cursor for use in pagination"""
  cursor: String @deprecated(reason: "")

  """The item at the end of the edge"""
  node: BlogUser @deprecated(reason: "")
}

"""Arguments for filtering the RootQueryToUserConnection connection"""
input BlogRootQueryToUserConnectionWhereArgs {
  """Array of userIds to exclude."""
  exclude: [Int]

  """
  Pass an array of post types to filter results to users who have published posts in those post types.
  """
  hasPublishedPosts: [BlogContentTypeEnum]

  """Array of userIds to include."""
  include: [Int]

  """The user login."""
  login: String

  """
  An array of logins to include. Users matching one of these logins will be included in results.
  """
  loginIn: Int

  """
  An array of logins to exclude. Users matching one of these logins will not be included in results.
  """
  loginNotIn: Int

  """The user nicename."""
  nicename: String

  """
  An array of nicenames to include. Users matching one of these nicenames will be included in results.
  """
  nicenameIn: [String]

  """
  An array of nicenames to exclude. Users matching one of these nicenames will not be included in results.
  """
  nicenameNotIn: [String]

  """What paramater to use to order the objects by."""
  orderby: [BlogUsersConnectionOrderbyInput]

  """
  An array of role names that users must match to be included in results. Note that this is an inclusive list: users must match *each* role.
  """
  role: BlogUserRoleEnum

  """
  An array of role names. Matched users must have at least one of these roles.
  """
  roleIn: [BlogUserRoleEnum]

  """
  An array of role names to exclude. Users matching one or more of these roles will not be included in results.
  """
  roleNotIn: [BlogUserRoleEnum]

  """
  Search keyword. Searches for possible string matches on columns. When "searchColumns" is left empty, it tries to determine which column to search in based on search string.
  """
  search: String

  """
  Array of column names to be searched. Accepts 'ID', 'login', 'nicename', 'email', 'url'.
  """
  searchColumns: [String]
}

"""Connection between the RootQuery type and the UserRole type"""
type BlogRootQueryToUserRoleConnection {
  """Edges for the RootQueryToUserRoleConnection connection"""
  edges: [BlogRootQueryToUserRoleConnectionEdge] @deprecated(reason: "")

  """The nodes of the connection, without the edges"""
  nodes: [BlogUserRole] @deprecated(reason: "")

  """Information about pagination in a connection."""
  pageInfo: BlogWPPageInfo @deprecated(reason: "")
}

"""An edge in a connection"""
type BlogRootQueryToUserRoleConnectionEdge {
  """A cursor for use in pagination"""
  cursor: String @deprecated(reason: "")

  """The item at the end of the edge"""
  node: BlogUserRole @deprecated(reason: "")
}

"""Input for the sendPasswordResetEmail mutation"""
input BlogSendPasswordResetEmailInput {
  clientMutationId: String!

  """A string that contains the user's username or email address."""
  username: String!
}

"""The payload for the sendPasswordResetEmail mutation"""
type BlogSendPasswordResetEmailPayload {
  clientMutationId: String! @deprecated(reason: "")

  """The user that the password reset email was sent to"""
  user: BlogUser @deprecated(reason: "")
}

"""All of the registered settings"""
type BlogSettings {
  """Allow people to submit comments on new posts."""
  discussionSettingsDefaultCommentStatus: String @deprecated(reason: "")

  """
  Allow link notifications from other blogs (pingbacks and trackbacks) on new articles.
  """
  discussionSettingsDefaultPingStatus: String @deprecated(reason: "")

  """A date format for all date strings."""
  generalSettingsDateFormat: String @deprecated(reason: "")

  """Site tagline."""
  generalSettingsDescription: String @deprecated(reason: "")

  """This address is used for admin purposes, like new user notification."""
  generalSettingsEmail: String @deprecated(reason: "")

  """WordPress locale code."""
  generalSettingsLanguage: String @deprecated(reason: "")

  """A day number of the week that the week should start on."""
  generalSettingsStartOfWeek: Int @deprecated(reason: "")

  """A time format for all time strings."""
  generalSettingsTimeFormat: String @deprecated(reason: "")

  """A city in the same timezone as you."""
  generalSettingsTimezone: String @deprecated(reason: "")

  """Site title."""
  generalSettingsTitle: String @deprecated(reason: "")

  """Site URL."""
  generalSettingsUrl: String @deprecated(reason: "")

  """Blog pages show at most."""
  readingSettingsPostsPerPage: Int @deprecated(reason: "")

  """Default post category."""
  writingSettingsDefaultCategory: Int @deprecated(reason: "")

  """Default post format."""
  writingSettingsDefaultPostFormat: String @deprecated(reason: "")

  """Convert emoticons like :-) and :-P to graphics on display."""
  writingSettingsUseSmilies: Boolean @deprecated(reason: "")
}

"""The tag type"""
type BlogTag implements BlogNode & BlogTermNode & BlogUniformResourceIdentifiable {
  """The number of objects connected to the object"""
  count: Int @deprecated(reason: "")

  """Identifies the primary key from the database."""
  databaseId: Int! @deprecated(reason: "")

  """The description of the object"""
  description: String @deprecated(reason: "")

  """The globally unique ID for the object"""
  id: ID! @deprecated(reason: "")

  """Whether the object is restricted from the current viewer"""
  isRestricted: Boolean @deprecated(reason: "")

  """The link to the term"""
  link: String @deprecated(reason: "")

  """The human friendly name of the object."""
  name: String @deprecated(reason: "")

  """Connection between the tag type and the post type"""
  posts(
    """The number of items to return after the referenced "after" cursor"""
    first: Int
    last: Int

    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String

    """Arguments for filtering the connection"""
    where: BlogTagToPostConnectionWhereArgs
  ): BlogTagToPostConnection @deprecated(reason: "")

  """An alphanumeric identifier for the object unique to its type."""
  slug: String @deprecated(reason: "")

  """The id field matches the WP_Post-&gt;ID field."""
  tagId: Int @deprecated(reason: "Deprecated in favor of databaseId")

  """Connection between the tag type and the Taxonomy type"""
  taxonomy: BlogTagToTaxonomyConnection @deprecated(reason: "")

  """The ID of the term group that this term object belongs to"""
  termGroupId: Int @deprecated(reason: "")

  """The taxonomy ID that the object is associated with"""
  termTaxonomyId: Int @deprecated(reason: "")

  """The unique resource identifier path"""
  uri: String! @deprecated(reason: "")
}

"""The Type of Identifier used to fetch a single resource. Default is ID."""
enum BlogTagIdType {
  """The Database ID for the node"""
  DATABASE_ID

  """The hashed Global ID"""
  ID

  """The name of the node"""
  NAME

  """Url friendly name of the node"""
  SLUG

  """The URI for the node"""
  URI
}

"""Connection between the tag type and the post type"""
type BlogTagToPostConnection {
  """Edges for the TagToPostConnection connection"""
  edges: [BlogTagToPostConnectionEdge] @deprecated(reason: "")

  """The nodes of the connection, without the edges"""
  nodes: [BlogPost] @deprecated(reason: "")

  """Information about pagination in a connection."""
  pageInfo: BlogWPPageInfo @deprecated(reason: "")
}

"""An edge in a connection"""
type BlogTagToPostConnectionEdge {
  """A cursor for use in pagination"""
  cursor: String @deprecated(reason: "")

  """The item at the end of the edge"""
  node: BlogPost @deprecated(reason: "")
}

"""Arguments for filtering the TagToPostConnection connection"""
input BlogTagToPostConnectionWhereArgs {
  """
  The user that's connected as the author of the object. Use the userId for the author object.
  """
  author: Int

  """Find objects connected to author(s) in the array of author's userIds"""
  authorIn: [ID]

  """Find objects connected to the author by the author's nicename"""
  authorName: String

  """
  Find objects NOT connected to author(s) in the array of author's userIds
  """
  authorNotIn: [ID]

  """Category ID"""
  categoryId: Int

  """
  Array of category IDs, used to display objects from one category OR another
  """
  categoryIn: [ID]

  """Use Category Slug"""
  categoryName: String

  """
  Array of category IDs, used to display objects from one category OR another
  """
  categoryNotIn: [ID]

  """Filter the connection based on dates"""
  dateQuery: BlogDateQueryInput

  """
  True for objects with passwords; False for objects without passwords; null for all objects with or without passwords
  """
  hasPassword: Boolean

  """Specific ID of the object"""
  id: Int

  """Array of IDs for the objects to retrieve"""
  in: [ID]

  """Get objects with a specific mimeType property"""
  mimeType: BlogMimeTypeEnum

  """Slug / post_name of the object"""
  name: String

  """Specify objects to retrieve. Use slugs"""
  nameIn: [String]

  """
  Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored
  """
  notIn: [ID]

  """What paramater to use to order the objects by."""
  orderby: [BlogPostObjectsConnectionOrderbyInput]

  """Use ID to return only children. Use 0 to return only top-level items"""
  parent: String

  """Specify objects whose parent is in an array"""
  parentIn: [ID]

  """Specify posts whose parent is not in an array"""
  parentNotIn: [ID]

  """Show posts with a specific password."""
  password: String

  """Show Posts based on a keyword search"""
  search: String

  """Tag Slug"""
  tag: String

  """Use Tag ID"""
  tagId: String

  """Array of tag IDs, used to display objects from one tag OR another"""
  tagIn: [ID]

  """Array of tag IDs, used to display objects from one tag OR another"""
  tagNotIn: [ID]

  """Array of tag slugs, used to display objects from one tag OR another"""
  tagSlugAnd: [String]

  """Array of tag slugs, used to exclude objects in specified tags"""
  tagSlugIn: [String]

  """Title of the object"""
  title: String
}

"""Connection between the tag type and the Taxonomy type"""
type BlogTagToTaxonomyConnection {
  """The nodes of the connection, without the edges"""
  node: BlogTaxonomy @deprecated(reason: "")
}

"""A taxonomy object"""
type BlogTaxonomy implements BlogNode {
  """A list of Post Types associated with the taxonomy"""
  connectedPostTypeNames(
    """Select which post types to limit the results to"""
    types: [BlogContentTypeEnum]
  ): [String] @deprecated(reason: "")

  """List of Post Types connected to the Taxonomy"""
  connectedPostTypes(
    """Select which post types to limit the results to"""
    types: [BlogContentTypeEnum]
  ): [BlogContentType] @deprecated(reason: "")

  """
  Description of the taxonomy. This field is equivalent to WP_Taxonomy-&gt;description
  """
  description: String @deprecated(reason: "")

  """The plural name of the post type within the GraphQL Schema."""
  graphqlPluralName: String @deprecated(reason: "")

  """The singular name of the post type within the GraphQL Schema."""
  graphqlSingleName: String @deprecated(reason: "")

  """Whether the taxonomy is hierarchical"""
  hierarchical: Boolean @deprecated(reason: "")

  """The globally unique identifier of the taxonomy object."""
  id: ID! @deprecated(reason: "")

  """Whether the object is restricted from the current viewer"""
  isRestricted: Boolean @deprecated(reason: "")

  """Name of the taxonomy shown in the menu. Usually plural."""
  label: String @deprecated(reason: "")

  """
  The display name of the taxonomy. This field is equivalent to WP_Taxonomy-&gt;label
  """
  name: String @deprecated(reason: "")

  """Whether the taxonomy is publicly queryable"""
  public: Boolean @deprecated(reason: "")

  """
  Name of content type to diplay in REST API &quot;wp/v2&quot; namespace.
  """
  restBase: String @deprecated(reason: "")

  """The REST Controller class assigned to handling this content type."""
  restControllerClass: String @deprecated(reason: "")

  """
  Whether to show the taxonomy as part of a tag cloud widget. This field is equivalent to WP_Taxonomy-&gt;show_tagcloud
  """
  showCloud: Boolean @deprecated(reason: "")

  """
  Whether to display a column for the taxonomy on its post type listing screens.
  """
  showInAdminColumn: Boolean @deprecated(reason: "")

  """Whether to add the post type to the GraphQL Schema."""
  showInGraphql: Boolean @deprecated(reason: "")

  """Whether to show the taxonomy in the admin menu"""
  showInMenu: Boolean @deprecated(reason: "")

  """Whether the taxonomy is available for selection in navigation menus."""
  showInNavMenus: Boolean @deprecated(reason: "")

  """Whether to show the taxonomy in the quick/bulk edit panel."""
  showInQuickEdit: Boolean @deprecated(reason: "")

  """
  Whether to add the post type route in the REST API &quot;wp/v2&quot; namespace.
  """
  showInRest: Boolean @deprecated(reason: "")

  """
  Whether to generate and allow a UI for managing terms in this taxonomy in the admin
  """
  showUi: Boolean @deprecated(reason: "")
}

"""Allowed taxonomies"""
enum BlogTaxonomyEnum {
  CATEGORY
  POSTFORMAT
  TAG
}

"""
The Type of Identifier used to fetch a single Taxonomy node. To be used along with the "id" field. Default is "ID".
"""
enum BlogTaxonomyIdTypeEnum {
  """The globally unique ID"""
  ID

  """The name of the taxonomy"""
  NAME
}

"""
Terms are nodes within a Taxonomy, used to group and relate other nodes.
"""
interface BlogTermNode {
  """The number of objects connected to the object"""
  count: Int

  """Identifies the primary key from the database."""
  databaseId: Int!

  """The description of the object"""
  description: String

  """Unique identifier for the term"""
  id: ID!

  """Whether the object is restricted from the current viewer"""
  isRestricted: Boolean

  """The link to the term"""
  link: String

  """The human friendly name of the object."""
  name: String

  """An alphanumeric identifier for the object unique to its type."""
  slug: String

  """The ID of the term group that this term object belongs to"""
  termGroupId: Int

  """The taxonomy ID that the object is associated with"""
  termTaxonomyId: Int

  """The unique resource identifier path"""
  uri: String!
}

"""
The Type of Identifier used to fetch a single resource. Default is "ID". To be used along with the "id" field.
"""
enum BlogTermNodeIdTypeEnum {
  """The Database ID for the node"""
  DATABASE_ID

  """The hashed Global ID"""
  ID

  """The name of the node"""
  NAME

  """Url friendly name of the node"""
  SLUG

  """The URI for the node"""
  URI
}

union BlogTermObjectUnion = BlogCategory | BlogTag | BlogPostFormat

"""Options for ordering the connection by"""
enum BlogTermObjectsConnectionOrderbyEnum {
  COUNT
  DESCRIPTION
  NAME
  SLUG
  TERM_GROUP
  TERM_ID
  TERM_ORDER
}

"""A theme object"""
type BlogTheme implements BlogNode {
  """
  Name of the theme author(s), could also be a company name. This field is equivalent to WP_Theme-&gt;get( &quot;Author&quot; ).
  """
  author: String @deprecated(reason: "")

  """
  URI for the author/company website. This field is equivalent to WP_Theme-&gt;get( &quot;AuthorURI&quot; ).
  """
  authorUri: String @deprecated(reason: "")

  """
  The description of the theme. This field is equivalent to WP_Theme-&gt;get( &quot;Description&quot; ).
  """
  description: String @deprecated(reason: "")

  """The globally unique identifier of the theme object."""
  id: ID! @deprecated(reason: "")

  """Whether the object is restricted from the current viewer"""
  isRestricted: Boolean @deprecated(reason: "")

  """
  Display name of the theme. This field is equivalent to WP_Theme-&gt;get( &quot;Name&quot; ).
  """
  name: String @deprecated(reason: "")

  """
  The URL of the screenshot for the theme. The screenshot is intended to give an overview of what the theme looks like. This field is equivalent to WP_Theme-&gt;get_screenshot().
  """
  screenshot: String @deprecated(reason: "")

  """
  The theme slug is used to internally match themes. Theme slugs can have subdirectories like: my-theme/sub-theme. This field is equivalent to WP_Theme-&gt;get_stylesheet().
  """
  slug: String @deprecated(reason: "")

  """
  URI for the author/company website. This field is equivalent to WP_Theme-&gt;get( &quot;Tags&quot; ).
  """
  tags: [String] @deprecated(reason: "")

  """
  A URI if the theme has a website associated with it. The Theme URI is handy for directing users to a theme site for support etc. This field is equivalent to WP_Theme-&gt;get( &quot;ThemeURI&quot; ).
  """
  themeUri: String @deprecated(reason: "")

  """
  The current version of the theme. This field is equivalent to WP_Theme-&gt;get( &quot;Version&quot; ).
  """
  version: Float @deprecated(reason: "")
}

"""Any node that has a URI"""
interface BlogUniformResourceIdentifiable {
  """The unique resource identifier path"""
  databaseId: Int!

  """The unique resource identifier path"""
  id: ID!

  """The unique resource identifier path"""
  uri: String!
}

"""Input for the UpdateCategory mutation"""
input BlogUpdateCategoryInput {
  """The slug that the category will be an alias of"""
  aliasOf: String
  clientMutationId: String!

  """The description of the category object"""
  description: String

  """The ID of the category object to update"""
  id: ID!

  """The name of the category object to mutate"""
  name: String

  """The ID of the category that should be set as the parent"""
  parentId: ID

  """
  If this argument exists then the slug will be checked to see if it is not an existing valid term. If that check succeeds (it is not a valid term), then it is added and the term id is given. If it fails, then a check is made to whether the taxonomy is hierarchical and the parent argument is not empty. If the second check succeeds, the term will be inserted and the term id will be given. If the slug argument is empty, then it will be calculated from the term name.
  """
  slug: String
}

"""The payload for the UpdateCategory mutation"""
type BlogUpdateCategoryPayload {
  """The created category"""
  category: BlogCategory @deprecated(reason: "")
  clientMutationId: String! @deprecated(reason: "")
}

"""Input for the updateComment mutation"""
input BlogUpdateCommentInput {
  """User agent used to post the comment."""
  agent: String

  """The approval status of the comment."""
  approved: String

  """The name of the comment's author."""
  author: String

  """The email of the comment's author."""
  authorEmail: String

  """IP address for the comment's author."""
  authorIp: String

  """The url of the comment's author."""
  authorUrl: String
  clientMutationId: String!

  """The ID of the post object the comment belongs to."""
  commentOn: Int

  """Content of the comment."""
  content: String

  """
  The date of the object. Preferable to enter as year/month/day ( e.g. 01/31/2017 ) as it will rearrange date as fit if it is not specified. Incomplete dates may have unintended results for example, "2017" as the input will use current date with timestamp 20:17 
  """
  date: String

  """The ID of the comment being updated."""
  id: ID!

  """Parent comment of current comment."""
  parent: ID

  """Type of comment."""
  type: String

  """The userID of the comment's author."""
  userId: Int
}

"""The payload for the updateComment mutation"""
type BlogUpdateCommentPayload {
  clientMutationId: String! @deprecated(reason: "")

  """The comment that was created"""
  comment: BlogComment @deprecated(reason: "")

  """
  Whether the mutation succeeded. If the comment is not approved, the server will not return the comment to a non authenticated user, but a success message can be returned if the create succeeded, and the client can optimistically add the comment to the client cache
  """
  success: Boolean @deprecated(reason: "")
}

"""Input for the updateMediaItem mutation"""
input BlogUpdateMediaItemInput {
  """Alternative text to display when mediaItem is not displayed"""
  altText: String

  """The userId to assign as the author of the mediaItem"""
  authorId: ID

  """The caption for the mediaItem"""
  caption: String
  clientMutationId: String!

  """The comment status for the mediaItem"""
  commentStatus: String

  """The date of the mediaItem"""
  date: String

  """The date (in GMT zone) of the mediaItem"""
  dateGmt: String

  """Description of the mediaItem"""
  description: String

  """The file name of the mediaItem"""
  filePath: String

  """The file type of the mediaItem"""
  fileType: BlogMimeTypeEnum

  """The ID of the mediaItem object"""
  id: ID!

  """The WordPress post ID or the graphQL postId of the parent object"""
  parentId: ID

  """The ping status for the mediaItem"""
  pingStatus: String

  """The slug of the mediaItem"""
  slug: String

  """The status of the mediaItem"""
  status: BlogMediaItemStatusEnum

  """The title of the mediaItem"""
  title: String
}

"""The payload for the updateMediaItem mutation"""
type BlogUpdateMediaItemPayload {
  clientMutationId: String! @deprecated(reason: "")
  mediaItem: BlogMediaItem @deprecated(reason: "")
}

"""Input for the updatePage mutation"""
input BlogUpdatePageInput {
  """The userId to assign as the author of the object"""
  authorId: ID
  clientMutationId: String!

  """The comment status for the object"""
  commentStatus: String

  """The content of the object"""
  content: String

  """
  The date of the object. Preferable to enter as year/month/day (e.g. 01/31/2017) as it will rearrange date as fit if it is not specified. Incomplete dates may have unintended results for example, "2017" as the input will use current date with timestamp 20:17 
  """
  date: String

  """The ID of the page object"""
  id: ID!

  """
  A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types.
  """
  menuOrder: Int

  """The ID of the parent object"""
  parentId: ID

  """The password used to protect the content of the object"""
  password: String

  """The slug of the object"""
  slug: String

  """The title of the object"""
  title: String
}

"""The payload for the updatePage mutation"""
type BlogUpdatePagePayload {
  clientMutationId: String! @deprecated(reason: "")
  page: BlogPage @deprecated(reason: "")
}

"""Input for the UpdatePostFormat mutation"""
input BlogUpdatePostFormatInput {
  """The slug that the post_format will be an alias of"""
  aliasOf: String
  clientMutationId: String!

  """The description of the post_format object"""
  description: String

  """The ID of the postFormat object to update"""
  id: ID!

  """The name of the post_format object to mutate"""
  name: String

  """
  If this argument exists then the slug will be checked to see if it is not an existing valid term. If that check succeeds (it is not a valid term), then it is added and the term id is given. If it fails, then a check is made to whether the taxonomy is hierarchical and the parent argument is not empty. If the second check succeeds, the term will be inserted and the term id will be given. If the slug argument is empty, then it will be calculated from the term name.
  """
  slug: String
}

"""The payload for the UpdatePostFormat mutation"""
type BlogUpdatePostFormatPayload {
  clientMutationId: String! @deprecated(reason: "")

  """The created post_format"""
  postFormat: BlogPostFormat @deprecated(reason: "")
}

"""Input for the updatePost mutation"""
input BlogUpdatePostInput {
  """The userId to assign as the author of the object"""
  authorId: ID

  """Set connections between the post and categories"""
  categories: BlogPostCategoriesInput
  clientMutationId: String!

  """The comment status for the object"""
  commentStatus: String

  """The content of the object"""
  content: String

  """
  The date of the object. Preferable to enter as year/month/day (e.g. 01/31/2017) as it will rearrange date as fit if it is not specified. Incomplete dates may have unintended results for example, "2017" as the input will use current date with timestamp 20:17 
  """
  date: String

  """The excerpt of the object"""
  excerpt: String

  """The ID of the post object"""
  id: ID!

  """
  A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types.
  """
  menuOrder: Int

  """The password used to protect the content of the object"""
  password: String

  """The ping status for the object"""
  pingStatus: String

  """URLs that have been pinged."""
  pinged: [String]

  """Set connections between the post and postFormats"""
  postFormats: BlogPostPostFormatsInput

  """The slug of the object"""
  slug: String

  """Set connections between the post and tags"""
  tags: BlogPostTagsInput

  """The title of the object"""
  title: String

  """URLs queued to be pinged."""
  toPing: [String]
}

"""The payload for the updatePost mutation"""
type BlogUpdatePostPayload {
  clientMutationId: String! @deprecated(reason: "")
  post: BlogPost @deprecated(reason: "")
}

"""Input for the updateSettings mutation"""
input BlogUpdateSettingsInput {
  clientMutationId: String!

  """Allow people to submit comments on new posts."""
  discussionSettingsDefaultCommentStatus: String

  """
  Allow link notifications from other blogs (pingbacks and trackbacks) on new articles.
  """
  discussionSettingsDefaultPingStatus: String

  """A date format for all date strings."""
  generalSettingsDateFormat: String

  """Site tagline."""
  generalSettingsDescription: String

  """This address is used for admin purposes, like new user notification."""
  generalSettingsEmail: String

  """WordPress locale code."""
  generalSettingsLanguage: String

  """A day number of the week that the week should start on."""
  generalSettingsStartOfWeek: Int

  """A time format for all time strings."""
  generalSettingsTimeFormat: String

  """A city in the same timezone as you."""
  generalSettingsTimezone: String

  """Site title."""
  generalSettingsTitle: String

  """Site URL."""
  generalSettingsUrl: String

  """Blog pages show at most."""
  readingSettingsPostsPerPage: Int

  """Default post category."""
  writingSettingsDefaultCategory: Int

  """Default post format."""
  writingSettingsDefaultPostFormat: String

  """Convert emoticons like :-) and :-P to graphics on display."""
  writingSettingsUseSmilies: Boolean
}

"""The payload for the updateSettings mutation"""
type BlogUpdateSettingsPayload {
  allSettings: BlogSettings @deprecated(reason: "")
  clientMutationId: String! @deprecated(reason: "")
  discussionSettings: BlogDiscussionSettings @deprecated(reason: "")
  generalSettings: BlogGeneralSettings @deprecated(reason: "")
  readingSettings: BlogReadingSettings @deprecated(reason: "")
  writingSettings: BlogWritingSettings @deprecated(reason: "")
}

"""Input for the UpdateTag mutation"""
input BlogUpdateTagInput {
  """The slug that the post_tag will be an alias of"""
  aliasOf: String
  clientMutationId: String!

  """The description of the post_tag object"""
  description: String

  """The ID of the tag object to update"""
  id: ID!

  """The name of the post_tag object to mutate"""
  name: String

  """
  If this argument exists then the slug will be checked to see if it is not an existing valid term. If that check succeeds (it is not a valid term), then it is added and the term id is given. If it fails, then a check is made to whether the taxonomy is hierarchical and the parent argument is not empty. If the second check succeeds, the term will be inserted and the term id will be given. If the slug argument is empty, then it will be calculated from the term name.
  """
  slug: String
}

"""The payload for the UpdateTag mutation"""
type BlogUpdateTagPayload {
  clientMutationId: String! @deprecated(reason: "")

  """The created post_tag"""
  tag: BlogTag @deprecated(reason: "")
}

"""Input for the updateUser mutation"""
input BlogUpdateUserInput {
  """User's AOL IM account."""
  aim: String
  clientMutationId: String!

  """A string containing content about the user."""
  description: String

  """
  A string that will be shown on the site. Defaults to user's username. It is likely that you will want to change this, for both appearance and security through obscurity (that is if you dont use and delete the default admin user).
  """
  displayName: String

  """A string containing the user's email address."""
  email: String

  """	The user's first name."""
  firstName: String

  """The ID of the user"""
  id: ID!

  """User's Jabber account."""
  jabber: String

  """The user's last name."""
  lastName: String

  """User's locale."""
  locale: String

  """
  A string that contains a URL-friendly name for the user. The default is the user's username.
  """
  nicename: String

  """The user's nickname, defaults to the user's username."""
  nickname: String

  """A string that contains the plain text password for the user."""
  password: String

  """The date the user registered. Format is Y-m-d H:i:s."""
  registered: String

  """
  A string for whether to enable the rich editor or not. False if not empty.
  """
  richEditing: String

  """An array of roles to be assigned to the user."""
  roles: [String]

  """A string containing the user's URL for the user's web site."""
  websiteUrl: String

  """User's Yahoo IM account."""
  yim: String
}

"""The payload for the updateUser mutation"""
type BlogUpdateUserPayload {
  clientMutationId: String! @deprecated(reason: "")
  user: BlogUser @deprecated(reason: "")
}

"""A User object"""
type BlogUser implements BlogNode & BlogUniformResourceIdentifiable {
  """
  Avatar object for user. The avatar object can be retrieved in different sizes by specifying the size argument.
  """
  avatar(
    """
    The size attribute of the avatar field can be used to fetch avatars of different sizes. The value corresponds to the dimension in pixels to fetch. The default is 96 pixels.
    """
    size: Int = 96

    """
    Whether to always show the default image, never the Gravatar. Default false
    """
    forceDefault: Boolean
    rating: BlogAvatarRatingEnum
  ): BlogAvatar @deprecated(reason: "")

  """
  User metadata option name. Usually it will be &quot;wp_capabilities&quot;.
  """
  capKey: String @deprecated(reason: "")

  """A list of capabilities (permissions) granted to the user"""
  capabilities: [String] @deprecated(reason: "")

  """Connection between the User type and the Comment type"""
  comments(
    """The number of items to return after the referenced "after" cursor"""
    first: Int
    last: Int

    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String

    """Arguments for filtering the connection"""
    where: BlogUserToCommentConnectionWhereArgs
  ): BlogUserToCommentConnection @deprecated(reason: "")

  """Identifies the primary key from the database."""
  databaseId: Int! @deprecated(reason: "")

  """Description of the user."""
  description: String @deprecated(reason: "")

  """
  Email address of the user. This is equivalent to the WP_User-&gt;user_email property.
  """
  email: String @deprecated(reason: "")

  """
  A complete list of capabilities including capabilities inherited from a role. This is equivalent to the array keys of WP_User-&gt;allcaps.
  """
  extraCapabilities: [String] @deprecated(reason: "")

  """
  First name of the user. This is equivalent to the WP_User-&gt;user_first_name property.
  """
  firstName: String @deprecated(reason: "")

  """The globally unique identifier for the user object."""
  id: ID! @deprecated(reason: "")

  """Whether the object is restricted from the current viewer"""
  isRestricted: Boolean @deprecated(reason: "")

  """
  Last name of the user. This is equivalent to the WP_User-&gt;user_last_name property.
  """
  lastName: String @deprecated(reason: "")

  """
  The preferred language locale set for the user. Value derived from get_user_locale().
  """
  locale: String @deprecated(reason: "")

  """Connection between the User type and the mediaItem type"""
  mediaItems(
    """The number of items to return after the referenced "after" cursor"""
    first: Int
    last: Int

    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String

    """Arguments for filtering the connection"""
    where: BlogUserToMediaItemConnectionWhereArgs
  ): BlogUserToMediaItemConnection @deprecated(reason: "")

  """
  Display name of the user. This is equivalent to the WP_User-&gt;dispaly_name property.
  """
  name: String @deprecated(reason: "")

  """
  The nicename for the user. This field is equivalent to WP_User-&gt;user_nicename
  """
  nicename: String @deprecated(reason: "")

  """Nickname of the user."""
  nickname: String @deprecated(reason: "")

  """Connection between the User type and the page type"""
  pages(
    """The number of items to return after the referenced "after" cursor"""
    first: Int
    last: Int

    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String

    """Arguments for filtering the connection"""
    where: BlogUserToPageConnectionWhereArgs
  ): BlogUserToPageConnection @deprecated(reason: "")

  """Connection between the User type and the post type"""
  posts(
    """The number of items to return after the referenced "after" cursor"""
    first: Int
    last: Int

    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String

    """Arguments for filtering the connection"""
    where: BlogUserToPostConnectionWhereArgs
  ): BlogUserToPostConnection @deprecated(reason: "")

  """
  The date the user registered or was created. The field follows a full ISO8601 date string format.
  """
  registeredDate: String @deprecated(reason: "")

  """Connection between the User and Revisions authored by the user"""
  revisions(
    """The number of items to return after the referenced "after" cursor"""
    first: Int
    last: Int

    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String

    """Arguments for filtering the connection"""
    where: BlogUserToContentRevisionUnionConnectionWhereArgs
  ): BlogUserToContentRevisionUnionConnection @deprecated(reason: "")

  """Connection between the User type and the UserRole type"""
  roles(
    """The number of items to return after the referenced "after" cursor"""
    first: Int
    last: Int

    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String
  ): BlogUserToUserRoleConnection @deprecated(reason: "")

  """
  The slug for the user. This field is equivalent to WP_User-&gt;user_nicename
  """
  slug: String @deprecated(reason: "")

  """The unique resource identifier path"""
  uri: String! @deprecated(reason: "")

  """A website url that is associated with the user."""
  url: String @deprecated(reason: "")

  """The Id of the user. Equivalent to WP_User-&gt;ID"""
  userId: Int @deprecated(reason: "")

  """
  Username for the user. This field is equivalent to WP_User-&gt;user_login.
  """
  username: String @deprecated(reason: "")
}

"""
The Type of Identifier used to fetch a single User node. To be used along with the "id" field. Default is "ID".
"""
enum BlogUserNodeIdTypeEnum {
  """The Database ID for the node"""
  DATABASE_ID

  """The Email of the User"""
  EMAIL

  """The hashed Global ID"""
  ID

  """The slug of the User"""
  SLUG

  """The URI for the node"""
  URI

  """The username the User uses to login with"""
  USERNAME
}

"""A user role object"""
type BlogUserRole implements BlogNode {
  """The capabilities that belong to this role"""
  capabilities: [String] @deprecated(reason: "")

  """The display name of the role"""
  displayName: String @deprecated(reason: "")

  """The globally unique identifier for the user role object."""
  id: ID! @deprecated(reason: "")

  """Whether the object is restricted from the current viewer"""
  isRestricted: Boolean @deprecated(reason: "")

  """The registered name of the role"""
  name: String @deprecated(reason: "")
}

"""Names of available user roles"""
enum BlogUserRoleEnum {
  ADMINISTRATOR
  AUTHOR
  CONTRIBUTOR
  EDITOR
  SUBSCRIBER
}

"""Connection between the User type and the Comment type"""
type BlogUserToCommentConnection {
  """Edges for the UserToCommentConnection connection"""
  edges: [BlogUserToCommentConnectionEdge] @deprecated(reason: "")

  """The nodes of the connection, without the edges"""
  nodes: [BlogComment] @deprecated(reason: "")

  """Information about pagination in a connection."""
  pageInfo: BlogWPPageInfo @deprecated(reason: "")
}

"""An edge in a connection"""
type BlogUserToCommentConnectionEdge {
  """A cursor for use in pagination"""
  cursor: String @deprecated(reason: "")

  """The item at the end of the edge"""
  node: BlogComment @deprecated(reason: "")
}

"""Arguments for filtering the UserToCommentConnection connection"""
input BlogUserToCommentConnectionWhereArgs {
  """Comment author email address."""
  authorEmail: String

  """Array of author IDs to include comments for."""
  authorIn: [ID]

  """Array of author IDs to exclude comments for."""
  authorNotIn: [ID]

  """Comment author URL."""
  authorUrl: String

  """Array of comment IDs to include."""
  commentIn: [ID]

  """
  Array of IDs of users whose unapproved comments will be returned by the
  							query regardless of status.
  """
  commentNotIn: [ID]

  """Include comments of a given type."""
  commentType: String

  """Include comments from a given array of comment types."""
  commentTypeIn: [String]

  """Exclude comments from a given array of comment types."""
  commentTypeNotIn: String

  """Content object author ID to limit results by."""
  contentAuthor: [ID]

  """Array of author IDs to retrieve comments for."""
  contentAuthorIn: [ID]

  """Array of author IDs *not* to retrieve comments for."""
  contentAuthorNotIn: [ID]

  """
  Limit results to those affiliated with a given content object
  							ID.
  """
  contentId: ID

  """
  Array of content object IDs to include affiliated comments
  							for.
  """
  contentIdIn: [ID]

  """
  Array of content object IDs to exclude affiliated comments
  							for.
  """
  contentIdNotIn: [ID]

  """Content object name to retrieve affiliated comments for."""
  contentName: String

  """Content Object parent ID to retrieve affiliated comments for."""
  contentParent: Int

  """
  Content object type or array of types to retrieve affiliated comments for. Pass 'any' to match any value.
  """
  contentType: [BlogContentTypeEnum]

  """
  Array of IDs or email addresses of users whose unapproved comments will be returned by the query regardless of $status. Default empty
  """
  includeUnapproved: [ID]

  """Karma score to retrieve matching comments for."""
  karma: Int

  """The cardinality of the order of the connection"""
  order: BlogOrderEnum

  """Field to order the comments by."""
  orderby: BlogCommentsConnectionOrderbyEnum

  """Parent ID of comment to retrieve children of."""
  parent: Int

  """Array of parent IDs of comments to retrieve children for."""
  parentIn: [ID]

  """
  Array of parent IDs of comments *not* to retrieve children
  							for.
  """
  parentNotIn: [ID]

  """Search term(s) to retrieve matching comments for."""
  search: String

  """Comment status to limit results by."""
  status: String

  """Include comments for a specific user ID."""
  userId: ID
}

"""Connection between the User type and the ContentRevisionUnion type"""
type BlogUserToContentRevisionUnionConnection {
  """Edges for the UserToContentRevisionUnionConnection connection"""
  edges: [BlogUserToContentRevisionUnionConnectionEdge] @deprecated(reason: "")

  """The nodes of the connection, without the edges"""
  nodes: [BlogContentRevisionUnion] @deprecated(reason: "")

  """Information about pagination in a connection."""
  pageInfo: BlogWPPageInfo @deprecated(reason: "")
}

"""An edge in a connection"""
type BlogUserToContentRevisionUnionConnectionEdge {
  """A cursor for use in pagination"""
  cursor: String @deprecated(reason: "")

  """The item at the end of the edge"""
  node: BlogContentRevisionUnion @deprecated(reason: "")
}

"""
Arguments for filtering the UserToContentRevisionUnionConnection connection
"""
input BlogUserToContentRevisionUnionConnectionWhereArgs {
  """Filter the connection based on dates"""
  dateQuery: BlogDateQueryInput

  """
  True for objects with passwords; False for objects without passwords; null for all objects with or without passwords
  """
  hasPassword: Boolean

  """Specific ID of the object"""
  id: Int

  """Array of IDs for the objects to retrieve"""
  in: [ID]

  """Get objects with a specific mimeType property"""
  mimeType: BlogMimeTypeEnum

  """Slug / post_name of the object"""
  name: String

  """Specify objects to retrieve. Use slugs"""
  nameIn: [String]

  """
  Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored
  """
  notIn: [ID]

  """What paramater to use to order the objects by."""
  orderby: [BlogPostObjectsConnectionOrderbyInput]

  """Use ID to return only children. Use 0 to return only top-level items"""
  parent: String

  """Specify objects whose parent is in an array"""
  parentIn: [ID]

  """Specify posts whose parent is not in an array"""
  parentNotIn: [ID]

  """Show posts with a specific password."""
  password: String

  """Show Posts based on a keyword search"""
  search: String

  """Title of the object"""
  title: String
}

"""Connection between the User type and the mediaItem type"""
type BlogUserToMediaItemConnection {
  """Edges for the UserToMediaItemConnection connection"""
  edges: [BlogUserToMediaItemConnectionEdge] @deprecated(reason: "")

  """The nodes of the connection, without the edges"""
  nodes: [BlogMediaItem] @deprecated(reason: "")

  """Information about pagination in a connection."""
  pageInfo: BlogWPPageInfo @deprecated(reason: "")
}

"""An edge in a connection"""
type BlogUserToMediaItemConnectionEdge {
  """A cursor for use in pagination"""
  cursor: String @deprecated(reason: "")

  """The item at the end of the edge"""
  node: BlogMediaItem @deprecated(reason: "")
}

"""Arguments for filtering the UserToMediaItemConnection connection"""
input BlogUserToMediaItemConnectionWhereArgs {
  """
  The user that's connected as the author of the object. Use the userId for the author object.
  """
  author: Int

  """Find objects connected to author(s) in the array of author's userIds"""
  authorIn: [ID]

  """Find objects connected to the author by the author's nicename"""
  authorName: String

  """
  Find objects NOT connected to author(s) in the array of author's userIds
  """
  authorNotIn: [ID]

  """Filter the connection based on dates"""
  dateQuery: BlogDateQueryInput

  """
  True for objects with passwords; False for objects without passwords; null for all objects with or without passwords
  """
  hasPassword: Boolean

  """Specific ID of the object"""
  id: Int

  """Array of IDs for the objects to retrieve"""
  in: [ID]

  """Get objects with a specific mimeType property"""
  mimeType: BlogMimeTypeEnum

  """Slug / post_name of the object"""
  name: String

  """Specify objects to retrieve. Use slugs"""
  nameIn: [String]

  """
  Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored
  """
  notIn: [ID]

  """What paramater to use to order the objects by."""
  orderby: [BlogPostObjectsConnectionOrderbyInput]

  """Use ID to return only children. Use 0 to return only top-level items"""
  parent: String

  """Specify objects whose parent is in an array"""
  parentIn: [ID]

  """Specify posts whose parent is not in an array"""
  parentNotIn: [ID]

  """Show posts with a specific password."""
  password: String

  """Show Posts based on a keyword search"""
  search: String

  """Title of the object"""
  title: String
}

"""Connection between the User type and the page type"""
type BlogUserToPageConnection {
  """Edges for the UserToPageConnection connection"""
  edges: [BlogUserToPageConnectionEdge] @deprecated(reason: "")

  """The nodes of the connection, without the edges"""
  nodes: [BlogPage] @deprecated(reason: "")

  """Information about pagination in a connection."""
  pageInfo: BlogWPPageInfo @deprecated(reason: "")
}

"""An edge in a connection"""
type BlogUserToPageConnectionEdge {
  """A cursor for use in pagination"""
  cursor: String @deprecated(reason: "")

  """The item at the end of the edge"""
  node: BlogPage @deprecated(reason: "")
}

"""Arguments for filtering the UserToPageConnection connection"""
input BlogUserToPageConnectionWhereArgs {
  """
  The user that's connected as the author of the object. Use the userId for the author object.
  """
  author: Int

  """Find objects connected to author(s) in the array of author's userIds"""
  authorIn: [ID]

  """Find objects connected to the author by the author's nicename"""
  authorName: String

  """
  Find objects NOT connected to author(s) in the array of author's userIds
  """
  authorNotIn: [ID]

  """Filter the connection based on dates"""
  dateQuery: BlogDateQueryInput

  """
  True for objects with passwords; False for objects without passwords; null for all objects with or without passwords
  """
  hasPassword: Boolean

  """Specific ID of the object"""
  id: Int

  """Array of IDs for the objects to retrieve"""
  in: [ID]

  """Get objects with a specific mimeType property"""
  mimeType: BlogMimeTypeEnum

  """Slug / post_name of the object"""
  name: String

  """Specify objects to retrieve. Use slugs"""
  nameIn: [String]

  """
  Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored
  """
  notIn: [ID]

  """What paramater to use to order the objects by."""
  orderby: [BlogPostObjectsConnectionOrderbyInput]

  """Use ID to return only children. Use 0 to return only top-level items"""
  parent: String

  """Specify objects whose parent is in an array"""
  parentIn: [ID]

  """Specify posts whose parent is not in an array"""
  parentNotIn: [ID]

  """Show posts with a specific password."""
  password: String

  """Show Posts based on a keyword search"""
  search: String

  """Title of the object"""
  title: String
}

"""Connection between the User type and the post type"""
type BlogUserToPostConnection {
  """Edges for the UserToPostConnection connection"""
  edges: [BlogUserToPostConnectionEdge] @deprecated(reason: "")

  """The nodes of the connection, without the edges"""
  nodes: [BlogPost] @deprecated(reason: "")

  """Information about pagination in a connection."""
  pageInfo: BlogWPPageInfo @deprecated(reason: "")
}

"""An edge in a connection"""
type BlogUserToPostConnectionEdge {
  """A cursor for use in pagination"""
  cursor: String @deprecated(reason: "")

  """The item at the end of the edge"""
  node: BlogPost @deprecated(reason: "")
}

"""Arguments for filtering the UserToPostConnection connection"""
input BlogUserToPostConnectionWhereArgs {
  """
  The user that's connected as the author of the object. Use the userId for the author object.
  """
  author: Int

  """Find objects connected to author(s) in the array of author's userIds"""
  authorIn: [ID]

  """Find objects connected to the author by the author's nicename"""
  authorName: String

  """
  Find objects NOT connected to author(s) in the array of author's userIds
  """
  authorNotIn: [ID]

  """Category ID"""
  categoryId: Int

  """
  Array of category IDs, used to display objects from one category OR another
  """
  categoryIn: [ID]

  """Use Category Slug"""
  categoryName: String

  """
  Array of category IDs, used to display objects from one category OR another
  """
  categoryNotIn: [ID]

  """Filter the connection based on dates"""
  dateQuery: BlogDateQueryInput

  """
  True for objects with passwords; False for objects without passwords; null for all objects with or without passwords
  """
  hasPassword: Boolean

  """Specific ID of the object"""
  id: Int

  """Array of IDs for the objects to retrieve"""
  in: [ID]

  """Get objects with a specific mimeType property"""
  mimeType: BlogMimeTypeEnum

  """Slug / post_name of the object"""
  name: String

  """Specify objects to retrieve. Use slugs"""
  nameIn: [String]

  """
  Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored
  """
  notIn: [ID]

  """What paramater to use to order the objects by."""
  orderby: [BlogPostObjectsConnectionOrderbyInput]

  """Use ID to return only children. Use 0 to return only top-level items"""
  parent: String

  """Specify objects whose parent is in an array"""
  parentIn: [ID]

  """Specify posts whose parent is not in an array"""
  parentNotIn: [ID]

  """Show posts with a specific password."""
  password: String

  """Show Posts based on a keyword search"""
  search: String

  """Tag Slug"""
  tag: String

  """Use Tag ID"""
  tagId: String

  """Array of tag IDs, used to display objects from one tag OR another"""
  tagIn: [ID]

  """Array of tag IDs, used to display objects from one tag OR another"""
  tagNotIn: [ID]

  """Array of tag slugs, used to display objects from one tag OR another"""
  tagSlugAnd: [String]

  """Array of tag slugs, used to exclude objects in specified tags"""
  tagSlugIn: [String]

  """Title of the object"""
  title: String
}

"""Connection between the User type and the UserRole type"""
type BlogUserToUserRoleConnection {
  """Edges for the UserToUserRoleConnection connection"""
  edges: [BlogUserToUserRoleConnectionEdge] @deprecated(reason: "")

  """The nodes of the connection, without the edges"""
  nodes: [BlogUserRole] @deprecated(reason: "")

  """Information about pagination in a connection."""
  pageInfo: BlogWPPageInfo @deprecated(reason: "")
}

"""An edge in a connection"""
type BlogUserToUserRoleConnectionEdge {
  """A cursor for use in pagination"""
  cursor: String @deprecated(reason: "")

  """The item at the end of the edge"""
  node: BlogUserRole @deprecated(reason: "")
}

"""Field to order the connection by"""
enum BlogUsersConnectionOrderbyEnum {
  """Order by display name"""
  DISPLAY_NAME

  """Order by email address"""
  EMAIL

  """Order by login"""
  LOGIN

  """Preserve the login order given in the LOGIN_IN array"""
  LOGIN_IN

  """Order by nice name"""
  NICE_NAME

  """Preserve the nice name order given in the NICE_NAME_IN array"""
  NICE_NAME_IN

  """Order by registration date"""
  REGISTERED

  """Order by URL"""
  URL
}

"""Options for ordering the connection"""
input BlogUsersConnectionOrderbyInput {
  field: BlogUsersConnectionOrderbyEnum!
  order: BlogOrderEnum
}

"""Information about pagination in a connection."""
type BlogWPPageInfo {
  """When paginating forwards, the cursor to continue."""
  endCursor: String @deprecated(reason: "")

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean! @deprecated(reason: "")

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean! @deprecated(reason: "")

  """When paginating backwards, the cursor to continue."""
  startCursor: String @deprecated(reason: "")
}

"""The writing setting type"""
type BlogWritingSettings {
  """Default post category."""
  defaultCategory: Int @deprecated(reason: "")

  """Default post format."""
  defaultPostFormat: String @deprecated(reason: "")

  """Convert emoticons like :-) and :-P to graphics on display."""
  useSmilies: Boolean @deprecated(reason: "")
}

type CalendarCalendarEvent {
  calendarId: String!
  calendarName: String!
  id: ID!
  start: CalendarDateTime!
  end: CalendarDateTime!
  title: String!
  description: String!
  location: String!
  metadata: CalendarJSONObject!
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar CalendarDateTime

enum CalendarFormat {
  HTML
  MARKDOWN
  DISCORD
}

"""
The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar CalendarJSONObject

enum CalendarOrder {
  ASC
  DESC
}

type CalendarQuery {
  event(calendars: [String!], format: CalendarFormat = HTML, id: ID!): CalendarCalendarEvent
  events(calendars: [String!], take: Float = 100, skip: Float = 0, format: CalendarFormat = HTML, order: CalendarOrder = ASC, after: CalendarDateTime!, before: CalendarDateTime!): [CalendarCalendarEvent!]!
}

"""
[See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/announcement)
"""
type CmsAnnouncement implements CmsEntry {
  sys: CmsSys!
  contentfulMetadata: CmsContentfulMetadata!
  linkedFrom(allowedLocales: [String]): CmsAnnouncementLinkingCollections
  title(locale: String): String
  displayAt(locale: String): CmsDateTime
  endAt(locale: String): CmsDateTime
  oneline(locale: String): String
  link(locale: String): String
  visibility(locale: String): String
  type(locale: String): String
  programs(skip: Int = 0, limit: Int = 100, preview: Boolean, locale: String): CmsAnnouncementProgramCollection
}

type CmsAnnouncementCollection {
  total: Int!
  skip: Int!
  limit: Int!
  items: [CmsAnnouncement]!
}

input CmsAnnouncementFilter {
  sys: CmsSysFilter
  contentfulMetadata: CmsContentfulMetadataFilter
  title_exists: Boolean
  title: String
  title_not: String
  title_in: [String]
  title_not_in: [String]
  title_contains: String
  title_not_contains: String
  displayAt_exists: Boolean
  displayAt: CmsDateTime
  displayAt_not: CmsDateTime
  displayAt_in: [CmsDateTime]
  displayAt_not_in: [CmsDateTime]
  displayAt_gt: CmsDateTime
  displayAt_gte: CmsDateTime
  displayAt_lt: CmsDateTime
  displayAt_lte: CmsDateTime
  endAt_exists: Boolean
  endAt: CmsDateTime
  endAt_not: CmsDateTime
  endAt_in: [CmsDateTime]
  endAt_not_in: [CmsDateTime]
  endAt_gt: CmsDateTime
  endAt_gte: CmsDateTime
  endAt_lt: CmsDateTime
  endAt_lte: CmsDateTime
  oneline_exists: Boolean
  oneline: String
  oneline_not: String
  oneline_in: [String]
  oneline_not_in: [String]
  oneline_contains: String
  oneline_not_contains: String
  link_exists: Boolean
  link: String
  link_not: String
  link_in: [String]
  link_not_in: [String]
  link_contains: String
  link_not_contains: String
  visibility_exists: Boolean
  visibility: String
  visibility_not: String
  visibility_in: [String]
  visibility_not_in: [String]
  visibility_contains: String
  visibility_not_contains: String
  type_exists: Boolean
  type: String
  type_not: String
  type_in: [String]
  type_not_in: [String]
  type_contains: String
  type_not_contains: String
  programCollection_exists: Boolean
  OR: [CmsAnnouncementFilter]
  AND: [CmsAnnouncementFilter]
}

type CmsAnnouncementLinkingCollections {
  entries(skip: Int = 0, limit: Int = 100, preview: Boolean, locale: String): CmsEntryCollection
}

enum CmsAnnouncementOrder {
  title_ASC
  title_DESC
  displayAt_ASC
  displayAt_DESC
  endAt_ASC
  endAt_DESC
  oneline_ASC
  oneline_DESC
  link_ASC
  link_DESC
  visibility_ASC
  visibility_DESC
  type_ASC
  type_DESC
  sys_id_ASC
  sys_id_DESC
  sys_publishedAt_ASC
  sys_publishedAt_DESC
  sys_firstPublishedAt_ASC
  sys_firstPublishedAt_DESC
  sys_publishedVersion_ASC
  sys_publishedVersion_DESC
}

type CmsAnnouncementProgramCollection {
  total: Int!
  skip: Int!
  limit: Int!
  items: [CmsProgram]!
}

"""Represents a binary file in a space. An asset can be any file type."""
type CmsAsset {
  sys: CmsSys!
  contentfulMetadata: CmsContentfulMetadata!
  title: String
  description: String
  contentType: String
  fileName: String
  size: Int
  contentfulBaseUrl(transform: CmsImageTransformOptions): String
  width: Int
  height: Int
  linkedFrom(allowedLocales: [String]): CmsAssetLinkingCollections
  url(transform: CmsImageTransformOptions): String
}

type CmsAssetCollection {
  total: Int!
  skip: Int!
  limit: Int!
  items: [CmsAsset]!
}

input CmsAssetFilter {
  sys: CmsSysFilter
  contentfulMetadata: CmsContentfulMetadataFilter
  title_exists: Boolean
  title: String
  title_not: String
  title_in: [String]
  title_not_in: [String]
  title_contains: String
  title_not_contains: String
  description_exists: Boolean
  description: String
  description_not: String
  description_in: [String]
  description_not_in: [String]
  description_contains: String
  description_not_contains: String
  url_exists: Boolean
  url: String
  url_not: String
  url_in: [String]
  url_not_in: [String]
  url_contains: String
  url_not_contains: String
  size_exists: Boolean
  size: Int
  size_not: Int
  size_in: [Int]
  size_not_in: [Int]
  size_gt: Int
  size_gte: Int
  size_lt: Int
  size_lte: Int
  contentType_exists: Boolean
  contentType: String
  contentType_not: String
  contentType_in: [String]
  contentType_not_in: [String]
  contentType_contains: String
  contentType_not_contains: String
  fileName_exists: Boolean
  fileName: String
  fileName_not: String
  fileName_in: [String]
  fileName_not_in: [String]
  fileName_contains: String
  fileName_not_contains: String
  width_exists: Boolean
  width: Int
  width_not: Int
  width_in: [Int]
  width_not_in: [Int]
  width_gt: Int
  width_gte: Int
  width_lt: Int
  width_lte: Int
  height_exists: Boolean
  height: Int
  height_not: Int
  height_in: [Int]
  height_not_in: [Int]
  height_gt: Int
  height_gte: Int
  height_lt: Int
  height_lte: Int
  OR: [CmsAssetFilter]
  AND: [CmsAssetFilter]
}

type CmsAssetLinkingCollections {
  entries(skip: Int = 0, limit: Int = 100, preview: Boolean, locale: String): CmsEntryCollection
  programs(skip: Int = 0, limit: Int = 100, preview: Boolean, locale: String): CmsProgramCollection
  events(skip: Int = 0, limit: Int = 100, preview: Boolean, locale: String): CmsEventCollection
  badges(skip: Int = 0, limit: Int = 100, preview: Boolean, locale: String): CmsBadgeCollection
  forms(skip: Int = 0, limit: Int = 100, preview: Boolean, locale: String): CmsFormCollection
  awards(skip: Int = 0, limit: Int = 100, preview: Boolean, locale: String): CmsAwardCollection
  stockMusics(skip: Int = 0, limit: Int = 100, preview: Boolean, locale: String): CmsStockMusicCollection
  hiringCompanies(skip: Int = 0, limit: Int = 100, preview: Boolean, locale: String): CmsHiringCompanyCollection
  communityPartners(skip: Int = 0, limit: Int = 100, preview: Boolean, locale: String): CmsCommunityPartnerCollection
  legalDocuments(skip: Int = 0, limit: Int = 100, preview: Boolean, locale: String): CmsLegalDocumentCollection
  regions(skip: Int = 0, limit: Int = 100, preview: Boolean, locale: String): CmsRegionCollection
  pressPhotos(skip: Int = 0, limit: Int = 100, preview: Boolean, locale: String): CmsPressPhotoCollection
  newsCoverages(skip: Int = 0, limit: Int = 100, preview: Boolean, locale: String): CmsNewsCoverageCollection
  testimonials(skip: Int = 0, limit: Int = 100, preview: Boolean, locale: String): CmsTestimonialCollection
  globalSponsors(skip: Int = 0, limit: Int = 100, preview: Boolean, locale: String): CmsGlobalSponsorCollection
}

enum CmsAssetOrder {
  url_ASC
  url_DESC
  size_ASC
  size_DESC
  contentType_ASC
  contentType_DESC
  fileName_ASC
  fileName_DESC
  width_ASC
  width_DESC
  height_ASC
  height_DESC
  sys_id_ASC
  sys_id_DESC
  sys_publishedAt_ASC
  sys_publishedAt_DESC
  sys_firstPublishedAt_ASC
  sys_firstPublishedAt_DESC
  sys_publishedVersion_ASC
  sys_publishedVersion_DESC
}

"""
[See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/award)
"""
type CmsAward implements CmsEntry {
  sys: CmsSys!
  contentfulMetadata: CmsContentfulMetadata!
  linkedFrom(allowedLocales: [String]): CmsAwardLinkingCollections
  id(locale: String): String
  ranking(locale: String): Int
  icon(preview: Boolean, locale: String): CmsAsset
  name(locale: String): String
  description(locale: String): String
  programs(skip: Int = 0, limit: Int = 100, preview: Boolean, locale: String): CmsAwardProgramsCollection
}

type CmsAwardCollection {
  total: Int!
  skip: Int!
  limit: Int!
  items: [CmsAward]!
}

input CmsAwardFilter {
  sys: CmsSysFilter
  contentfulMetadata: CmsContentfulMetadataFilter
  id_exists: Boolean
  id: String
  id_not: String
  id_in: [String]
  id_not_in: [String]
  id_contains: String
  id_not_contains: String
  ranking_exists: Boolean
  ranking: Int
  ranking_not: Int
  ranking_in: [Int]
  ranking_not_in: [Int]
  ranking_gt: Int
  ranking_gte: Int
  ranking_lt: Int
  ranking_lte: Int
  icon_exists: Boolean
  name_exists: Boolean
  name: String
  name_not: String
  name_in: [String]
  name_not_in: [String]
  name_contains: String
  name_not_contains: String
  description_exists: Boolean
  description: String
  description_not: String
  description_in: [String]
  description_not_in: [String]
  description_contains: String
  description_not_contains: String
  programsCollection_exists: Boolean
  OR: [CmsAwardFilter]
  AND: [CmsAwardFilter]
}

type CmsAwardLinkingCollections {
  entries(skip: Int = 0, limit: Int = 100, preview: Boolean, locale: String): CmsEntryCollection
}

enum CmsAwardOrder {
  id_ASC
  id_DESC
  ranking_ASC
  ranking_DESC
  name_ASC
  name_DESC
  sys_id_ASC
  sys_id_DESC
  sys_publishedAt_ASC
  sys_publishedAt_DESC
  sys_firstPublishedAt_ASC
  sys_firstPublishedAt_DESC
  sys_publishedVersion_ASC
  sys_publishedVersion_DESC
}

type CmsAwardProgramsCollection {
  total: Int!
  skip: Int!
  limit: Int!
  items: [CmsProgram]!
}

"""
[See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/badge)
"""
type CmsBadge implements CmsEntry {
  sys: CmsSys!
  contentfulMetadata: CmsContentfulMetadata!
  linkedFrom(allowedLocales: [String]): CmsBadgeLinkingCollections
  id(locale: String): String
  name(locale: String): String
  description(locale: String): String
  emoji(locale: String): String
  image(preview: Boolean, locale: String): CmsAsset
  earnCriteria(locale: String): String
  earnMessage(locale: String): String
  grantPermissionOverrideIDs(locale: String): CmsJSON
}

type CmsBadgeCollection {
  total: Int!
  skip: Int!
  limit: Int!
  items: [CmsBadge]!
}

input CmsBadgeFilter {
  sys: CmsSysFilter
  contentfulMetadata: CmsContentfulMetadataFilter
  id_exists: Boolean
  id: String
  id_not: String
  id_in: [String]
  id_not_in: [String]
  id_contains: String
  id_not_contains: String
  name_exists: Boolean
  name: String
  name_not: String
  name_in: [String]
  name_not_in: [String]
  name_contains: String
  name_not_contains: String
  description_exists: Boolean
  description: String
  description_not: String
  description_in: [String]
  description_not_in: [String]
  description_contains: String
  description_not_contains: String
  emoji_exists: Boolean
  emoji: String
  emoji_not: String
  emoji_in: [String]
  emoji_not_in: [String]
  emoji_contains: String
  emoji_not_contains: String
  image_exists: Boolean
  earnCriteria_exists: Boolean
  earnCriteria: String
  earnCriteria_not: String
  earnCriteria_in: [String]
  earnCriteria_not_in: [String]
  earnCriteria_contains: String
  earnCriteria_not_contains: String
  earnMessage_exists: Boolean
  earnMessage: String
  earnMessage_not: String
  earnMessage_in: [String]
  earnMessage_not_in: [String]
  earnMessage_contains: String
  earnMessage_not_contains: String
  OR: [CmsBadgeFilter]
  AND: [CmsBadgeFilter]
}

type CmsBadgeLinkingCollections {
  entries(skip: Int = 0, limit: Int = 100, preview: Boolean, locale: String): CmsEntryCollection
}

enum CmsBadgeOrder {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  description_ASC
  description_DESC
  emoji_ASC
  emoji_DESC
  earnCriteria_ASC
  earnCriteria_DESC
  sys_id_ASC
  sys_id_DESC
  sys_publishedAt_ASC
  sys_publishedAt_DESC
  sys_firstPublishedAt_ASC
  sys_firstPublishedAt_DESC
  sys_publishedVersion_ASC
  sys_publishedVersion_DESC
}

"""
[See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/bumper)
"""
type CmsBumper implements CmsEntry {
  sys: CmsSys!
  contentfulMetadata: CmsContentfulMetadata!
  linkedFrom(allowedLocales: [String]): CmsBumperLinkingCollections
  title(locale: String): String
  video(locale: String): CmsJSON
  purpose(locale: String): [String]
  ambient(locale: String): Boolean
}

type CmsBumperCollection {
  total: Int!
  skip: Int!
  limit: Int!
  items: [CmsBumper]!
}

input CmsBumperFilter {
  sys: CmsSysFilter
  contentfulMetadata: CmsContentfulMetadataFilter
  title_exists: Boolean
  title: String
  title_not: String
  title_in: [String]
  title_not_in: [String]
  title_contains: String
  title_not_contains: String
  purpose_exists: Boolean
  purpose_contains_all: [String]
  purpose_contains_some: [String]
  purpose_contains_none: [String]
  ambient_exists: Boolean
  ambient: Boolean
  ambient_not: Boolean
  OR: [CmsBumperFilter]
  AND: [CmsBumperFilter]
}

type CmsBumperLinkingCollections {
  entries(skip: Int = 0, limit: Int = 100, preview: Boolean, locale: String): CmsEntryCollection
}

enum CmsBumperOrder {
  title_ASC
  title_DESC
  ambient_ASC
  ambient_DESC
  sys_id_ASC
  sys_id_DESC
  sys_publishedAt_ASC
  sys_publishedAt_DESC
  sys_firstPublishedAt_ASC
  sys_firstPublishedAt_DESC
  sys_publishedVersion_ASC
  sys_publishedVersion_DESC
}

"""
The Circle scalar type represents a circle, defined by the coordinates of its center and a radius. The Circle type is used to represent a searchable area together with the '_within_circle' filter.
"""
scalar CmsCircle

"""
[See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/communityPartner)
"""
type CmsCommunityPartner implements CmsEntry {
  sys: CmsSys!
  contentfulMetadata: CmsContentfulMetadata!
  linkedFrom(allowedLocales: [String]): CmsCommunityPartnerLinkingCollections
  name(locale: String): String
  audience(locale: String): [String]
  logo(preview: Boolean, locale: String): CmsAsset
  blurb(locale: String): String
  details(locale: String): String
  eligibility(locale: String): String
  cost(locale: String): Int
  url(locale: String): String
  displayUrl(locale: String): String
  expires(locale: String): CmsDateTime
  regions(skip: Int = 0, limit: Int = 100, preview: Boolean, locale: String): CmsCommunityPartnerRegionCollection
}

type CmsCommunityPartnerCollection {
  total: Int!
  skip: Int!
  limit: Int!
  items: [CmsCommunityPartner]!
}

input CmsCommunityPartnerFilter {
  sys: CmsSysFilter
  contentfulMetadata: CmsContentfulMetadataFilter
  name_exists: Boolean
  name: String
  name_not: String
  name_in: [String]
  name_not_in: [String]
  name_contains: String
  name_not_contains: String
  audience_exists: Boolean
  audience_contains_all: [String]
  audience_contains_some: [String]
  audience_contains_none: [String]
  logo_exists: Boolean
  blurb_exists: Boolean
  blurb: String
  blurb_not: String
  blurb_in: [String]
  blurb_not_in: [String]
  blurb_contains: String
  blurb_not_contains: String
  details_exists: Boolean
  details: String
  details_not: String
  details_in: [String]
  details_not_in: [String]
  details_contains: String
  details_not_contains: String
  eligibility_exists: Boolean
  eligibility: String
  eligibility_not: String
  eligibility_in: [String]
  eligibility_not_in: [String]
  eligibility_contains: String
  eligibility_not_contains: String
  cost_exists: Boolean
  cost: Int
  cost_not: Int
  cost_in: [Int]
  cost_not_in: [Int]
  cost_gt: Int
  cost_gte: Int
  cost_lt: Int
  cost_lte: Int
  url_exists: Boolean
  url: String
  url_not: String
  url_in: [String]
  url_not_in: [String]
  url_contains: String
  url_not_contains: String
  displayUrl_exists: Boolean
  displayUrl: String
  displayUrl_not: String
  displayUrl_in: [String]
  displayUrl_not_in: [String]
  displayUrl_contains: String
  displayUrl_not_contains: String
  expires_exists: Boolean
  expires: CmsDateTime
  expires_not: CmsDateTime
  expires_in: [CmsDateTime]
  expires_not_in: [CmsDateTime]
  expires_gt: CmsDateTime
  expires_gte: CmsDateTime
  expires_lt: CmsDateTime
  expires_lte: CmsDateTime
  regionCollection_exists: Boolean
  OR: [CmsCommunityPartnerFilter]
  AND: [CmsCommunityPartnerFilter]
}

type CmsCommunityPartnerLinkingCollections {
  entries(skip: Int = 0, limit: Int = 100, preview: Boolean, locale: String): CmsEntryCollection
}

enum CmsCommunityPartnerOrder {
  name_ASC
  name_DESC
  blurb_ASC
  blurb_DESC
  eligibility_ASC
  eligibility_DESC
  cost_ASC
  cost_DESC
  url_ASC
  url_DESC
  displayUrl_ASC
  displayUrl_DESC
  expires_ASC
  expires_DESC
  sys_id_ASC
  sys_id_DESC
  sys_publishedAt_ASC
  sys_publishedAt_DESC
  sys_firstPublishedAt_ASC
  sys_firstPublishedAt_DESC
  sys_publishedVersion_ASC
  sys_publishedVersion_DESC
}

type CmsCommunityPartnerRegionCollection {
  total: Int!
  skip: Int!
  limit: Int!
  items: [CmsRegion]!
}

"""
[See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/string)
"""
type CmsContentTypeString implements CmsEntry {
  sys: CmsSys!
  contentfulMetadata: CmsContentfulMetadata!
  linkedFrom(allowedLocales: [String]): CmsContentTypeStringLinkingCollections
  key(locale: String): String
  value(locale: String): String
  richValue(locale: String): CmsContentTypeStringRichValue
  subvalues(skip: Int = 0, limit: Int = 100, preview: Boolean, locale: String): CmsContentTypeStringSubvalueCollection
  json(locale: String): CmsJSON
}

type CmsContentTypeStringCollection {
  total: Int!
  skip: Int!
  limit: Int!
  items: [CmsContentTypeString]!
}

input CmsContentTypeStringFilter {
  sys: CmsSysFilter
  contentfulMetadata: CmsContentfulMetadataFilter
  key_exists: Boolean
  key: String
  key_not: String
  key_in: [String]
  key_not_in: [String]
  key_contains: String
  key_not_contains: String
  value_exists: Boolean
  value: String
  value_not: String
  value_in: [String]
  value_not_in: [String]
  value_contains: String
  value_not_contains: String
  richValue_exists: Boolean
  richValue_contains: String
  richValue_not_contains: String
  subvalueCollection_exists: Boolean
  OR: [CmsContentTypeStringFilter]
  AND: [CmsContentTypeStringFilter]
}

type CmsContentTypeStringLinkingCollections {
  entries(skip: Int = 0, limit: Int = 100, preview: Boolean, locale: String): CmsEntryCollection
  strings(skip: Int = 0, limit: Int = 100, preview: Boolean, locale: String): CmsContentTypeStringCollection
}

enum CmsContentTypeStringOrder {
  key_ASC
  key_DESC
  sys_id_ASC
  sys_id_DESC
  sys_publishedAt_ASC
  sys_publishedAt_DESC
  sys_firstPublishedAt_ASC
  sys_firstPublishedAt_DESC
  sys_publishedVersion_ASC
  sys_publishedVersion_DESC
}

type CmsContentTypeStringRichValue {
  json: CmsJSON!
  links: CmsContentTypeStringRichValueLinks!
}

type CmsContentTypeStringRichValueAssets {
  hyperlink: [CmsAsset]!
  block: [CmsAsset]!
}

type CmsContentTypeStringRichValueEntries {
  inline: [CmsEntry]!
  hyperlink: [CmsEntry]!
  block: [CmsEntry]!
}

type CmsContentTypeStringRichValueLinks {
  entries: CmsContentTypeStringRichValueEntries!
  assets: CmsContentTypeStringRichValueAssets!
}

type CmsContentTypeStringSubvalueCollection {
  total: Int!
  skip: Int!
  limit: Int!
  items: [CmsContentTypeString]!
}

type CmsContentfulMetadata {
  tags: [CmsContentfulTag]!
}

input CmsContentfulMetadataFilter {
  tags_exists: Boolean
  tags: CmsContentfulMetadataTagsFilter
}

input CmsContentfulMetadataTagsFilter {
  id_contains_all: [String]
  id_contains_some: [String]
  id_contains_none: [String]
}

"""
Represents a tag entity for finding and organizing content easily.
    Find out more here: https://www.contentful.com/developers/docs/references/content-delivery-api/#/reference/content-tags
"""
type CmsContentfulTag {
  id: String
  name: String
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z,
    compliant with the 'date-time' format outlined in section 5.6 of
    the RFC 3339 profile of the ISO 8601 standard for representation
    of dates and times using the Gregorian calendar.
"""
scalar CmsDateTime

"""
The 'Dimension' type represents dimensions as whole numeric values between `1` and `4000`.
"""
scalar CmsDimension

interface CmsEntry {
  sys: CmsSys!
  contentfulMetadata: CmsContentfulMetadata!
}

type CmsEntryCollection {
  total: Int!
  skip: Int!
  limit: Int!
  items: [CmsEntry]!
}

input CmsEntryFilter {
  sys: CmsSysFilter
  contentfulMetadata: CmsContentfulMetadataFilter
  OR: [CmsEntryFilter]
  AND: [CmsEntryFilter]
}

enum CmsEntryOrder {
  sys_id_ASC
  sys_id_DESC
  sys_publishedAt_ASC
  sys_publishedAt_DESC
  sys_firstPublishedAt_ASC
  sys_firstPublishedAt_DESC
  sys_publishedVersion_ASC
  sys_publishedVersion_DESC
}

"""
[See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/event)
"""
type CmsEvent implements CmsEntry {
  sys: CmsSys!
  contentfulMetadata: CmsContentfulMetadata!
  linkedFrom(allowedLocales: [String]): CmsEventLinkingCollections
  id(locale: String): String
  title(locale: String): String
  program(preview: Boolean, locale: String): CmsProgram
  registrationsOpenAt(locale: String): CmsDateTime
  registrationsCloseAt(locale: String): CmsDateTime
  startsAt(locale: String): CmsDateTime
  endsAt(locale: String): CmsDateTime
  awardsAt(locale: String): CmsDateTime
  calendarReleaseDate(locale: String): CmsDateTime
  notice(locale: String): CmsEventNotice
  theme(locale: String): String
  themeBackgrounds(skip: Int = 0, limit: Int = 100, preview: Boolean, locale: String): CmsAssetCollection
  themeLogoBackgrounds(skip: Int = 0, limit: Int = 100, preview: Boolean, locale: String): CmsAssetCollection
  kickoffVideo(preview: Boolean, locale: String): CmsAsset
  kickoffVideoCaptions(preview: Boolean, locale: String): CmsAsset
  participantRoleId(locale: String): String
  statEventCount(locale: String): Int
  statStudentCount(locale: String): Int
  statLowInterestCount(locale: String): Int
  statLowInterestContinuedCount(locale: String): Int
  subEventIds(locale: String): CmsJSON
  posters(skip: Int = 0, limit: Int = 100, preview: Boolean, locale: String): CmsAssetCollection
}

type CmsEventCollection {
  total: Int!
  skip: Int!
  limit: Int!
  items: [CmsEvent]!
}

input CmsEventFilter {
  program: CmscfProgramNestedFilter
  sys: CmsSysFilter
  contentfulMetadata: CmsContentfulMetadataFilter
  id_exists: Boolean
  id: String
  id_not: String
  id_in: [String]
  id_not_in: [String]
  id_contains: String
  id_not_contains: String
  title_exists: Boolean
  title: String
  title_not: String
  title_in: [String]
  title_not_in: [String]
  title_contains: String
  title_not_contains: String
  program_exists: Boolean
  registrationsOpenAt_exists: Boolean
  registrationsOpenAt: CmsDateTime
  registrationsOpenAt_not: CmsDateTime
  registrationsOpenAt_in: [CmsDateTime]
  registrationsOpenAt_not_in: [CmsDateTime]
  registrationsOpenAt_gt: CmsDateTime
  registrationsOpenAt_gte: CmsDateTime
  registrationsOpenAt_lt: CmsDateTime
  registrationsOpenAt_lte: CmsDateTime
  registrationsCloseAt_exists: Boolean
  registrationsCloseAt: CmsDateTime
  registrationsCloseAt_not: CmsDateTime
  registrationsCloseAt_in: [CmsDateTime]
  registrationsCloseAt_not_in: [CmsDateTime]
  registrationsCloseAt_gt: CmsDateTime
  registrationsCloseAt_gte: CmsDateTime
  registrationsCloseAt_lt: CmsDateTime
  registrationsCloseAt_lte: CmsDateTime
  startsAt_exists: Boolean
  startsAt: CmsDateTime
  startsAt_not: CmsDateTime
  startsAt_in: [CmsDateTime]
  startsAt_not_in: [CmsDateTime]
  startsAt_gt: CmsDateTime
  startsAt_gte: CmsDateTime
  startsAt_lt: CmsDateTime
  startsAt_lte: CmsDateTime
  endsAt_exists: Boolean
  endsAt: CmsDateTime
  endsAt_not: CmsDateTime
  endsAt_in: [CmsDateTime]
  endsAt_not_in: [CmsDateTime]
  endsAt_gt: CmsDateTime
  endsAt_gte: CmsDateTime
  endsAt_lt: CmsDateTime
  endsAt_lte: CmsDateTime
  awardsAt_exists: Boolean
  awardsAt: CmsDateTime
  awardsAt_not: CmsDateTime
  awardsAt_in: [CmsDateTime]
  awardsAt_not_in: [CmsDateTime]
  awardsAt_gt: CmsDateTime
  awardsAt_gte: CmsDateTime
  awardsAt_lt: CmsDateTime
  awardsAt_lte: CmsDateTime
  calendarReleaseDate_exists: Boolean
  calendarReleaseDate: CmsDateTime
  calendarReleaseDate_not: CmsDateTime
  calendarReleaseDate_in: [CmsDateTime]
  calendarReleaseDate_not_in: [CmsDateTime]
  calendarReleaseDate_gt: CmsDateTime
  calendarReleaseDate_gte: CmsDateTime
  calendarReleaseDate_lt: CmsDateTime
  calendarReleaseDate_lte: CmsDateTime
  notice_exists: Boolean
  notice_contains: String
  notice_not_contains: String
  theme_exists: Boolean
  theme: String
  theme_not: String
  theme_in: [String]
  theme_not_in: [String]
  theme_contains: String
  theme_not_contains: String
  themeBackgroundsCollection_exists: Boolean
  themeLogoBackgroundsCollection_exists: Boolean
  kickoffVideo_exists: Boolean
  kickoffVideoCaptions_exists: Boolean
  participantRoleId_exists: Boolean
  participantRoleId: String
  participantRoleId_not: String
  participantRoleId_in: [String]
  participantRoleId_not_in: [String]
  participantRoleId_contains: String
  participantRoleId_not_contains: String
  statEventCount_exists: Boolean
  statEventCount: Int
  statEventCount_not: Int
  statEventCount_in: [Int]
  statEventCount_not_in: [Int]
  statEventCount_gt: Int
  statEventCount_gte: Int
  statEventCount_lt: Int
  statEventCount_lte: Int
  statStudentCount_exists: Boolean
  statStudentCount: Int
  statStudentCount_not: Int
  statStudentCount_in: [Int]
  statStudentCount_not_in: [Int]
  statStudentCount_gt: Int
  statStudentCount_gte: Int
  statStudentCount_lt: Int
  statStudentCount_lte: Int
  statLowInterestCount_exists: Boolean
  statLowInterestCount: Int
  statLowInterestCount_not: Int
  statLowInterestCount_in: [Int]
  statLowInterestCount_not_in: [Int]
  statLowInterestCount_gt: Int
  statLowInterestCount_gte: Int
  statLowInterestCount_lt: Int
  statLowInterestCount_lte: Int
  statLowInterestContinuedCount_exists: Boolean
  statLowInterestContinuedCount: Int
  statLowInterestContinuedCount_not: Int
  statLowInterestContinuedCount_in: [Int]
  statLowInterestContinuedCount_not_in: [Int]
  statLowInterestContinuedCount_gt: Int
  statLowInterestContinuedCount_gte: Int
  statLowInterestContinuedCount_lt: Int
  statLowInterestContinuedCount_lte: Int
  postersCollection_exists: Boolean
  OR: [CmsEventFilter]
  AND: [CmsEventFilter]
}

type CmsEventLinkingCollections {
  entries(skip: Int = 0, limit: Int = 100, preview: Boolean, locale: String): CmsEntryCollection
  pressPhotos(skip: Int = 0, limit: Int = 100, preview: Boolean, locale: String): CmsPressPhotoCollection
}

type CmsEventNotice {
  json: CmsJSON!
  links: CmsEventNoticeLinks!
}

type CmsEventNoticeAssets {
  hyperlink: [CmsAsset]!
  block: [CmsAsset]!
}

type CmsEventNoticeEntries {
  inline: [CmsEntry]!
  hyperlink: [CmsEntry]!
  block: [CmsEntry]!
}

type CmsEventNoticeLinks {
  entries: CmsEventNoticeEntries!
  assets: CmsEventNoticeAssets!
}

enum CmsEventOrder {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  registrationsOpenAt_ASC
  registrationsOpenAt_DESC
  registrationsCloseAt_ASC
  registrationsCloseAt_DESC
  startsAt_ASC
  startsAt_DESC
  endsAt_ASC
  endsAt_DESC
  awardsAt_ASC
  awardsAt_DESC
  calendarReleaseDate_ASC
  calendarReleaseDate_DESC
  theme_ASC
  theme_DESC
  participantRoleId_ASC
  participantRoleId_DESC
  statEventCount_ASC
  statEventCount_DESC
  statStudentCount_ASC
  statStudentCount_DESC
  statLowInterestCount_ASC
  statLowInterestCount_DESC
  statLowInterestContinuedCount_ASC
  statLowInterestContinuedCount_DESC
  sys_id_ASC
  sys_id_DESC
  sys_publishedAt_ASC
  sys_publishedAt_DESC
  sys_firstPublishedAt_ASC
  sys_firstPublishedAt_DESC
  sys_publishedVersion_ASC
  sys_publishedVersion_DESC
}

"""
[See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/faq)
"""
type CmsFaq implements CmsEntry {
  sys: CmsSys!
  contentfulMetadata: CmsContentfulMetadata!
  linkedFrom(allowedLocales: [String]): CmsFaqLinkingCollections
  tags(locale: String): [String]
  title(locale: String): String
  program(preview: Boolean, locale: String): CmsProgram
  featured(locale: String): Boolean
  audience(locale: String): [String]
  answer(locale: String): CmsFaqAnswer
  relatedAnswers(skip: Int = 0, limit: Int = 100, preview: Boolean, locale: String): CmsFaqRelatedAnswersCollection
}

type CmsFaqAnswer {
  json: CmsJSON!
  links: CmsFaqAnswerLinks!
}

type CmsFaqAnswerAssets {
  hyperlink: [CmsAsset]!
  block: [CmsAsset]!
}

type CmsFaqAnswerEntries {
  inline: [CmsEntry]!
  hyperlink: [CmsEntry]!
  block: [CmsEntry]!
}

type CmsFaqAnswerLinks {
  entries: CmsFaqAnswerEntries!
  assets: CmsFaqAnswerAssets!
}

type CmsFaqCollection {
  total: Int!
  skip: Int!
  limit: Int!
  items: [CmsFaq]!
}

input CmsFaqFilter {
  program: CmscfProgramNestedFilter
  sys: CmsSysFilter
  contentfulMetadata: CmsContentfulMetadataFilter
  tags_exists: Boolean
  tags_contains_all: [String]
  tags_contains_some: [String]
  tags_contains_none: [String]
  title_exists: Boolean
  title: String
  title_not: String
  title_in: [String]
  title_not_in: [String]
  title_contains: String
  title_not_contains: String
  program_exists: Boolean
  featured_exists: Boolean
  featured: Boolean
  featured_not: Boolean
  audience_exists: Boolean
  audience_contains_all: [String]
  audience_contains_some: [String]
  audience_contains_none: [String]
  answer_exists: Boolean
  answer_contains: String
  answer_not_contains: String
  relatedAnswersCollection_exists: Boolean
  OR: [CmsFaqFilter]
  AND: [CmsFaqFilter]
}

type CmsFaqLinkingCollections {
  entries(skip: Int = 0, limit: Int = 100, preview: Boolean, locale: String): CmsEntryCollection
  faqs(skip: Int = 0, limit: Int = 100, preview: Boolean, locale: String): CmsFaqCollection
}

enum CmsFaqOrder {
  title_ASC
  title_DESC
  featured_ASC
  featured_DESC
  sys_id_ASC
  sys_id_DESC
  sys_publishedAt_ASC
  sys_publishedAt_DESC
  sys_firstPublishedAt_ASC
  sys_firstPublishedAt_DESC
  sys_publishedVersion_ASC
  sys_publishedVersion_DESC
}

type CmsFaqRelatedAnswersCollection {
  total: Int!
  skip: Int!
  limit: Int!
  items: [CmsFaq]!
}

"""
[See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/form)
"""
type CmsForm implements CmsEntry {
  sys: CmsSys!
  contentfulMetadata: CmsContentfulMetadata!
  linkedFrom(allowedLocales: [String]): CmsFormLinkingCollections
  slug(locale: String): String
  image(preview: Boolean, locale: String): CmsAsset
  title(locale: String): String
  details(locale: String): CmsFormDetails
  sidebar(locale: String): CmsFormSidebar
  cognitoForm(locale: String): Int
  prefill(locale: String): CmsJSON
}

type CmsFormCollection {
  total: Int!
  skip: Int!
  limit: Int!
  items: [CmsForm]!
}

type CmsFormDetails {
  json: CmsJSON!
  links: CmsFormDetailsLinks!
}

type CmsFormDetailsAssets {
  hyperlink: [CmsAsset]!
  block: [CmsAsset]!
}

type CmsFormDetailsEntries {
  inline: [CmsEntry]!
  hyperlink: [CmsEntry]!
  block: [CmsEntry]!
}

type CmsFormDetailsLinks {
  entries: CmsFormDetailsEntries!
  assets: CmsFormDetailsAssets!
}

input CmsFormFilter {
  sys: CmsSysFilter
  contentfulMetadata: CmsContentfulMetadataFilter
  slug_exists: Boolean
  slug: String
  slug_not: String
  slug_in: [String]
  slug_not_in: [String]
  slug_contains: String
  slug_not_contains: String
  image_exists: Boolean
  title_exists: Boolean
  title: String
  title_not: String
  title_in: [String]
  title_not_in: [String]
  title_contains: String
  title_not_contains: String
  details_exists: Boolean
  details_contains: String
  details_not_contains: String
  sidebar_exists: Boolean
  sidebar_contains: String
  sidebar_not_contains: String
  cognitoForm_exists: Boolean
  cognitoForm: Int
  cognitoForm_not: Int
  cognitoForm_in: [Int]
  cognitoForm_not_in: [Int]
  cognitoForm_gt: Int
  cognitoForm_gte: Int
  cognitoForm_lt: Int
  cognitoForm_lte: Int
  OR: [CmsFormFilter]
  AND: [CmsFormFilter]
}

type CmsFormLinkingCollections {
  entries(skip: Int = 0, limit: Int = 100, preview: Boolean, locale: String): CmsEntryCollection
}

enum CmsFormOrder {
  slug_ASC
  slug_DESC
  title_ASC
  title_DESC
  cognitoForm_ASC
  cognitoForm_DESC
  sys_id_ASC
  sys_id_DESC
  sys_publishedAt_ASC
  sys_publishedAt_DESC
  sys_firstPublishedAt_ASC
  sys_firstPublishedAt_DESC
  sys_publishedVersion_ASC
  sys_publishedVersion_DESC
}

type CmsFormSidebar {
  json: CmsJSON!
  links: CmsFormSidebarLinks!
}

type CmsFormSidebarAssets {
  hyperlink: [CmsAsset]!
  block: [CmsAsset]!
}

type CmsFormSidebarEntries {
  inline: [CmsEntry]!
  hyperlink: [CmsEntry]!
  block: [CmsEntry]!
}

type CmsFormSidebarLinks {
  entries: CmsFormSidebarEntries!
  assets: CmsFormSidebarAssets!
}

"""
[See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/globalSponsor)
"""
type CmsGlobalSponsor implements CmsEntry {
  sys: CmsSys!
  contentfulMetadata: CmsContentfulMetadata!
  linkedFrom(allowedLocales: [String]): CmsGlobalSponsorLinkingCollections
  name(locale: String): String
  type(locale: String): String
  logo(preview: Boolean, locale: String): CmsAsset
  link(locale: String): String
  twitterUsername(locale: String): String
  instagramUsername(locale: String): String
  shortDescription(locale: String): String
  description(locale: String): String
  perks(locale: String): String
  audio(preview: Boolean, locale: String): CmsAsset
}

type CmsGlobalSponsorCollection {
  total: Int!
  skip: Int!
  limit: Int!
  items: [CmsGlobalSponsor]!
}

input CmsGlobalSponsorFilter {
  sys: CmsSysFilter
  contentfulMetadata: CmsContentfulMetadataFilter
  name_exists: Boolean
  name: String
  name_not: String
  name_in: [String]
  name_not_in: [String]
  name_contains: String
  name_not_contains: String
  type_exists: Boolean
  type: String
  type_not: String
  type_in: [String]
  type_not_in: [String]
  type_contains: String
  type_not_contains: String
  logo_exists: Boolean
  link_exists: Boolean
  link: String
  link_not: String
  link_in: [String]
  link_not_in: [String]
  link_contains: String
  link_not_contains: String
  twitterUsername_exists: Boolean
  twitterUsername: String
  twitterUsername_not: String
  twitterUsername_in: [String]
  twitterUsername_not_in: [String]
  twitterUsername_contains: String
  twitterUsername_not_contains: String
  instagramUsername_exists: Boolean
  instagramUsername: String
  instagramUsername_not: String
  instagramUsername_in: [String]
  instagramUsername_not_in: [String]
  instagramUsername_contains: String
  instagramUsername_not_contains: String
  shortDescription_exists: Boolean
  shortDescription: String
  shortDescription_not: String
  shortDescription_in: [String]
  shortDescription_not_in: [String]
  shortDescription_contains: String
  shortDescription_not_contains: String
  description_exists: Boolean
  description: String
  description_not: String
  description_in: [String]
  description_not_in: [String]
  description_contains: String
  description_not_contains: String
  perks_exists: Boolean
  perks: String
  perks_not: String
  perks_in: [String]
  perks_not_in: [String]
  perks_contains: String
  perks_not_contains: String
  audio_exists: Boolean
  OR: [CmsGlobalSponsorFilter]
  AND: [CmsGlobalSponsorFilter]
}

type CmsGlobalSponsorLinkingCollections {
  entries(skip: Int = 0, limit: Int = 100, preview: Boolean, locale: String): CmsEntryCollection
  programs(skip: Int = 0, limit: Int = 100, preview: Boolean, locale: String): CmsProgramCollection
  hiringCompanies(skip: Int = 0, limit: Int = 100, preview: Boolean, locale: String): CmsHiringCompanyCollection
}

enum CmsGlobalSponsorOrder {
  name_ASC
  name_DESC
  type_ASC
  type_DESC
  link_ASC
  link_DESC
  twitterUsername_ASC
  twitterUsername_DESC
  instagramUsername_ASC
  instagramUsername_DESC
  shortDescription_ASC
  shortDescription_DESC
  sys_id_ASC
  sys_id_DESC
  sys_publishedAt_ASC
  sys_publishedAt_DESC
  sys_firstPublishedAt_ASC
  sys_firstPublishedAt_DESC
  sys_publishedVersion_ASC
  sys_publishedVersion_DESC
}

"""The 'HexColor' type represents color in `rgb:ffffff` string format."""
scalar CmsHexColor

"""
[See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/hiringCompany)
"""
type CmsHiringCompany implements CmsEntry {
  sys: CmsSys!
  contentfulMetadata: CmsContentfulMetadata!
  linkedFrom(allowedLocales: [String]): CmsHiringCompanyLinkingCollections
  name(locale: String): String
  logo(preview: Boolean, locale: String): CmsAsset
  description(locale: String): CmsHiringCompanyDescription
  url(locale: String): String
  featured(locale: String): Boolean
  relatedSponsor(preview: Boolean, locale: String): CmsGlobalSponsor
  alumniReferrals(locale: String): [String]
  alumniReferralAccounts: [AccountUser]
}

type CmsHiringCompanyCollection {
  total: Int!
  skip: Int!
  limit: Int!
  items: [CmsHiringCompany]!
}

type CmsHiringCompanyDescription {
  json: CmsJSON!
  links: CmsHiringCompanyDescriptionLinks!
}

type CmsHiringCompanyDescriptionAssets {
  hyperlink: [CmsAsset]!
  block: [CmsAsset]!
}

type CmsHiringCompanyDescriptionEntries {
  inline: [CmsEntry]!
  hyperlink: [CmsEntry]!
  block: [CmsEntry]!
}

type CmsHiringCompanyDescriptionLinks {
  entries: CmsHiringCompanyDescriptionEntries!
  assets: CmsHiringCompanyDescriptionAssets!
}

input CmsHiringCompanyFilter {
  relatedSponsor: CmscfGlobalSponsorNestedFilter
  sys: CmsSysFilter
  contentfulMetadata: CmsContentfulMetadataFilter
  name_exists: Boolean
  name: String
  name_not: String
  name_in: [String]
  name_not_in: [String]
  name_contains: String
  name_not_contains: String
  logo_exists: Boolean
  description_exists: Boolean
  description_contains: String
  description_not_contains: String
  url_exists: Boolean
  url: String
  url_not: String
  url_in: [String]
  url_not_in: [String]
  url_contains: String
  url_not_contains: String
  featured_exists: Boolean
  featured: Boolean
  featured_not: Boolean
  relatedSponsor_exists: Boolean
  alumniReferrals_exists: Boolean
  alumniReferrals_contains_all: [String]
  alumniReferrals_contains_some: [String]
  alumniReferrals_contains_none: [String]
  OR: [CmsHiringCompanyFilter]
  AND: [CmsHiringCompanyFilter]
}

type CmsHiringCompanyLinkingCollections {
  entries(skip: Int = 0, limit: Int = 100, preview: Boolean, locale: String): CmsEntryCollection
  hiringPosts(skip: Int = 0, limit: Int = 100, preview: Boolean, locale: String): CmsHiringPostCollection
}

enum CmsHiringCompanyOrder {
  name_ASC
  name_DESC
  url_ASC
  url_DESC
  featured_ASC
  featured_DESC
  sys_id_ASC
  sys_id_DESC
  sys_publishedAt_ASC
  sys_publishedAt_DESC
  sys_firstPublishedAt_ASC
  sys_firstPublishedAt_DESC
  sys_publishedVersion_ASC
  sys_publishedVersion_DESC
}

"""
[See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/hiringPost)
"""
type CmsHiringPost implements CmsEntry {
  sys: CmsSys!
  contentfulMetadata: CmsContentfulMetadata!
  linkedFrom(allowedLocales: [String]): CmsHiringPostLinkingCollections
  title(locale: String): String
  description(locale: String): CmsHiringPostDescription
  url(locale: String): String
  company(preview: Boolean, locale: String): CmsHiringCompany
  regions(skip: Int = 0, limit: Int = 100, preview: Boolean, locale: String): CmsHiringPostRegionsCollection
  type(locale: String): String
  paid(locale: String): Boolean
}

type CmsHiringPostCollection {
  total: Int!
  skip: Int!
  limit: Int!
  items: [CmsHiringPost]!
}

type CmsHiringPostDescription {
  json: CmsJSON!
  links: CmsHiringPostDescriptionLinks!
}

type CmsHiringPostDescriptionAssets {
  hyperlink: [CmsAsset]!
  block: [CmsAsset]!
}

type CmsHiringPostDescriptionEntries {
  inline: [CmsEntry]!
  hyperlink: [CmsEntry]!
  block: [CmsEntry]!
}

type CmsHiringPostDescriptionLinks {
  entries: CmsHiringPostDescriptionEntries!
  assets: CmsHiringPostDescriptionAssets!
}

input CmsHiringPostFilter {
  company: CmscfHiringCompanyNestedFilter
  sys: CmsSysFilter
  contentfulMetadata: CmsContentfulMetadataFilter
  title_exists: Boolean
  title: String
  title_not: String
  title_in: [String]
  title_not_in: [String]
  title_contains: String
  title_not_contains: String
  description_exists: Boolean
  description_contains: String
  description_not_contains: String
  url_exists: Boolean
  url: String
  url_not: String
  url_in: [String]
  url_not_in: [String]
  url_contains: String
  url_not_contains: String
  company_exists: Boolean
  regionsCollection_exists: Boolean
  type_exists: Boolean
  type: String
  type_not: String
  type_in: [String]
  type_not_in: [String]
  type_contains: String
  type_not_contains: String
  paid_exists: Boolean
  paid: Boolean
  paid_not: Boolean
  OR: [CmsHiringPostFilter]
  AND: [CmsHiringPostFilter]
}

type CmsHiringPostLinkingCollections {
  entries(skip: Int = 0, limit: Int = 100, preview: Boolean, locale: String): CmsEntryCollection
}

enum CmsHiringPostOrder {
  title_ASC
  title_DESC
  url_ASC
  url_DESC
  type_ASC
  type_DESC
  paid_ASC
  paid_DESC
  sys_id_ASC
  sys_id_DESC
  sys_publishedAt_ASC
  sys_publishedAt_DESC
  sys_firstPublishedAt_ASC
  sys_firstPublishedAt_DESC
  sys_publishedVersion_ASC
  sys_publishedVersion_DESC
}

type CmsHiringPostRegionsCollection {
  total: Int!
  skip: Int!
  limit: Int!
  items: [CmsRegion]!
}

enum CmsImageFormat {
  """JPG image format."""
  JPG

  """
  Progressive JPG format stores multiple passes of an image in progressively higher detail.
          When a progressive image is loading, the viewer will first see a lower quality pixelated version which
          will gradually improve in detail, until the image is fully downloaded. This is to display an image as
          early as possible to make the layout look as designed.
  """
  JPG_PROGRESSIVE

  """PNG image format"""
  PNG

  """
  8-bit PNG images support up to 256 colors and weigh less than the standard 24-bit PNG equivalent.
          The 8-bit PNG format is mostly used for simple images, such as icons or logos.
  """
  PNG8

  """WebP image format."""
  WEBP
}

enum CmsImageResizeFocus {
  """Focus the resizing on the center."""
  CENTER

  """Focus the resizing on the top."""
  TOP

  """Focus the resizing on the top right."""
  TOP_RIGHT

  """Focus the resizing on the right."""
  RIGHT

  """Focus the resizing on the bottom right."""
  BOTTOM_RIGHT

  """Focus the resizing on the bottom."""
  BOTTOM

  """Focus the resizing on the bottom left."""
  BOTTOM_LEFT

  """Focus the resizing on the left."""
  LEFT

  """Focus the resizing on the top left."""
  TOP_LEFT

  """Focus the resizing on the largest face."""
  FACE

  """Focus the resizing on the area containing all the faces."""
  FACES
}

enum CmsImageResizeStrategy {
  """Resizes the image to fit into the specified dimensions."""
  FIT

  """
  Resizes the image to the specified dimensions, padding the image if needed.
          Uses desired background color as padding color.
  """
  PAD

  """
  Resizes the image to the specified dimensions, cropping the image if needed.
  """
  FILL

  """
  Resizes the image to the specified dimensions, changing the original aspect ratio if needed.
  """
  SCALE

  """
  Crops a part of the original image to fit into the specified dimensions.
  """
  CROP

  """Creates a thumbnail from the image."""
  THUMB
}

input CmsImageTransformOptions {
  """Desired width in pixels. Defaults to the original image width."""
  width: CmsDimension

  """Desired height in pixels. Defaults to the original image height."""
  height: CmsDimension

  """
  Desired quality of the image in percents.
          Used for `PNG8`, `JPG`, `JPG_PROGRESSIVE` and `WEBP` formats.
  """
  quality: CmsQuality

  """
  Desired corner radius in pixels.
          Results in an image with rounded corners (pass `-1` for a full circle/ellipse).
          Defaults to `0`. Uses desired background color as padding color,
          unless the format is `JPG` or `JPG_PROGRESSIVE` and resize strategy is `PAD`, then defaults to white.
  """
  cornerRadius: Int

  """Desired resize strategy. Defaults to `FIT`."""
  resizeStrategy: CmsImageResizeStrategy

  """Desired resize focus area. Defaults to `CENTER`."""
  resizeFocus: CmsImageResizeFocus

  """
  Desired background color, used with corner radius or `PAD` resize strategy.
          Defaults to transparent (for `PNG`, `PNG8` and `WEBP`) or white (for `JPG` and `JPG_PROGRESSIVE`).
  """
  backgroundColor: CmsHexColor

  """Desired image format. Defaults to the original image format."""
  format: CmsImageFormat
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar CmsJSON

"""
[See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/legalDocument)
"""
type CmsLegalDocument implements CmsEntry {
  sys: CmsSys!
  contentfulMetadata: CmsContentfulMetadata!
  linkedFrom(allowedLocales: [String]): CmsLegalDocumentLinkingCollections
  id(locale: String): String
  title(locale: String): String
  date(locale: String): CmsDateTime
  type(locale: String): String
  file(preview: Boolean, locale: String): CmsAsset
}

type CmsLegalDocumentCollection {
  total: Int!
  skip: Int!
  limit: Int!
  items: [CmsLegalDocument]!
}

input CmsLegalDocumentFilter {
  sys: CmsSysFilter
  contentfulMetadata: CmsContentfulMetadataFilter
  id_exists: Boolean
  id: String
  id_not: String
  id_in: [String]
  id_not_in: [String]
  id_contains: String
  id_not_contains: String
  title_exists: Boolean
  title: String
  title_not: String
  title_in: [String]
  title_not_in: [String]
  title_contains: String
  title_not_contains: String
  date_exists: Boolean
  date: CmsDateTime
  date_not: CmsDateTime
  date_in: [CmsDateTime]
  date_not_in: [CmsDateTime]
  date_gt: CmsDateTime
  date_gte: CmsDateTime
  date_lt: CmsDateTime
  date_lte: CmsDateTime
  type_exists: Boolean
  type: String
  type_not: String
  type_in: [String]
  type_not_in: [String]
  type_contains: String
  type_not_contains: String
  file_exists: Boolean
  OR: [CmsLegalDocumentFilter]
  AND: [CmsLegalDocumentFilter]
}

type CmsLegalDocumentLinkingCollections {
  entries(skip: Int = 0, limit: Int = 100, preview: Boolean, locale: String): CmsEntryCollection
}

enum CmsLegalDocumentOrder {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  date_ASC
  date_DESC
  type_ASC
  type_DESC
  sys_id_ASC
  sys_id_DESC
  sys_publishedAt_ASC
  sys_publishedAt_DESC
  sys_firstPublishedAt_ASC
  sys_firstPublishedAt_DESC
  sys_publishedVersion_ASC
  sys_publishedVersion_DESC
}

type CmsLocation {
  lat: Float
  lon: Float
}

"""
[See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/newsCoverage)
"""
type CmsNewsCoverage implements CmsEntry {
  sys: CmsSys!
  contentfulMetadata: CmsContentfulMetadata!
  linkedFrom(allowedLocales: [String]): CmsNewsCoverageLinkingCollections
  title(locale: String): String
  date(locale: String): CmsDateTime
  featured(locale: String): Boolean
  publicationName(locale: String): String
  publicationLogo(preview: Boolean, locale: String): CmsAsset
  url(locale: String): String
}

type CmsNewsCoverageCollection {
  total: Int!
  skip: Int!
  limit: Int!
  items: [CmsNewsCoverage]!
}

input CmsNewsCoverageFilter {
  sys: CmsSysFilter
  contentfulMetadata: CmsContentfulMetadataFilter
  title_exists: Boolean
  title: String
  title_not: String
  title_in: [String]
  title_not_in: [String]
  title_contains: String
  title_not_contains: String
  date_exists: Boolean
  date: CmsDateTime
  date_not: CmsDateTime
  date_in: [CmsDateTime]
  date_not_in: [CmsDateTime]
  date_gt: CmsDateTime
  date_gte: CmsDateTime
  date_lt: CmsDateTime
  date_lte: CmsDateTime
  featured_exists: Boolean
  featured: Boolean
  featured_not: Boolean
  publicationName_exists: Boolean
  publicationName: String
  publicationName_not: String
  publicationName_in: [String]
  publicationName_not_in: [String]
  publicationName_contains: String
  publicationName_not_contains: String
  publicationLogo_exists: Boolean
  url_exists: Boolean
  url: String
  url_not: String
  url_in: [String]
  url_not_in: [String]
  url_contains: String
  url_not_contains: String
  OR: [CmsNewsCoverageFilter]
  AND: [CmsNewsCoverageFilter]
}

type CmsNewsCoverageLinkingCollections {
  entries(skip: Int = 0, limit: Int = 100, preview: Boolean, locale: String): CmsEntryCollection
}

enum CmsNewsCoverageOrder {
  title_ASC
  title_DESC
  date_ASC
  date_DESC
  featured_ASC
  featured_DESC
  publicationName_ASC
  publicationName_DESC
  url_ASC
  url_DESC
  sys_id_ASC
  sys_id_DESC
  sys_publishedAt_ASC
  sys_publishedAt_DESC
  sys_firstPublishedAt_ASC
  sys_firstPublishedAt_DESC
  sys_publishedVersion_ASC
  sys_publishedVersion_DESC
}

"""
[See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/pressPhoto)
"""
type CmsPressPhoto implements CmsEntry {
  sys: CmsSys!
  contentfulMetadata: CmsContentfulMetadata!
  linkedFrom(allowedLocales: [String]): CmsPressPhotoLinkingCollections
  photo(preview: Boolean, locale: String): CmsAsset
  event(preview: Boolean, locale: String): CmsEvent
  region(preview: Boolean, locale: String): CmsRegion
  tags(locale: String): [String]
  subProgram(preview: Boolean, locale: String): CmsProgram
}

type CmsPressPhotoCollection {
  total: Int!
  skip: Int!
  limit: Int!
  items: [CmsPressPhoto]!
}

input CmsPressPhotoFilter {
  event: CmscfEventNestedFilter
  region: CmscfRegionNestedFilter
  subProgram: CmscfProgramNestedFilter
  sys: CmsSysFilter
  contentfulMetadata: CmsContentfulMetadataFilter
  photo_exists: Boolean
  event_exists: Boolean
  region_exists: Boolean
  tags_exists: Boolean
  tags_contains_all: [String]
  tags_contains_some: [String]
  tags_contains_none: [String]
  subProgram_exists: Boolean
  OR: [CmsPressPhotoFilter]
  AND: [CmsPressPhotoFilter]
}

type CmsPressPhotoLinkingCollections {
  entries(skip: Int = 0, limit: Int = 100, preview: Boolean, locale: String): CmsEntryCollection
}

enum CmsPressPhotoOrder {
  sys_id_ASC
  sys_id_DESC
  sys_publishedAt_ASC
  sys_publishedAt_DESC
  sys_firstPublishedAt_ASC
  sys_firstPublishedAt_DESC
  sys_publishedVersion_ASC
  sys_publishedVersion_DESC
}

"""
[See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/program)
"""
type CmsProgram implements CmsEntry {
  sys: CmsSys!
  contentfulMetadata: CmsContentfulMetadata!
  linkedFrom(allowedLocales: [String]): CmsProgramLinkingCollections
  name(locale: String): String
  webname(locale: String): String
  virtual(locale: String): Boolean
  type(locale: String): String
  logo(preview: Boolean, locale: String): CmsAsset
  logoWhite(preview: Boolean, locale: String): CmsAsset
  presentingSponsors(skip: Int = 0, limit: Int = 100, preview: Boolean, locale: String): CmsProgramPresentingSponsorsCollection
  url(locale: String): String
  shortDescription(locale: String): String
  description(locale: String): String
  eligibility(locale: String): CmsProgramEligibility
  educationDetails(locale: String): CmsProgramEducationDetails
  volunteerDetails(locale: String): CmsProgramVolunteerDetails
  volunteerUrl(locale: String): String
  volunteerPositions(locale: String): [String]
  volunteerBlurb(locale: String): CmsProgramVolunteerBlurb
  volunteerRecruitingResources(skip: Int = 0, limit: Int = 100, preview: Boolean, locale: String): CmsAssetCollection
  sponsorPerks(locale: String): CmsJSON
  posters(skip: Int = 0, limit: Int = 100, preview: Boolean, locale: String): CmsAssetCollection
}

type CmsProgramCollection {
  total: Int!
  skip: Int!
  limit: Int!
  items: [CmsProgram]!
}

type CmsProgramEducationDetails {
  json: CmsJSON!
  links: CmsProgramEducationDetailsLinks!
}

type CmsProgramEducationDetailsAssets {
  hyperlink: [CmsAsset]!
  block: [CmsAsset]!
}

type CmsProgramEducationDetailsEntries {
  inline: [CmsEntry]!
  hyperlink: [CmsEntry]!
  block: [CmsEntry]!
}

type CmsProgramEducationDetailsLinks {
  entries: CmsProgramEducationDetailsEntries!
  assets: CmsProgramEducationDetailsAssets!
}

type CmsProgramEligibility {
  json: CmsJSON!
  links: CmsProgramEligibilityLinks!
}

type CmsProgramEligibilityAssets {
  hyperlink: [CmsAsset]!
  block: [CmsAsset]!
}

type CmsProgramEligibilityEntries {
  inline: [CmsEntry]!
  hyperlink: [CmsEntry]!
  block: [CmsEntry]!
}

type CmsProgramEligibilityLinks {
  entries: CmsProgramEligibilityEntries!
  assets: CmsProgramEligibilityAssets!
}

input CmsProgramFilter {
  sys: CmsSysFilter
  contentfulMetadata: CmsContentfulMetadataFilter
  name_exists: Boolean
  name: String
  name_not: String
  name_in: [String]
  name_not_in: [String]
  name_contains: String
  name_not_contains: String
  webname_exists: Boolean
  webname: String
  webname_not: String
  webname_in: [String]
  webname_not_in: [String]
  webname_contains: String
  webname_not_contains: String
  virtual_exists: Boolean
  virtual: Boolean
  virtual_not: Boolean
  type_exists: Boolean
  type: String
  type_not: String
  type_in: [String]
  type_not_in: [String]
  type_contains: String
  type_not_contains: String
  logo_exists: Boolean
  logoWhite_exists: Boolean
  presentingSponsorsCollection_exists: Boolean
  url_exists: Boolean
  url: String
  url_not: String
  url_in: [String]
  url_not_in: [String]
  url_contains: String
  url_not_contains: String
  shortDescription_exists: Boolean
  shortDescription: String
  shortDescription_not: String
  shortDescription_in: [String]
  shortDescription_not_in: [String]
  shortDescription_contains: String
  shortDescription_not_contains: String
  description_exists: Boolean
  description: String
  description_not: String
  description_in: [String]
  description_not_in: [String]
  description_contains: String
  description_not_contains: String
  eligibility_exists: Boolean
  eligibility_contains: String
  eligibility_not_contains: String
  educationDetails_exists: Boolean
  educationDetails_contains: String
  educationDetails_not_contains: String
  volunteerDetails_exists: Boolean
  volunteerDetails_contains: String
  volunteerDetails_not_contains: String
  volunteerUrl_exists: Boolean
  volunteerUrl: String
  volunteerUrl_not: String
  volunteerUrl_in: [String]
  volunteerUrl_not_in: [String]
  volunteerUrl_contains: String
  volunteerUrl_not_contains: String
  volunteerPositions_exists: Boolean
  volunteerPositions_contains_all: [String]
  volunteerPositions_contains_some: [String]
  volunteerPositions_contains_none: [String]
  volunteerBlurb_exists: Boolean
  volunteerBlurb_contains: String
  volunteerBlurb_not_contains: String
  volunteerRecruitingResourcesCollection_exists: Boolean
  postersCollection_exists: Boolean
  OR: [CmsProgramFilter]
  AND: [CmsProgramFilter]
}

type CmsProgramLinkingCollections {
  entries(skip: Int = 0, limit: Int = 100, preview: Boolean, locale: String): CmsEntryCollection
  events(skip: Int = 0, limit: Int = 100, preview: Boolean, locale: String): CmsEventCollection
  awards(skip: Int = 0, limit: Int = 100, preview: Boolean, locale: String): CmsAwardCollection
  faqs(skip: Int = 0, limit: Int = 100, preview: Boolean, locale: String): CmsFaqCollection
  pressPhotos(skip: Int = 0, limit: Int = 100, preview: Boolean, locale: String): CmsPressPhotoCollection
  testimonials(skip: Int = 0, limit: Int = 100, preview: Boolean, locale: String): CmsTestimonialCollection
  announcements(skip: Int = 0, limit: Int = 100, preview: Boolean, locale: String): CmsAnnouncementCollection
}

enum CmsProgramOrder {
  name_ASC
  name_DESC
  webname_ASC
  webname_DESC
  virtual_ASC
  virtual_DESC
  type_ASC
  type_DESC
  url_ASC
  url_DESC
  shortDescription_ASC
  shortDescription_DESC
  volunteerUrl_ASC
  volunteerUrl_DESC
  sys_id_ASC
  sys_id_DESC
  sys_publishedAt_ASC
  sys_publishedAt_DESC
  sys_firstPublishedAt_ASC
  sys_firstPublishedAt_DESC
  sys_publishedVersion_ASC
  sys_publishedVersion_DESC
}

type CmsProgramPresentingSponsorsCollection {
  total: Int!
  skip: Int!
  limit: Int!
  items: [CmsGlobalSponsor]!
}

type CmsProgramVolunteerBlurb {
  json: CmsJSON!
  links: CmsProgramVolunteerBlurbLinks!
}

type CmsProgramVolunteerBlurbAssets {
  hyperlink: [CmsAsset]!
  block: [CmsAsset]!
}

type CmsProgramVolunteerBlurbEntries {
  inline: [CmsEntry]!
  hyperlink: [CmsEntry]!
  block: [CmsEntry]!
}

type CmsProgramVolunteerBlurbLinks {
  entries: CmsProgramVolunteerBlurbEntries!
  assets: CmsProgramVolunteerBlurbAssets!
}

type CmsProgramVolunteerDetails {
  json: CmsJSON!
  links: CmsProgramVolunteerDetailsLinks!
}

type CmsProgramVolunteerDetailsAssets {
  hyperlink: [CmsAsset]!
  block: [CmsAsset]!
}

type CmsProgramVolunteerDetailsEntries {
  inline: [CmsEntry]!
  hyperlink: [CmsEntry]!
  block: [CmsEntry]!
}

type CmsProgramVolunteerDetailsLinks {
  entries: CmsProgramVolunteerDetailsEntries!
  assets: CmsProgramVolunteerDetailsAssets!
}

"""
The 'Quality' type represents quality as whole numeric values between `1` and `100`.
"""
scalar CmsQuality

type CmsQuery {
  asset(id: String!, preview: Boolean, locale: String): CmsAsset
  assets(skip: Int = 0, limit: Int = 100, preview: Boolean, locale: String, where: CmsAssetFilter, order: [CmsAssetOrder]): CmsAssetCollection
  program(id: String!, preview: Boolean, locale: String): CmsProgram
  programs(skip: Int = 0, limit: Int = 100, preview: Boolean, locale: String, where: CmsProgramFilter, order: [CmsProgramOrder]): CmsProgramCollection
  event(id: String!, preview: Boolean, locale: String): CmsEvent
  events(skip: Int = 0, limit: Int = 100, preview: Boolean, locale: String, where: CmsEventFilter, order: [CmsEventOrder]): CmsEventCollection
  badge(id: String!, preview: Boolean, locale: String): CmsBadge
  badges(skip: Int = 0, limit: Int = 100, preview: Boolean, locale: String, where: CmsBadgeFilter, order: [CmsBadgeOrder]): CmsBadgeCollection
  form(id: String!, preview: Boolean, locale: String): CmsForm
  forms(skip: Int = 0, limit: Int = 100, preview: Boolean, locale: String, where: CmsFormFilter, order: [CmsFormOrder]): CmsFormCollection
  award(id: String!, preview: Boolean, locale: String): CmsAward
  awards(skip: Int = 0, limit: Int = 100, preview: Boolean, locale: String, where: CmsAwardFilter, order: [CmsAwardOrder]): CmsAwardCollection
  site(id: String!, preview: Boolean, locale: String): CmsSite
  sites(skip: Int = 0, limit: Int = 100, preview: Boolean, locale: String, where: CmsSiteFilter, order: [CmsSiteOrder]): CmsSiteCollection
  bumper(id: String!, preview: Boolean, locale: String): CmsBumper
  bumpers(skip: Int = 0, limit: Int = 100, preview: Boolean, locale: String, where: CmsBumperFilter, order: [CmsBumperOrder]): CmsBumperCollection
  stockMusic(id: String!, preview: Boolean, locale: String): CmsStockMusic
  stockMusics(skip: Int = 0, limit: Int = 100, preview: Boolean, locale: String, where: CmsStockMusicFilter, order: [CmsStockMusicOrder]): CmsStockMusicCollection
  string(id: String!, preview: Boolean, locale: String): CmsContentTypeString
  strings(skip: Int = 0, limit: Int = 100, preview: Boolean, locale: String, where: CmsContentTypeStringFilter, order: [CmsContentTypeStringOrder]): CmsContentTypeStringCollection
  faq(id: String!, preview: Boolean, locale: String): CmsFaq
  faqs(skip: Int = 0, limit: Int = 100, preview: Boolean, locale: String, where: CmsFaqFilter, order: [CmsFaqOrder]): CmsFaqCollection
  hiringPost(id: String!, preview: Boolean, locale: String): CmsHiringPost
  hiringPosts(skip: Int = 0, limit: Int = 100, preview: Boolean, locale: String, where: CmsHiringPostFilter, order: [CmsHiringPostOrder]): CmsHiringPostCollection
  hiringCompany(id: String!, preview: Boolean, locale: String): CmsHiringCompany
  hiringCompanies(skip: Int = 0, limit: Int = 100, preview: Boolean, locale: String, where: CmsHiringCompanyFilter, order: [CmsHiringCompanyOrder]): CmsHiringCompanyCollection
  communityPartner(id: String!, preview: Boolean, locale: String): CmsCommunityPartner
  communityPartners(skip: Int = 0, limit: Int = 100, preview: Boolean, locale: String, where: CmsCommunityPartnerFilter, order: [CmsCommunityPartnerOrder]): CmsCommunityPartnerCollection
  legalDocument(id: String!, preview: Boolean, locale: String): CmsLegalDocument
  legalDocuments(skip: Int = 0, limit: Int = 100, preview: Boolean, locale: String, where: CmsLegalDocumentFilter, order: [CmsLegalDocumentOrder]): CmsLegalDocumentCollection
  region(id: String!, preview: Boolean, locale: String): CmsRegion
  regions(skip: Int = 0, limit: Int = 100, preview: Boolean, locale: String, where: CmsRegionFilter, order: [CmsRegionOrder]): CmsRegionCollection
  pressPhoto(id: String!, preview: Boolean, locale: String): CmsPressPhoto
  pressPhotos(skip: Int = 0, limit: Int = 100, preview: Boolean, locale: String, where: CmsPressPhotoFilter, order: [CmsPressPhotoOrder]): CmsPressPhotoCollection
  newsCoverage(id: String!, preview: Boolean, locale: String): CmsNewsCoverage
  newsCoverages(skip: Int = 0, limit: Int = 100, preview: Boolean, locale: String, where: CmsNewsCoverageFilter, order: [CmsNewsCoverageOrder]): CmsNewsCoverageCollection
  testimonial(id: String!, preview: Boolean, locale: String): CmsTestimonial
  testimonials(skip: Int = 0, limit: Int = 100, preview: Boolean, locale: String, where: CmsTestimonialFilter, order: [CmsTestimonialOrder]): CmsTestimonialCollection
  announcement(id: String!, preview: Boolean, locale: String): CmsAnnouncement
  announcements(skip: Int = 0, limit: Int = 100, preview: Boolean, locale: String, where: CmsAnnouncementFilter, order: [CmsAnnouncementOrder]): CmsAnnouncementCollection
  globalSponsor(id: String!, preview: Boolean, locale: String): CmsGlobalSponsor
  globalSponsors(skip: Int = 0, limit: Int = 100, preview: Boolean, locale: String, where: CmsGlobalSponsorFilter, order: [CmsGlobalSponsorOrder]): CmsGlobalSponsorCollection
  entries(skip: Int = 0, limit: Int = 100, preview: Boolean, locale: String, where: CmsEntryFilter, order: [CmsEntryOrder]): CmsEntryCollection
}

"""
The Rectangle scalar type represents a rectangle, defined by the coordinates of its top left and bottom right corners. The Rectangle type is used to represent a searchable area together with the '_within_rectangle' filter.
"""
scalar CmsRectangle

"""
[See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/region)
"""
type CmsRegion implements CmsEntry {
  sys: CmsSys!
  contentfulMetadata: CmsContentfulMetadata!
  linkedFrom(allowedLocales: [String]): CmsRegionLinkingCollections
  accountingName(locale: String): String
  webname(locale: String): String
  aliases(locale: String): [String]
  name(locale: String): String
  abbr(locale: String): String
  location(locale: String): CmsLocation
  timezone(locale: String): String
  complication(preview: Boolean, locale: String): CmsAsset
  primaryColor(locale: String): String
  motto(locale: String): String
  skylinePhoto(preview: Boolean, locale: String): CmsAsset
  regionPhotos(skip: Int = 0, limit: Int = 100, preview: Boolean, locale: String): CmsAssetCollection
  stickerLarge(preview: Boolean, locale: String): CmsAsset
  stickerSmall(preview: Boolean, locale: String): CmsAsset
}

type CmsRegionCollection {
  total: Int!
  skip: Int!
  limit: Int!
  items: [CmsRegion]!
}

input CmsRegionFilter {
  sys: CmsSysFilter
  contentfulMetadata: CmsContentfulMetadataFilter
  accountingName_exists: Boolean
  accountingName: String
  accountingName_not: String
  accountingName_in: [String]
  accountingName_not_in: [String]
  accountingName_contains: String
  accountingName_not_contains: String
  webname_exists: Boolean
  webname: String
  webname_not: String
  webname_in: [String]
  webname_not_in: [String]
  webname_contains: String
  webname_not_contains: String
  aliases_exists: Boolean
  aliases_contains_all: [String]
  aliases_contains_some: [String]
  aliases_contains_none: [String]
  name_exists: Boolean
  name: String
  name_not: String
  name_in: [String]
  name_not_in: [String]
  name_contains: String
  name_not_contains: String
  abbr_exists: Boolean
  abbr: String
  abbr_not: String
  abbr_in: [String]
  abbr_not_in: [String]
  abbr_contains: String
  abbr_not_contains: String
  location_exists: Boolean
  location_within_circle: CmsCircle
  location_within_rectangle: CmsRectangle
  timezone_exists: Boolean
  timezone: String
  timezone_not: String
  timezone_in: [String]
  timezone_not_in: [String]
  timezone_contains: String
  timezone_not_contains: String
  complication_exists: Boolean
  primaryColor_exists: Boolean
  primaryColor: String
  primaryColor_not: String
  primaryColor_in: [String]
  primaryColor_not_in: [String]
  primaryColor_contains: String
  primaryColor_not_contains: String
  motto_exists: Boolean
  motto: String
  motto_not: String
  motto_in: [String]
  motto_not_in: [String]
  motto_contains: String
  motto_not_contains: String
  skylinePhoto_exists: Boolean
  regionPhotosCollection_exists: Boolean
  stickerLarge_exists: Boolean
  stickerSmall_exists: Boolean
  OR: [CmsRegionFilter]
  AND: [CmsRegionFilter]
}

type CmsRegionLinkingCollections {
  entries(skip: Int = 0, limit: Int = 100, preview: Boolean, locale: String): CmsEntryCollection
  hiringPosts(skip: Int = 0, limit: Int = 100, preview: Boolean, locale: String): CmsHiringPostCollection
  communityPartners(skip: Int = 0, limit: Int = 100, preview: Boolean, locale: String): CmsCommunityPartnerCollection
  pressPhotos(skip: Int = 0, limit: Int = 100, preview: Boolean, locale: String): CmsPressPhotoCollection
  testimonials(skip: Int = 0, limit: Int = 100, preview: Boolean, locale: String): CmsTestimonialCollection
}

enum CmsRegionOrder {
  accountingName_ASC
  accountingName_DESC
  webname_ASC
  webname_DESC
  name_ASC
  name_DESC
  abbr_ASC
  abbr_DESC
  timezone_ASC
  timezone_DESC
  primaryColor_ASC
  primaryColor_DESC
  motto_ASC
  motto_DESC
  sys_id_ASC
  sys_id_DESC
  sys_publishedAt_ASC
  sys_publishedAt_DESC
  sys_firstPublishedAt_ASC
  sys_firstPublishedAt_DESC
  sys_publishedVersion_ASC
  sys_publishedVersion_DESC
}

"""
[See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/site)
"""
type CmsSite implements CmsEntry {
  sys: CmsSys!
  contentfulMetadata: CmsContentfulMetadata!
  linkedFrom(allowedLocales: [String]): CmsSiteLinkingCollections
  title(locale: String): String
  link(locale: String): String
  type(locale: String): String
  display(locale: String): [String]
}

type CmsSiteCollection {
  total: Int!
  skip: Int!
  limit: Int!
  items: [CmsSite]!
}

input CmsSiteFilter {
  sys: CmsSysFilter
  contentfulMetadata: CmsContentfulMetadataFilter
  title_exists: Boolean
  title: String
  title_not: String
  title_in: [String]
  title_not_in: [String]
  title_contains: String
  title_not_contains: String
  link_exists: Boolean
  link: String
  link_not: String
  link_in: [String]
  link_not_in: [String]
  link_contains: String
  link_not_contains: String
  type_exists: Boolean
  type: String
  type_not: String
  type_in: [String]
  type_not_in: [String]
  type_contains: String
  type_not_contains: String
  display_exists: Boolean
  display_contains_all: [String]
  display_contains_some: [String]
  display_contains_none: [String]
  OR: [CmsSiteFilter]
  AND: [CmsSiteFilter]
}

type CmsSiteLinkingCollections {
  entries(skip: Int = 0, limit: Int = 100, preview: Boolean, locale: String): CmsEntryCollection
}

enum CmsSiteOrder {
  title_ASC
  title_DESC
  link_ASC
  link_DESC
  type_ASC
  type_DESC
  sys_id_ASC
  sys_id_DESC
  sys_publishedAt_ASC
  sys_publishedAt_DESC
  sys_firstPublishedAt_ASC
  sys_firstPublishedAt_DESC
  sys_publishedVersion_ASC
  sys_publishedVersion_DESC
}

"""
[See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/stockMusic)
"""
type CmsStockMusic implements CmsEntry {
  sys: CmsSys!
  contentfulMetadata: CmsContentfulMetadata!
  linkedFrom(allowedLocales: [String]): CmsStockMusicLinkingCollections
  title(locale: String): String
  music(preview: Boolean, locale: String): CmsAsset
}

type CmsStockMusicCollection {
  total: Int!
  skip: Int!
  limit: Int!
  items: [CmsStockMusic]!
}

input CmsStockMusicFilter {
  sys: CmsSysFilter
  contentfulMetadata: CmsContentfulMetadataFilter
  title_exists: Boolean
  title: String
  title_not: String
  title_in: [String]
  title_not_in: [String]
  title_contains: String
  title_not_contains: String
  music_exists: Boolean
  OR: [CmsStockMusicFilter]
  AND: [CmsStockMusicFilter]
}

type CmsStockMusicLinkingCollections {
  entries(skip: Int = 0, limit: Int = 100, preview: Boolean, locale: String): CmsEntryCollection
}

enum CmsStockMusicOrder {
  title_ASC
  title_DESC
  sys_id_ASC
  sys_id_DESC
  sys_publishedAt_ASC
  sys_publishedAt_DESC
  sys_firstPublishedAt_ASC
  sys_firstPublishedAt_DESC
  sys_publishedVersion_ASC
  sys_publishedVersion_DESC
}

type CmsSys {
  id: String!
  spaceId: String!
  environmentId: String!
  publishedAt: CmsDateTime
  firstPublishedAt: CmsDateTime
  publishedVersion: Int
}

input CmsSysFilter {
  id_exists: Boolean
  id: String
  id_not: String
  id_in: [String]
  id_not_in: [String]
  id_contains: String
  id_not_contains: String
  publishedAt_exists: Boolean
  publishedAt: CmsDateTime
  publishedAt_not: CmsDateTime
  publishedAt_in: [CmsDateTime]
  publishedAt_not_in: [CmsDateTime]
  publishedAt_gt: CmsDateTime
  publishedAt_gte: CmsDateTime
  publishedAt_lt: CmsDateTime
  publishedAt_lte: CmsDateTime
  firstPublishedAt_exists: Boolean
  firstPublishedAt: CmsDateTime
  firstPublishedAt_not: CmsDateTime
  firstPublishedAt_in: [CmsDateTime]
  firstPublishedAt_not_in: [CmsDateTime]
  firstPublishedAt_gt: CmsDateTime
  firstPublishedAt_gte: CmsDateTime
  firstPublishedAt_lt: CmsDateTime
  firstPublishedAt_lte: CmsDateTime
  publishedVersion_exists: Boolean
  publishedVersion: Float
  publishedVersion_not: Float
  publishedVersion_in: [Float]
  publishedVersion_not_in: [Float]
  publishedVersion_gt: Float
  publishedVersion_gte: Float
  publishedVersion_lt: Float
  publishedVersion_lte: Float
}

"""
[See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/testimonial)
"""
type CmsTestimonial implements CmsEntry {
  sys: CmsSys!
  contentfulMetadata: CmsContentfulMetadata!
  linkedFrom(allowedLocales: [String]): CmsTestimonialLinkingCollections
  quote(locale: String): String
  featured(locale: String): Boolean
  image(preview: Boolean, locale: String): CmsAsset
  video(preview: Boolean, locale: String): CmsAsset
  groupName(locale: String): String
  firstName(locale: String): String
  lastName(locale: String): String
  title(locale: String): String
  company(locale: String): String
  experience(locale: String): String
  type(locale: String): String
  region(preview: Boolean, locale: String): CmsRegion
  program(preview: Boolean, locale: String): CmsProgram
}

type CmsTestimonialCollection {
  total: Int!
  skip: Int!
  limit: Int!
  items: [CmsTestimonial]!
}

input CmsTestimonialFilter {
  region: CmscfRegionNestedFilter
  program: CmscfProgramNestedFilter
  sys: CmsSysFilter
  contentfulMetadata: CmsContentfulMetadataFilter
  quote_exists: Boolean
  quote: String
  quote_not: String
  quote_in: [String]
  quote_not_in: [String]
  quote_contains: String
  quote_not_contains: String
  featured_exists: Boolean
  featured: Boolean
  featured_not: Boolean
  image_exists: Boolean
  video_exists: Boolean
  groupName_exists: Boolean
  groupName: String
  groupName_not: String
  groupName_in: [String]
  groupName_not_in: [String]
  groupName_contains: String
  groupName_not_contains: String
  firstName_exists: Boolean
  firstName: String
  firstName_not: String
  firstName_in: [String]
  firstName_not_in: [String]
  firstName_contains: String
  firstName_not_contains: String
  lastName_exists: Boolean
  lastName: String
  lastName_not: String
  lastName_in: [String]
  lastName_not_in: [String]
  lastName_contains: String
  lastName_not_contains: String
  title_exists: Boolean
  title: String
  title_not: String
  title_in: [String]
  title_not_in: [String]
  title_contains: String
  title_not_contains: String
  company_exists: Boolean
  company: String
  company_not: String
  company_in: [String]
  company_not_in: [String]
  company_contains: String
  company_not_contains: String
  experience_exists: Boolean
  experience: String
  experience_not: String
  experience_in: [String]
  experience_not_in: [String]
  experience_contains: String
  experience_not_contains: String
  type_exists: Boolean
  type: String
  type_not: String
  type_in: [String]
  type_not_in: [String]
  type_contains: String
  type_not_contains: String
  region_exists: Boolean
  program_exists: Boolean
  OR: [CmsTestimonialFilter]
  AND: [CmsTestimonialFilter]
}

type CmsTestimonialLinkingCollections {
  entries(skip: Int = 0, limit: Int = 100, preview: Boolean, locale: String): CmsEntryCollection
}

enum CmsTestimonialOrder {
  featured_ASC
  featured_DESC
  groupName_ASC
  groupName_DESC
  firstName_ASC
  firstName_DESC
  lastName_ASC
  lastName_DESC
  title_ASC
  title_DESC
  company_ASC
  company_DESC
  experience_ASC
  experience_DESC
  type_ASC
  type_DESC
  sys_id_ASC
  sys_id_DESC
  sys_publishedAt_ASC
  sys_publishedAt_DESC
  sys_firstPublishedAt_ASC
  sys_firstPublishedAt_DESC
  sys_publishedVersion_ASC
  sys_publishedVersion_DESC
}

input CmscfEventNestedFilter {
  sys: CmsSysFilter
  contentfulMetadata: CmsContentfulMetadataFilter
  id_exists: Boolean
  id: String
  id_not: String
  id_in: [String]
  id_not_in: [String]
  id_contains: String
  id_not_contains: String
  title_exists: Boolean
  title: String
  title_not: String
  title_in: [String]
  title_not_in: [String]
  title_contains: String
  title_not_contains: String
  program_exists: Boolean
  registrationsOpenAt_exists: Boolean
  registrationsOpenAt: CmsDateTime
  registrationsOpenAt_not: CmsDateTime
  registrationsOpenAt_in: [CmsDateTime]
  registrationsOpenAt_not_in: [CmsDateTime]
  registrationsOpenAt_gt: CmsDateTime
  registrationsOpenAt_gte: CmsDateTime
  registrationsOpenAt_lt: CmsDateTime
  registrationsOpenAt_lte: CmsDateTime
  registrationsCloseAt_exists: Boolean
  registrationsCloseAt: CmsDateTime
  registrationsCloseAt_not: CmsDateTime
  registrationsCloseAt_in: [CmsDateTime]
  registrationsCloseAt_not_in: [CmsDateTime]
  registrationsCloseAt_gt: CmsDateTime
  registrationsCloseAt_gte: CmsDateTime
  registrationsCloseAt_lt: CmsDateTime
  registrationsCloseAt_lte: CmsDateTime
  startsAt_exists: Boolean
  startsAt: CmsDateTime
  startsAt_not: CmsDateTime
  startsAt_in: [CmsDateTime]
  startsAt_not_in: [CmsDateTime]
  startsAt_gt: CmsDateTime
  startsAt_gte: CmsDateTime
  startsAt_lt: CmsDateTime
  startsAt_lte: CmsDateTime
  endsAt_exists: Boolean
  endsAt: CmsDateTime
  endsAt_not: CmsDateTime
  endsAt_in: [CmsDateTime]
  endsAt_not_in: [CmsDateTime]
  endsAt_gt: CmsDateTime
  endsAt_gte: CmsDateTime
  endsAt_lt: CmsDateTime
  endsAt_lte: CmsDateTime
  awardsAt_exists: Boolean
  awardsAt: CmsDateTime
  awardsAt_not: CmsDateTime
  awardsAt_in: [CmsDateTime]
  awardsAt_not_in: [CmsDateTime]
  awardsAt_gt: CmsDateTime
  awardsAt_gte: CmsDateTime
  awardsAt_lt: CmsDateTime
  awardsAt_lte: CmsDateTime
  calendarReleaseDate_exists: Boolean
  calendarReleaseDate: CmsDateTime
  calendarReleaseDate_not: CmsDateTime
  calendarReleaseDate_in: [CmsDateTime]
  calendarReleaseDate_not_in: [CmsDateTime]
  calendarReleaseDate_gt: CmsDateTime
  calendarReleaseDate_gte: CmsDateTime
  calendarReleaseDate_lt: CmsDateTime
  calendarReleaseDate_lte: CmsDateTime
  notice_exists: Boolean
  notice_contains: String
  notice_not_contains: String
  theme_exists: Boolean
  theme: String
  theme_not: String
  theme_in: [String]
  theme_not_in: [String]
  theme_contains: String
  theme_not_contains: String
  themeBackgroundsCollection_exists: Boolean
  themeLogoBackgroundsCollection_exists: Boolean
  kickoffVideo_exists: Boolean
  kickoffVideoCaptions_exists: Boolean
  participantRoleId_exists: Boolean
  participantRoleId: String
  participantRoleId_not: String
  participantRoleId_in: [String]
  participantRoleId_not_in: [String]
  participantRoleId_contains: String
  participantRoleId_not_contains: String
  statEventCount_exists: Boolean
  statEventCount: Int
  statEventCount_not: Int
  statEventCount_in: [Int]
  statEventCount_not_in: [Int]
  statEventCount_gt: Int
  statEventCount_gte: Int
  statEventCount_lt: Int
  statEventCount_lte: Int
  statStudentCount_exists: Boolean
  statStudentCount: Int
  statStudentCount_not: Int
  statStudentCount_in: [Int]
  statStudentCount_not_in: [Int]
  statStudentCount_gt: Int
  statStudentCount_gte: Int
  statStudentCount_lt: Int
  statStudentCount_lte: Int
  statLowInterestCount_exists: Boolean
  statLowInterestCount: Int
  statLowInterestCount_not: Int
  statLowInterestCount_in: [Int]
  statLowInterestCount_not_in: [Int]
  statLowInterestCount_gt: Int
  statLowInterestCount_gte: Int
  statLowInterestCount_lt: Int
  statLowInterestCount_lte: Int
  statLowInterestContinuedCount_exists: Boolean
  statLowInterestContinuedCount: Int
  statLowInterestContinuedCount_not: Int
  statLowInterestContinuedCount_in: [Int]
  statLowInterestContinuedCount_not_in: [Int]
  statLowInterestContinuedCount_gt: Int
  statLowInterestContinuedCount_gte: Int
  statLowInterestContinuedCount_lt: Int
  statLowInterestContinuedCount_lte: Int
  postersCollection_exists: Boolean
  OR: [CmscfEventNestedFilter]
  AND: [CmscfEventNestedFilter]
}

input CmscfGlobalSponsorNestedFilter {
  sys: CmsSysFilter
  contentfulMetadata: CmsContentfulMetadataFilter
  name_exists: Boolean
  name: String
  name_not: String
  name_in: [String]
  name_not_in: [String]
  name_contains: String
  name_not_contains: String
  type_exists: Boolean
  type: String
  type_not: String
  type_in: [String]
  type_not_in: [String]
  type_contains: String
  type_not_contains: String
  logo_exists: Boolean
  link_exists: Boolean
  link: String
  link_not: String
  link_in: [String]
  link_not_in: [String]
  link_contains: String
  link_not_contains: String
  twitterUsername_exists: Boolean
  twitterUsername: String
  twitterUsername_not: String
  twitterUsername_in: [String]
  twitterUsername_not_in: [String]
  twitterUsername_contains: String
  twitterUsername_not_contains: String
  instagramUsername_exists: Boolean
  instagramUsername: String
  instagramUsername_not: String
  instagramUsername_in: [String]
  instagramUsername_not_in: [String]
  instagramUsername_contains: String
  instagramUsername_not_contains: String
  shortDescription_exists: Boolean
  shortDescription: String
  shortDescription_not: String
  shortDescription_in: [String]
  shortDescription_not_in: [String]
  shortDescription_contains: String
  shortDescription_not_contains: String
  description_exists: Boolean
  description: String
  description_not: String
  description_in: [String]
  description_not_in: [String]
  description_contains: String
  description_not_contains: String
  perks_exists: Boolean
  perks: String
  perks_not: String
  perks_in: [String]
  perks_not_in: [String]
  perks_contains: String
  perks_not_contains: String
  audio_exists: Boolean
  OR: [CmscfGlobalSponsorNestedFilter]
  AND: [CmscfGlobalSponsorNestedFilter]
}

input CmscfHiringCompanyNestedFilter {
  sys: CmsSysFilter
  contentfulMetadata: CmsContentfulMetadataFilter
  name_exists: Boolean
  name: String
  name_not: String
  name_in: [String]
  name_not_in: [String]
  name_contains: String
  name_not_contains: String
  logo_exists: Boolean
  description_exists: Boolean
  description_contains: String
  description_not_contains: String
  url_exists: Boolean
  url: String
  url_not: String
  url_in: [String]
  url_not_in: [String]
  url_contains: String
  url_not_contains: String
  featured_exists: Boolean
  featured: Boolean
  featured_not: Boolean
  relatedSponsor_exists: Boolean
  alumniReferrals_exists: Boolean
  alumniReferrals_contains_all: [String]
  alumniReferrals_contains_some: [String]
  alumniReferrals_contains_none: [String]
  OR: [CmscfHiringCompanyNestedFilter]
  AND: [CmscfHiringCompanyNestedFilter]
}

input CmscfProgramNestedFilter {
  sys: CmsSysFilter
  contentfulMetadata: CmsContentfulMetadataFilter
  name_exists: Boolean
  name: String
  name_not: String
  name_in: [String]
  name_not_in: [String]
  name_contains: String
  name_not_contains: String
  webname_exists: Boolean
  webname: String
  webname_not: String
  webname_in: [String]
  webname_not_in: [String]
  webname_contains: String
  webname_not_contains: String
  virtual_exists: Boolean
  virtual: Boolean
  virtual_not: Boolean
  type_exists: Boolean
  type: String
  type_not: String
  type_in: [String]
  type_not_in: [String]
  type_contains: String
  type_not_contains: String
  logo_exists: Boolean
  logoWhite_exists: Boolean
  presentingSponsorsCollection_exists: Boolean
  url_exists: Boolean
  url: String
  url_not: String
  url_in: [String]
  url_not_in: [String]
  url_contains: String
  url_not_contains: String
  shortDescription_exists: Boolean
  shortDescription: String
  shortDescription_not: String
  shortDescription_in: [String]
  shortDescription_not_in: [String]
  shortDescription_contains: String
  shortDescription_not_contains: String
  description_exists: Boolean
  description: String
  description_not: String
  description_in: [String]
  description_not_in: [String]
  description_contains: String
  description_not_contains: String
  eligibility_exists: Boolean
  eligibility_contains: String
  eligibility_not_contains: String
  educationDetails_exists: Boolean
  educationDetails_contains: String
  educationDetails_not_contains: String
  volunteerDetails_exists: Boolean
  volunteerDetails_contains: String
  volunteerDetails_not_contains: String
  volunteerUrl_exists: Boolean
  volunteerUrl: String
  volunteerUrl_not: String
  volunteerUrl_in: [String]
  volunteerUrl_not_in: [String]
  volunteerUrl_contains: String
  volunteerUrl_not_contains: String
  volunteerPositions_exists: Boolean
  volunteerPositions_contains_all: [String]
  volunteerPositions_contains_some: [String]
  volunteerPositions_contains_none: [String]
  volunteerBlurb_exists: Boolean
  volunteerBlurb_contains: String
  volunteerBlurb_not_contains: String
  volunteerRecruitingResourcesCollection_exists: Boolean
  postersCollection_exists: Boolean
  OR: [CmscfProgramNestedFilter]
  AND: [CmscfProgramNestedFilter]
}

input CmscfRegionNestedFilter {
  sys: CmsSysFilter
  contentfulMetadata: CmsContentfulMetadataFilter
  accountingName_exists: Boolean
  accountingName: String
  accountingName_not: String
  accountingName_in: [String]
  accountingName_not_in: [String]
  accountingName_contains: String
  accountingName_not_contains: String
  webname_exists: Boolean
  webname: String
  webname_not: String
  webname_in: [String]
  webname_not_in: [String]
  webname_contains: String
  webname_not_contains: String
  aliases_exists: Boolean
  aliases_contains_all: [String]
  aliases_contains_some: [String]
  aliases_contains_none: [String]
  name_exists: Boolean
  name: String
  name_not: String
  name_in: [String]
  name_not_in: [String]
  name_contains: String
  name_not_contains: String
  abbr_exists: Boolean
  abbr: String
  abbr_not: String
  abbr_in: [String]
  abbr_not_in: [String]
  abbr_contains: String
  abbr_not_contains: String
  location_exists: Boolean
  location_within_circle: CmsCircle
  location_within_rectangle: CmsRectangle
  timezone_exists: Boolean
  timezone: String
  timezone_not: String
  timezone_in: [String]
  timezone_not_in: [String]
  timezone_contains: String
  timezone_not_contains: String
  complication_exists: Boolean
  primaryColor_exists: Boolean
  primaryColor: String
  primaryColor_not: String
  primaryColor_in: [String]
  primaryColor_not_in: [String]
  primaryColor_contains: String
  primaryColor_not_contains: String
  motto_exists: Boolean
  motto: String
  motto_not: String
  motto_in: [String]
  motto_not_in: [String]
  motto_contains: String
  motto_not_contains: String
  skylinePhoto_exists: Boolean
  regionPhotosCollection_exists: Boolean
  stickerLarge_exists: Boolean
  stickerSmall_exists: Boolean
  OR: [CmscfRegionNestedFilter]
  AND: [CmscfRegionNestedFilter]
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar LabsDateTime

input LabsIdOrUsernameInput {
  id: String
  username: String
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar LabsJSON

"""
The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar LabsJSONObject

type LabsMentor {
  id: String!
  createdAt: LabsDateTime!
  updatedAt: LabsDateTime!
  username: String
  givenName: String!
  surname: String!
  name: String!
  email: String!
  status: LabsMentorStatus!
  profile: LabsJSON!
  managerUsername: String
  maxWeeks: Int!
  projects: [LabsProject!]!
  profileField(key: String!): LabsJSON
  account: AccountUser
  manager: AccountUser
}

input LabsMentorApplyInput {
  givenName: String!
  surname: String!
  email: String!
  profile: LabsJSONObject
  maxWeeks: Int
  projects: [LabsProjectCreateInput!]!
}

input LabsMentorCreateInput {
  givenName: String!
  surname: String!
  email: String!
  username: String
  status: LabsMentorStatus
  maxWeeks: Int
  profile: LabsJSONObject
}

input LabsMentorEditInput {
  givenName: String
  surname: String
  email: String
  username: String
  status: LabsMentorStatus
  maxWeeks: Int
  managerUsername: String
  profile: LabsJSONObject
}

input LabsMentorFilterInput {
  assignedToManager: String
  inStatus: LabsMentorStatus
  withProjects: Boolean
  weeksGte: Float
}

enum LabsMentorStatus {
  APPLIED
  SCHEDULED
  ACCEPTED
  REJECTED
  CANCELED
}

type LabsMutation {
  createMentor(data: LabsMentorCreateInput!): LabsMentor!
  applyMentor(data: LabsMentorApplyInput!): LabsMentor!
  editMentor(where: LabsIdOrUsernameInput, data: LabsMentorEditInput!): LabsMentor!
  deleteMentor(where: LabsIdOrUsernameInput!): Boolean!
  createProject(mentor: LabsIdOrUsernameInput, data: LabsProjectCreateInput!): LabsProject!
  editProject(data: LabsProjectEditInput!, project: String!): LabsProject!
  deleteProject(project: String!): Boolean!
  addProjectStudent(student: LabsIdOrUsernameInput!, project: String!): LabsProject!
  removeProjectStudent(student: LabsIdOrUsernameInput!, project: String!): LabsProject!
  addProjectMentor(mentor: LabsIdOrUsernameInput!, project: String!): LabsProject!
  removeProjectMentor(mentor: LabsIdOrUsernameInput!, project: String!): LabsProject!
  submitStudentRating(track: LabsTrack!, rating: Int!, where: LabsIdOrUsernameInput!): Boolean!
  offerStudentAdmission(where: LabsIdOrUsernameInput!): LabsStudent!
  resetStudentAdmissionOffer(where: LabsIdOrUsernameInput!): LabsStudent!
  acceptStudentOffer: LabsStudent!
  rejectStudent(reason: LabsRejectionReason, where: LabsIdOrUsernameInput!): LabsStudent!
  createStudent(data: LabsStudentCreateInput!): LabsStudent!
  applyStudent(data: LabsStudentApplyInput!): LabsStudent!
  editStudent(where: LabsIdOrUsernameInput, data: LabsStudentEditInput!): LabsStudent!
  deleteStudent(where: LabsIdOrUsernameInput!): Boolean!
  cancelStudentApplication: LabsStudent!
  createTag(data: LabsTagCreateInput!): LabsTag!
  editTag(data: LabsTagEditInput!, tag: String!): LabsTag!
  deleteTag(tag: String!): Boolean!
}

type LabsProject {
  id: String!
  createdAt: LabsDateTime!
  updatedAt: LabsDateTime!
  description: String
  deliverables: String
  track: LabsTrack!
  maxStudents: Int!
  status: LabsProjectStatus!
  tags: [LabsTag!]!
  mentors: [LabsMentor!]!
}

input LabsProjectCreateInput {
  description: String
  deliverables: String
  track: LabsTrack!
  maxStudents: Int
  tags: [String!]
}

input LabsProjectEditInput {
  description: String
  deliverables: String
  track: LabsTrack
  status: LabsProjectStatus
  maxStudents: Int
  tags: [String!]
}

enum LabsProjectStatus {
  DRAFT
  PROPOSED
  ACCEPTED
  MATCHED
}

type LabsQuery {
  mentors(take: Float, skip: Float, where: LabsMentorFilterInput): [LabsMentor!]!
  mentor(where: LabsIdOrUsernameInput): LabsMentor
  nextStudentNeedingRating(track: LabsTrack): LabsStudent
  studentsTopRated(track: LabsTrack, take: Float, skip: Float): [LabsStudent!]!
  statAdmissionsStatus(track: LabsTrack): [LabsStat!]!
  students(take: Float, skip: Float, where: LabsStudentFilterInput): [LabsStudent!]!
  student(where: LabsIdOrUsernameInput): LabsStudent
  tags(type: LabsTagType): [LabsTag!]!
}

enum LabsRejectionReason {
  EXPERIENCE_HIGH
  EXPERIENCE_LOW
  OTHER
}

type LabsStat {
  key: String!
  value: Float!
}

type LabsStudent {
  id: String!
  createdAt: LabsDateTime!
  updatedAt: LabsDateTime!
  username: String!
  givenName: String!
  surname: String!
  name: String!
  email: String!
  status: LabsStudentStatus!
  track: LabsTrack!
  minHours: Int!
  rejectionReason: LabsRejectionReason
  profile: LabsJSON!
  weeks: Int!
  partnerCode: String!
  hasValidAdmissionOffer: Boolean!
  offerDate: LabsDateTime
  admissionRatingAverage: Float
  admissionRatingCount: Float
  trackRecommendation: [LabsTrackRecommendation!]
  tags: [LabsTag!]!
  projects: [LabsProject!]!
  account: AccountUser
}

input LabsStudentApplyInput {
  givenName: String!
  surname: String!
  email: String!
  profile: LabsJSONObject
  track: LabsTrack!
  minHours: Int!
  partnerCode: String
  tags: [String!]
}

input LabsStudentCreateInput {
  givenName: String!
  surname: String!
  email: String!
  username: String!
  profile: LabsJSONObject
  status: LabsStudentStatus
  track: LabsTrack!
  minHours: Int!
  weeks: Int
  partnerCode: String
  tags: [String!]
}

input LabsStudentEditInput {
  givenName: String
  surname: String
  email: String
  username: String
  status: LabsStudentStatus
  track: LabsTrack
  minHours: Int
  weeks: Int
  profile: LabsJSONObject
  partnerCode: String
  tags: [String!]
}

input LabsStudentFilterInput {
  inStatus: LabsStudentStatus
  withProjects: Boolean
  partnerCode: String
  givenName: String
  surname: String
  email: String
}

enum LabsStudentStatus {
  APPLIED
  TRACK_INTERVIEW
  TRACK_CHALLENGE
  OFFERED
  ACCEPTED
  REJECTED
  CANCELED
}

type LabsTag {
  id: String!
  createdAt: LabsDateTime!
  updatedAt: LabsDateTime!
  mentorDisplayName: String!
  studentDisplayName: String!
  type: LabsTagType!
}

input LabsTagCreateInput {
  id: String!
  mentorDisplayName: String!
  studentDisplayName: String!
  type: LabsTagType!
}

input LabsTagEditInput {
  mentorDisplayName: String
  studentDisplayName: String
  type: LabsTagType
}

enum LabsTagType {
  INTEREST
  TECHNOLOGY
}

enum LabsTrack {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

type LabsTrackRecommendation {
  track: LabsTrack!
  weight: Float!
}

"""Represents a binary file in a space. An asset can be any file type."""
type LearnAsset {
  sys: LearnSys!
  contentfulMetadata: LearnContentfulMetadata!
  title: String
  description: String
  contentType: String
  fileName: String
  size: Int
  contentfulBaseUrl(transform: LearnImageTransformOptions): String
  width: Int
  height: Int
  linkedFrom(allowedLocales: [String]): LearnAssetLinkingCollections
  url(transform: LearnImageTransformOptions): String
}

type LearnAssetCollection {
  total: Int!
  skip: Int!
  limit: Int!
  items: [LearnAsset]!
}

input LearnAssetFilter {
  sys: LearnSysFilter
  contentfulMetadata: LearnContentfulMetadataFilter
  title_exists: Boolean
  title: String
  title_not: String
  title_in: [String]
  title_not_in: [String]
  title_contains: String
  title_not_contains: String
  description_exists: Boolean
  description: String
  description_not: String
  description_in: [String]
  description_not_in: [String]
  description_contains: String
  description_not_contains: String
  url_exists: Boolean
  url: String
  url_not: String
  url_in: [String]
  url_not_in: [String]
  url_contains: String
  url_not_contains: String
  size_exists: Boolean
  size: Int
  size_not: Int
  size_in: [Int]
  size_not_in: [Int]
  size_gt: Int
  size_gte: Int
  size_lt: Int
  size_lte: Int
  contentType_exists: Boolean
  contentType: String
  contentType_not: String
  contentType_in: [String]
  contentType_not_in: [String]
  contentType_contains: String
  contentType_not_contains: String
  fileName_exists: Boolean
  fileName: String
  fileName_not: String
  fileName_in: [String]
  fileName_not_in: [String]
  fileName_contains: String
  fileName_not_contains: String
  width_exists: Boolean
  width: Int
  width_not: Int
  width_in: [Int]
  width_not_in: [Int]
  width_gt: Int
  width_gte: Int
  width_lt: Int
  width_lte: Int
  height_exists: Boolean
  height: Int
  height_not: Int
  height_in: [Int]
  height_not_in: [Int]
  height_gt: Int
  height_gte: Int
  height_lt: Int
  height_lte: Int
  OR: [LearnAssetFilter]
  AND: [LearnAssetFilter]
}

type LearnAssetLinkingCollections {
  entries(skip: Int = 0, limit: Int = 100, preview: Boolean, locale: String): LearnEntryCollection
  technologies(skip: Int = 0, limit: Int = 100, preview: Boolean, locale: String): LearnTechnologyCollection
}

enum LearnAssetOrder {
  url_ASC
  url_DESC
  size_ASC
  size_DESC
  contentType_ASC
  contentType_DESC
  fileName_ASC
  fileName_DESC
  width_ASC
  width_DESC
  height_ASC
  height_DESC
  sys_id_ASC
  sys_id_DESC
  sys_publishedAt_ASC
  sys_publishedAt_DESC
  sys_firstPublishedAt_ASC
  sys_firstPublishedAt_DESC
  sys_publishedVersion_ASC
  sys_publishedVersion_DESC
}

"""
Display an inline code block inside of rich content for lessons. [See type definition](https://app.contentful.com/spaces/muw2pziidpat/content_types/codeBlock)
"""
type LearnCodeBlock implements LearnEntry {
  sys: LearnSys!
  contentfulMetadata: LearnContentfulMetadata!
  linkedFrom(allowedLocales: [String]): LearnCodeBlockLinkingCollections
  language(locale: String): String
  code(locale: String): String
}

type LearnCodeBlockCollection {
  total: Int!
  skip: Int!
  limit: Int!
  items: [LearnCodeBlock]!
}

input LearnCodeBlockFilter {
  sys: LearnSysFilter
  contentfulMetadata: LearnContentfulMetadataFilter
  language_exists: Boolean
  language: String
  language_not: String
  language_in: [String]
  language_not_in: [String]
  language_contains: String
  language_not_contains: String
  code_exists: Boolean
  code: String
  code_not: String
  code_in: [String]
  code_not_in: [String]
  code_contains: String
  code_not_contains: String
  OR: [LearnCodeBlockFilter]
  AND: [LearnCodeBlockFilter]
}

type LearnCodeBlockLinkingCollections {
  entries(skip: Int = 0, limit: Int = 100, preview: Boolean, locale: String): LearnEntryCollection
}

enum LearnCodeBlockOrder {
  language_ASC
  language_DESC
  sys_id_ASC
  sys_id_DESC
  sys_publishedAt_ASC
  sys_publishedAt_DESC
  sys_firstPublishedAt_ASC
  sys_firstPublishedAt_DESC
  sys_publishedVersion_ASC
  sys_publishedVersion_DESC
}

type LearnContentfulMetadata {
  tags: [LearnContentfulTag]!
}

input LearnContentfulMetadataFilter {
  tags_exists: Boolean
  tags: LearnContentfulMetadataTagsFilter
}

input LearnContentfulMetadataTagsFilter {
  id_contains_all: [String]
  id_contains_some: [String]
  id_contains_none: [String]
}

"""
Represents a tag entity for finding and organizing content easily.
    Find out more here: https://www.contentful.com/developers/docs/references/content-delivery-api/#/reference/content-tags
"""
type LearnContentfulTag {
  id: String
  name: String
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z,
    compliant with the 'date-time' format outlined in section 5.6 of
    the RFC 3339 profile of the ISO 8601 standard for representation
    of dates and times using the Gregorian calendar.
"""
scalar LearnDateTime

"""
Determines the hardness of a particular lesson. [See type definition](https://app.contentful.com/spaces/muw2pziidpat/content_types/difficulty)
"""
type LearnDifficulty implements LearnEntry {
  sys: LearnSys!
  contentfulMetadata: LearnContentfulMetadata!
  linkedFrom(allowedLocales: [String]): LearnDifficultyLinkingCollections
  name(locale: String): String
  shortDescription(locale: String): String
  hexCodeColor(locale: String): String
}

type LearnDifficultyCollection {
  total: Int!
  skip: Int!
  limit: Int!
  items: [LearnDifficulty]!
}

input LearnDifficultyFilter {
  sys: LearnSysFilter
  contentfulMetadata: LearnContentfulMetadataFilter
  name_exists: Boolean
  name: String
  name_not: String
  name_in: [String]
  name_not_in: [String]
  name_contains: String
  name_not_contains: String
  shortDescription_exists: Boolean
  shortDescription: String
  shortDescription_not: String
  shortDescription_in: [String]
  shortDescription_not_in: [String]
  shortDescription_contains: String
  shortDescription_not_contains: String
  hexCodeColor_exists: Boolean
  hexCodeColor: String
  hexCodeColor_not: String
  hexCodeColor_in: [String]
  hexCodeColor_not_in: [String]
  hexCodeColor_contains: String
  hexCodeColor_not_contains: String
  OR: [LearnDifficultyFilter]
  AND: [LearnDifficultyFilter]
}

type LearnDifficultyLinkingCollections {
  entries(skip: Int = 0, limit: Int = 100, preview: Boolean, locale: String): LearnEntryCollection
  tracks(skip: Int = 0, limit: Int = 100, preview: Boolean, locale: String): LearnTrackCollection
}

enum LearnDifficultyOrder {
  name_ASC
  name_DESC
  shortDescription_ASC
  shortDescription_DESC
  hexCodeColor_ASC
  hexCodeColor_DESC
  sys_id_ASC
  sys_id_DESC
  sys_publishedAt_ASC
  sys_publishedAt_DESC
  sys_firstPublishedAt_ASC
  sys_firstPublishedAt_DESC
  sys_publishedVersion_ASC
  sys_publishedVersion_DESC
}

"""
The 'Dimension' type represents dimensions as whole numeric values between `1` and `4000`.
"""
scalar LearnDimension

interface LearnEntry {
  sys: LearnSys!
  contentfulMetadata: LearnContentfulMetadata!
}

type LearnEntryCollection {
  total: Int!
  skip: Int!
  limit: Int!
  items: [LearnEntry]!
}

input LearnEntryFilter {
  sys: LearnSysFilter
  contentfulMetadata: LearnContentfulMetadataFilter
  OR: [LearnEntryFilter]
  AND: [LearnEntryFilter]
}

enum LearnEntryOrder {
  sys_id_ASC
  sys_id_DESC
  sys_publishedAt_ASC
  sys_publishedAt_DESC
  sys_firstPublishedAt_ASC
  sys_firstPublishedAt_DESC
  sys_publishedVersion_ASC
  sys_publishedVersion_DESC
}

"""The 'HexColor' type represents color in `rgb:ffffff` string format."""
scalar LearnHexColor

enum LearnImageFormat {
  """JPG image format."""
  JPG

  """
  Progressive JPG format stores multiple passes of an image in progressively higher detail.
          When a progressive image is loading, the viewer will first see a lower quality pixelated version which
          will gradually improve in detail, until the image is fully downloaded. This is to display an image as
          early as possible to make the layout look as designed.
  """
  JPG_PROGRESSIVE

  """PNG image format"""
  PNG

  """
  8-bit PNG images support up to 256 colors and weigh less than the standard 24-bit PNG equivalent.
          The 8-bit PNG format is mostly used for simple images, such as icons or logos.
  """
  PNG8

  """WebP image format."""
  WEBP
}

enum LearnImageResizeFocus {
  """Focus the resizing on the center."""
  CENTER

  """Focus the resizing on the top."""
  TOP

  """Focus the resizing on the top right."""
  TOP_RIGHT

  """Focus the resizing on the right."""
  RIGHT

  """Focus the resizing on the bottom right."""
  BOTTOM_RIGHT

  """Focus the resizing on the bottom."""
  BOTTOM

  """Focus the resizing on the bottom left."""
  BOTTOM_LEFT

  """Focus the resizing on the left."""
  LEFT

  """Focus the resizing on the top left."""
  TOP_LEFT

  """Focus the resizing on the largest face."""
  FACE

  """Focus the resizing on the area containing all the faces."""
  FACES
}

enum LearnImageResizeStrategy {
  """Resizes the image to fit into the specified dimensions."""
  FIT

  """
  Resizes the image to the specified dimensions, padding the image if needed.
          Uses desired background color as padding color.
  """
  PAD

  """
  Resizes the image to the specified dimensions, cropping the image if needed.
  """
  FILL

  """
  Resizes the image to the specified dimensions, changing the original aspect ratio if needed.
  """
  SCALE

  """
  Crops a part of the original image to fit into the specified dimensions.
  """
  CROP

  """Creates a thumbnail from the image."""
  THUMB
}

input LearnImageTransformOptions {
  """Desired width in pixels. Defaults to the original image width."""
  width: LearnDimension

  """Desired height in pixels. Defaults to the original image height."""
  height: LearnDimension

  """
  Desired quality of the image in percents.
          Used for `PNG8`, `JPG`, `JPG_PROGRESSIVE` and `WEBP` formats.
  """
  quality: LearnQuality

  """
  Desired corner radius in pixels.
          Results in an image with rounded corners (pass `-1` for a full circle/ellipse).
          Defaults to `0`. Uses desired background color as padding color,
          unless the format is `JPG` or `JPG_PROGRESSIVE` and resize strategy is `PAD`, then defaults to white.
  """
  cornerRadius: Int

  """Desired resize strategy. Defaults to `FIT`."""
  resizeStrategy: LearnImageResizeStrategy

  """Desired resize focus area. Defaults to `CENTER`."""
  resizeFocus: LearnImageResizeFocus

  """
  Desired background color, used with corner radius or `PAD` resize strategy.
          Defaults to transparent (for `PNG`, `PNG8` and `WEBP`) or white (for `JPG` and `JPG_PROGRESSIVE`).
  """
  backgroundColor: LearnHexColor

  """Desired image format. Defaults to the original image format."""
  format: LearnImageFormat
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar LearnJSON

"""
A specific topic within a track, a lesson can also be thought of as a page [See type definition](https://app.contentful.com/spaces/muw2pziidpat/content_types/lesson)
"""
type LearnLesson implements LearnEntry {
  sys: LearnSys!
  contentfulMetadata: LearnContentfulMetadata!
  linkedFrom(allowedLocales: [String]): LearnLessonLinkingCollections
  nameHeader(locale: String): String
  id(locale: String): String
  points(locale: String): Int
  pageNumber(locale: String): Int
  hasNextPage(locale: String): Boolean
  content(locale: String): LearnLessonContent
  tags(locale: String): [String]
  track(preview: Boolean, locale: String): LearnTrack
}

type LearnLessonCollection {
  total: Int!
  skip: Int!
  limit: Int!
  items: [LearnLesson]!
}

type LearnLessonContent {
  json: LearnJSON!
  links: LearnLessonContentLinks!
}

type LearnLessonContentAssets {
  hyperlink: [LearnAsset]!
  block: [LearnAsset]!
}

type LearnLessonContentEntries {
  inline: [LearnEntry]!
  hyperlink: [LearnEntry]!
  block: [LearnEntry]!
}

type LearnLessonContentLinks {
  entries: LearnLessonContentEntries!
  assets: LearnLessonContentAssets!
}

input LearnLessonFilter {
  track: LearncfTrackNestedFilter
  sys: LearnSysFilter
  contentfulMetadata: LearnContentfulMetadataFilter
  nameHeader_exists: Boolean
  nameHeader: String
  nameHeader_not: String
  nameHeader_in: [String]
  nameHeader_not_in: [String]
  nameHeader_contains: String
  nameHeader_not_contains: String
  id_exists: Boolean
  id: String
  id_not: String
  id_in: [String]
  id_not_in: [String]
  id_contains: String
  id_not_contains: String
  points_exists: Boolean
  points: Int
  points_not: Int
  points_in: [Int]
  points_not_in: [Int]
  points_gt: Int
  points_gte: Int
  points_lt: Int
  points_lte: Int
  pageNumber_exists: Boolean
  pageNumber: Int
  pageNumber_not: Int
  pageNumber_in: [Int]
  pageNumber_not_in: [Int]
  pageNumber_gt: Int
  pageNumber_gte: Int
  pageNumber_lt: Int
  pageNumber_lte: Int
  hasNextPage_exists: Boolean
  hasNextPage: Boolean
  hasNextPage_not: Boolean
  content_exists: Boolean
  content_contains: String
  content_not_contains: String
  tags_exists: Boolean
  tags_contains_all: [String]
  tags_contains_some: [String]
  tags_contains_none: [String]
  track_exists: Boolean
  OR: [LearnLessonFilter]
  AND: [LearnLessonFilter]
}

type LearnLessonLinkingCollections {
  entries(skip: Int = 0, limit: Int = 100, preview: Boolean, locale: String): LearnEntryCollection
  tracks(skip: Int = 0, limit: Int = 100, preview: Boolean, locale: String): LearnTrackCollection
}

enum LearnLessonOrder {
  nameHeader_ASC
  nameHeader_DESC
  id_ASC
  id_DESC
  points_ASC
  points_DESC
  pageNumber_ASC
  pageNumber_DESC
  hasNextPage_ASC
  hasNextPage_DESC
  sys_id_ASC
  sys_id_DESC
  sys_publishedAt_ASC
  sys_publishedAt_DESC
  sys_firstPublishedAt_ASC
  sys_firstPublishedAt_DESC
  sys_publishedVersion_ASC
  sys_publishedVersion_DESC
}

"""
The 'Quality' type represents quality as whole numeric values between `1` and `100`.
"""
scalar LearnQuality

type LearnQuery {
  asset(id: String!, preview: Boolean, locale: String): LearnAsset
  assets(skip: Int = 0, limit: Int = 100, preview: Boolean, locale: String, where: LearnAssetFilter, order: [LearnAssetOrder]): LearnAssetCollection
  track(id: String!, preview: Boolean, locale: String): LearnTrack
  tracks(skip: Int = 0, limit: Int = 100, preview: Boolean, locale: String, where: LearnTrackFilter, order: [LearnTrackOrder]): LearnTrackCollection
  lesson(id: String!, preview: Boolean, locale: String): LearnLesson
  lessons(skip: Int = 0, limit: Int = 100, preview: Boolean, locale: String, where: LearnLessonFilter, order: [LearnLessonOrder]): LearnLessonCollection
  technology(id: String!, preview: Boolean, locale: String): LearnTechnology
  technologies(skip: Int = 0, limit: Int = 100, preview: Boolean, locale: String, where: LearnTechnologyFilter, order: [LearnTechnologyOrder]): LearnTechnologyCollection
  codeBlock(id: String!, preview: Boolean, locale: String): LearnCodeBlock
  codeBlocks(skip: Int = 0, limit: Int = 100, preview: Boolean, locale: String, where: LearnCodeBlockFilter, order: [LearnCodeBlockOrder]): LearnCodeBlockCollection
  difficulty(id: String!, preview: Boolean, locale: String): LearnDifficulty
  difficulties(skip: Int = 0, limit: Int = 100, preview: Boolean, locale: String, where: LearnDifficultyFilter, order: [LearnDifficultyOrder]): LearnDifficultyCollection
  reward(id: String!, preview: Boolean, locale: String): LearnReward
  rewards(skip: Int = 0, limit: Int = 100, preview: Boolean, locale: String, where: LearnRewardFilter, order: [LearnRewardOrder]): LearnRewardCollection
  entries(skip: Int = 0, limit: Int = 100, preview: Boolean, locale: String, where: LearnEntryFilter, order: [LearnEntryOrder]): LearnEntryCollection
}

"""
A toast which gives out rewards based on how well a user is doing. [See type definition](https://app.contentful.com/spaces/muw2pziidpat/content_types/reward)
"""
type LearnReward implements LearnEntry {
  sys: LearnSys!
  contentfulMetadata: LearnContentfulMetadata!
  linkedFrom(allowedLocales: [String]): LearnRewardLinkingCollections
  name(locale: String): String
  shortDescription(locale: String): String
}

type LearnRewardCollection {
  total: Int!
  skip: Int!
  limit: Int!
  items: [LearnReward]!
}

input LearnRewardFilter {
  sys: LearnSysFilter
  contentfulMetadata: LearnContentfulMetadataFilter
  name_exists: Boolean
  name: String
  name_not: String
  name_in: [String]
  name_not_in: [String]
  name_contains: String
  name_not_contains: String
  shortDescription_exists: Boolean
  shortDescription: String
  shortDescription_not: String
  shortDescription_in: [String]
  shortDescription_not_in: [String]
  shortDescription_contains: String
  shortDescription_not_contains: String
  OR: [LearnRewardFilter]
  AND: [LearnRewardFilter]
}

type LearnRewardLinkingCollections {
  entries(skip: Int = 0, limit: Int = 100, preview: Boolean, locale: String): LearnEntryCollection
}

enum LearnRewardOrder {
  name_ASC
  name_DESC
  shortDescription_ASC
  shortDescription_DESC
  sys_id_ASC
  sys_id_DESC
  sys_publishedAt_ASC
  sys_publishedAt_DESC
  sys_firstPublishedAt_ASC
  sys_firstPublishedAt_DESC
  sys_publishedVersion_ASC
  sys_publishedVersion_DESC
}

type LearnSys {
  id: String!
  spaceId: String!
  environmentId: String!
  publishedAt: LearnDateTime
  firstPublishedAt: LearnDateTime
  publishedVersion: Int
}

input LearnSysFilter {
  id_exists: Boolean
  id: String
  id_not: String
  id_in: [String]
  id_not_in: [String]
  id_contains: String
  id_not_contains: String
  publishedAt_exists: Boolean
  publishedAt: LearnDateTime
  publishedAt_not: LearnDateTime
  publishedAt_in: [LearnDateTime]
  publishedAt_not_in: [LearnDateTime]
  publishedAt_gt: LearnDateTime
  publishedAt_gte: LearnDateTime
  publishedAt_lt: LearnDateTime
  publishedAt_lte: LearnDateTime
  firstPublishedAt_exists: Boolean
  firstPublishedAt: LearnDateTime
  firstPublishedAt_not: LearnDateTime
  firstPublishedAt_in: [LearnDateTime]
  firstPublishedAt_not_in: [LearnDateTime]
  firstPublishedAt_gt: LearnDateTime
  firstPublishedAt_gte: LearnDateTime
  firstPublishedAt_lt: LearnDateTime
  firstPublishedAt_lte: LearnDateTime
  publishedVersion_exists: Boolean
  publishedVersion: Float
  publishedVersion_not: Float
  publishedVersion_in: [Float]
  publishedVersion_not_in: [Float]
  publishedVersion_gt: Float
  publishedVersion_gte: Float
  publishedVersion_lt: Float
  publishedVersion_lte: Float
}

"""
Describes a specific type of technology such as a programming language, framework, libraries, etc... [See type definition](https://app.contentful.com/spaces/muw2pziidpat/content_types/technology)
"""
type LearnTechnology implements LearnEntry {
  sys: LearnSys!
  contentfulMetadata: LearnContentfulMetadata!
  linkedFrom(allowedLocales: [String]): LearnTechnologyLinkingCollections
  name(locale: String): String
  description(locale: String): String
  image(preview: Boolean, locale: String): LearnAsset
}

type LearnTechnologyCollection {
  total: Int!
  skip: Int!
  limit: Int!
  items: [LearnTechnology]!
}

input LearnTechnologyFilter {
  sys: LearnSysFilter
  contentfulMetadata: LearnContentfulMetadataFilter
  name_exists: Boolean
  name: String
  name_not: String
  name_in: [String]
  name_not_in: [String]
  name_contains: String
  name_not_contains: String
  description_exists: Boolean
  description: String
  description_not: String
  description_in: [String]
  description_not_in: [String]
  description_contains: String
  description_not_contains: String
  image_exists: Boolean
  OR: [LearnTechnologyFilter]
  AND: [LearnTechnologyFilter]
}

type LearnTechnologyLinkingCollections {
  entries(skip: Int = 0, limit: Int = 100, preview: Boolean, locale: String): LearnEntryCollection
  tracks(skip: Int = 0, limit: Int = 100, preview: Boolean, locale: String): LearnTrackCollection
}

enum LearnTechnologyOrder {
  name_ASC
  name_DESC
  sys_id_ASC
  sys_id_DESC
  sys_publishedAt_ASC
  sys_publishedAt_DESC
  sys_firstPublishedAt_ASC
  sys_firstPublishedAt_DESC
  sys_publishedVersion_ASC
  sys_publishedVersion_DESC
}

"""
A path that a user can take to start learning a particular topic [See type definition](https://app.contentful.com/spaces/muw2pziidpat/content_types/track)
"""
type LearnTrack implements LearnEntry {
  sys: LearnSys!
  contentfulMetadata: LearnContentfulMetadata!
  linkedFrom(allowedLocales: [String]): LearnTrackLinkingCollections
  name(locale: String): String
  id(locale: String): String
  spotlighted(locale: String): Boolean
  description(locale: String): String
  previewProjectIds(locale: String): [String]
  technologies(skip: Int = 0, limit: Int = 100, preview: Boolean, locale: String): LearnTrackTechnologiesCollection
  lessons(skip: Int = 0, limit: Int = 100, preview: Boolean, locale: String): LearnTrackLessonsCollection
  difficulty(preview: Boolean, locale: String): LearnDifficulty
  previewProjects: [ShowcaseProject!]!
}

type LearnTrackCollection {
  total: Int!
  skip: Int!
  limit: Int!
  items: [LearnTrack]!
}

input LearnTrackFilter {
  difficulty: LearncfDifficultyNestedFilter
  sys: LearnSysFilter
  contentfulMetadata: LearnContentfulMetadataFilter
  name_exists: Boolean
  name: String
  name_not: String
  name_in: [String]
  name_not_in: [String]
  name_contains: String
  name_not_contains: String
  id_exists: Boolean
  id: String
  id_not: String
  id_in: [String]
  id_not_in: [String]
  id_contains: String
  id_not_contains: String
  spotlighted_exists: Boolean
  spotlighted: Boolean
  spotlighted_not: Boolean
  description_exists: Boolean
  description: String
  description_not: String
  description_in: [String]
  description_not_in: [String]
  description_contains: String
  description_not_contains: String
  previewProjectIds_exists: Boolean
  previewProjectIds_contains_all: [String]
  previewProjectIds_contains_some: [String]
  previewProjectIds_contains_none: [String]
  technologiesCollection_exists: Boolean
  lessonsCollection_exists: Boolean
  difficulty_exists: Boolean
  OR: [LearnTrackFilter]
  AND: [LearnTrackFilter]
}

type LearnTrackLessonsCollection {
  total: Int!
  skip: Int!
  limit: Int!
  items: [LearnLesson]!
}

type LearnTrackLinkingCollections {
  entries(skip: Int = 0, limit: Int = 100, preview: Boolean, locale: String): LearnEntryCollection
  lessons(skip: Int = 0, limit: Int = 100, preview: Boolean, locale: String): LearnLessonCollection
}

enum LearnTrackOrder {
  name_ASC
  name_DESC
  id_ASC
  id_DESC
  spotlighted_ASC
  spotlighted_DESC
  sys_id_ASC
  sys_id_DESC
  sys_publishedAt_ASC
  sys_publishedAt_DESC
  sys_firstPublishedAt_ASC
  sys_firstPublishedAt_DESC
  sys_publishedVersion_ASC
  sys_publishedVersion_DESC
}

type LearnTrackTechnologiesCollection {
  total: Int!
  skip: Int!
  limit: Int!
  items: [LearnTechnology]!
}

input LearncfDifficultyNestedFilter {
  sys: LearnSysFilter
  contentfulMetadata: LearnContentfulMetadataFilter
  name_exists: Boolean
  name: String
  name_not: String
  name_in: [String]
  name_not_in: [String]
  name_contains: String
  name_not_contains: String
  shortDescription_exists: Boolean
  shortDescription: String
  shortDescription_not: String
  shortDescription_in: [String]
  shortDescription_not_in: [String]
  shortDescription_contains: String
  shortDescription_not_contains: String
  hexCodeColor_exists: Boolean
  hexCodeColor: String
  hexCodeColor_not: String
  hexCodeColor_in: [String]
  hexCodeColor_not_in: [String]
  hexCodeColor_contains: String
  hexCodeColor_not_contains: String
  OR: [LearncfDifficultyNestedFilter]
  AND: [LearncfDifficultyNestedFilter]
}

input LearncfTrackNestedFilter {
  sys: LearnSysFilter
  contentfulMetadata: LearnContentfulMetadataFilter
  name_exists: Boolean
  name: String
  name_not: String
  name_in: [String]
  name_not_in: [String]
  name_contains: String
  name_not_contains: String
  id_exists: Boolean
  id: String
  id_not: String
  id_in: [String]
  id_not_in: [String]
  id_contains: String
  id_not_contains: String
  spotlighted_exists: Boolean
  spotlighted: Boolean
  spotlighted_not: Boolean
  description_exists: Boolean
  description: String
  description_not: String
  description_in: [String]
  description_not_in: [String]
  description_contains: String
  description_not_contains: String
  previewProjectIds_exists: Boolean
  previewProjectIds_contains_all: [String]
  previewProjectIds_contains_some: [String]
  previewProjectIds_contains_none: [String]
  technologiesCollection_exists: Boolean
  lessonsCollection_exists: Boolean
  difficulty_exists: Boolean
  OR: [LearncfTrackNestedFilter]
  AND: [LearncfTrackNestedFilter]
}

type Mutation {
  account: AccountMutation
  blog: BlogRootMutation
  showcase: ShowcaseMutation
  labs: LabsMutation
}

type Query {
  account: AccountQuery
  blog: BlogRootQuery
  cms: CmsQuery
  showYourWork: ShowYourWorkQuery
  showcase: ShowcaseQuery
  calendar: CalendarQuery
  twitch: TwitchQuery
  learn: LearnQuery
  labs: LabsQuery
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar ShowYourWorkDateTime

type ShowYourWorkDiscordMessage {
  id: String!
  userId: String!
  text: String!
  imageUrl(fillBlur: Boolean, strategy: ShowYourWorkResizeStrategy, height: Float, width: Float): String!
  videoUrl: String
  createdAt: ShowYourWorkDateTime!
  author: AccountUser
}

type ShowYourWorkQuery {
  messages(take: Float, skip: Float): [ShowYourWorkDiscordMessage!]!
}

enum ShowYourWorkResizeStrategy {
  CLAMP
  CLIP
  CROP
  FACEAREA
  FILL
  FILLMAX
  MAX
  MIN
  SCALE
}

type ShowcaseAward {
  id: String!
  createdAt: ShowcaseDateTime!
  updatedAt: ShowcaseDateTime!
  type: String!
  modifier: String
  project: ShowcaseProject!
  info: CmsAward
}

input ShowcaseCreateJudgingPoolInput {
  name: String!
  eventId: String
  regionId: String
  eventGroupId: String
  programId: String
  judgingCriteria: [ShowcaseJudgingCriteriaInput!]!
}

input ShowcaseCreateProjectInput {
  name: String!
  type: ShowcaseProjectType!
  description: String
  priorExperience: String
  challengesEncountered: String
  codeLink: String
  viewLink: String
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar ShowcaseDateTime

input ShowcaseEditProjectInput {
  name: String
  type: ShowcaseProjectType
  description: String
  priorExperience: String
  challengesEncountered: String
  codeLink: String
  viewLink: String
}

type ShowcaseJudgement {
  id: String!
  createdAt: ShowcaseDateTime!
  updatedAt: ShowcaseDateTime!
  value: Float!
  username: String!
  judgingPool: ShowcaseJudgingPool!
  judgingCriteria: ShowcaseJudgingCriteria!
}

type ShowcaseJudgingCriteria {
  id: String!
  createdAt: ShowcaseDateTime!
  updatedAt: ShowcaseDateTime!
  name: String!
  weight: Float!
  judgingPool: ShowcaseJudgingPool!
}

input ShowcaseJudgingCriteriaInput {
  name: String!
  weight: Float!
}

type ShowcaseJudgingPool {
  id: String!
  createdAt: ShowcaseDateTime!
  updatedAt: ShowcaseDateTime!
  name: String!
  eventId: String
  programId: String
  eventGroupId: String
  regionId: String
  judgingCriteria: [ShowcaseJudgingCriteria!]!
  projects(needsJudging: Boolean = false, take: Float = 25): [ShowcaseProject!]!
  results: [ShowcaseJudgingResult!]!
}

type ShowcaseJudgingResult {
  value: Float!
  count: Float!
  subScores: [ShowcaseJudgingResultSubValue!]!
  project: ShowcaseProject!
}

type ShowcaseJudgingResultSubValue {
  judgingCriteria: ShowcaseJudgingCriteria!
  value: Float!
  count: Float!
}

type ShowcaseMedia {
  id: String!
  createdAt: ShowcaseDateTime!
  updatedAt: ShowcaseDateTime!
  type: ShowcaseMediaType!
  topic: ShowcaseMediaTopic!
  image(fillBlur: Boolean, strategy: ShowcaseResizeStrategy, height: Float, width: Float): String!
  stream: String
  download: String
  project: ShowcaseProject!
}

enum ShowcaseMediaFilterType {
  ANY
  IMAGES
  VIDEOS
  AUDIOS
  BOTH
}

enum ShowcaseMediaTopic {
  TEAM
  DEMO
  PRESENTATION
  JUDGES
}

enum ShowcaseMediaType {
  VIDEO
  IMAGE
  AUDIO
}

type ShowcaseMember {
  createdAt: ShowcaseDateTime!
  updatedAt: ShowcaseDateTime!
  username: String!
  project: ShowcaseProject!
  account: AccountUser
}

type ShowcaseMetadata {
  createdAt: ShowcaseDateTime!
  updatedAt: ShowcaseDateTime!
  key: String!
  value: String!
  visibility: ShowcaseMetadataVisibility!
  project: ShowcaseProject!
}

enum ShowcaseMetadataVisibility {
  PUBLIC
  PRIVATE
  ADMIN
}

type ShowcaseMetricAggregate {
  value: Float
  project: ShowcaseProject!
}

type ShowcaseMetricTimeSeries {
  time: ShowcaseDateTime!
  value: Float!
}

type ShowcaseMutation {
  addAward(modifier: String, type: String!, project: String!): ShowcaseAward!
  removeAward(id: String!): Boolean!
  judgeProject(value: Float!, judgingCriteria: String!, project: String!): Boolean!
  createJudgingPool(judgingPool: ShowcaseCreateJudgingPoolInput!): ShowcaseJudgingPool!
  removeJudgingPool(judgingPool: String!): Boolean!
  uploadMedia(upload: Upload!, topic: ShowcaseMediaTopic!, type: ShowcaseMediaType!, project: String!): ShowcaseMedia!
  deleteMedia(id: String!): Boolean!
  addMember(username: String!, project: String!): ShowcaseMember!
  removeMember(username: String!, project: String!): Boolean!
  setMetadata(visibility: ShowcaseMetadataVisibility!, value: String!, key: String!, project: String!): Boolean!
  unsetMetadata(key: String!, project: String!): Boolean!
  recordMetric(value: Float!, name: String!, member: String!, project: String!): Boolean!
  createProject(project: ShowcaseCreateProjectInput!): ShowcaseProject!
  editProject(project: ShowcaseEditProjectInput!, id: String!): ShowcaseProject!
  deleteProject(id: String!): Boolean!
  featureProject(isFeatured: Boolean, id: String!): Boolean!
}

type ShowcaseProject {
  id: String!
  createdAt: ShowcaseDateTime!
  updatedAt: ShowcaseDateTime!
  name: String!
  featured: Boolean!
  type: ShowcaseProjectType!
  description: String
  priorExperience: String
  challengesEncountered: String
  codeLink: String
  viewLink: String
  eventId: String!
  programId: String!
  eventGroupId: String
  regionId: String
  media(take: Float = 100, topics: [ShowcaseMediaTopic!], type: ShowcaseMediaType): [ShowcaseMedia!]
  awards: [ShowcaseAward!]
  members: [ShowcaseMember!]
  userJudgement: [ShowcaseJudgement!]
  metadata: [ShowcaseMetadata!]
  metadataValue(key: String!): String
  canEdit: Boolean!
  canAdmin: Boolean!
  eventGroup: CmsEvent
  program: CmsProgram
}

enum ShowcaseProjectOrderByArg {
  NEWEST
  OLDEST
}

enum ShowcaseProjectType {
  APP
  GAME
  VR
  HARDWARE
  WEBSITE
  LIBRARY
  BOT
  OTHER
}

input ShowcaseProjectsWhere {
  event: String
  eventGroup: String
  region: String
  program: String
  user: String
  featured: Boolean
  type: ShowcaseProjectType
  awarded: Boolean
  contains: String
  media: ShowcaseMediaFilterType
  mediaTopic: ShowcaseMediaTopic
}

type ShowcaseQuery {
  judgingPools: [ShowcaseJudgingPool!]!
  myJudgingPool: ShowcaseJudgingPool!
  averageMemberRecentResponses(projectWhere: ShowcaseProjectsWhere, name: String!): [ShowcaseMetricAggregate!]!
  presentationReadyPercent(where: ShowcaseProjectsWhere!): Float!
  projectsOverTime(where: ShowcaseProjectsWhere!): [ShowcaseMetricTimeSeries!]!
  membersOverTime(where: ShowcaseProjectsWhere!): [ShowcaseMetricTimeSeries!]!
  project(id: String!): ShowcaseProject!
  projects(where: ShowcaseProjectsWhere, orderBy: ShowcaseProjectOrderByArg, take: Float, skip: Float): [ShowcaseProject!]!
}

enum ShowcaseResizeStrategy {
  CLAMP
  CLIP
  CROP
  FACEAREA
  FILL
  FILLMAX
  MAX
  MIN
  SCALE
}

type Subscription {
  userUpdate: AccountSubscriptionUser
  userBadgeUpdate: AccountSubscriptionBadge
  userDisplayedBadgesUpdate: AccountSubscriptionUser
  userProfilePictureUpdate: AccountSubscriptionUser
  userRoleUpdate: AccountSubscriptionUser
  userUnlinkDiscord: String
  userCultSelection: AccountSubscriptionUser
  projectCreated(where: ShowcaseProjectsWhere): ShowcaseProject!
  projectEdited(where: ShowcaseProjectsWhere): ShowcaseProject!
  projectDeleted(where: ShowcaseProjectsWhere): ShowcaseProject!
  memberAdded(where: ShowcaseProjectsWhere): ShowcaseMember!
  memberRemoved(where: ShowcaseProjectsWhere): ShowcaseMember!
}

type TwitchLiveStatus {
  title: String!
  username: String!
  url: String!
  startedAt: String!
  viewerCount: Int!
  thumbnail(width: Int!, height: Int!): String!
}

type TwitchQuery {
  live: TwitchLiveStatus
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload
